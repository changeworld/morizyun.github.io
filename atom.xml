<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-06-21T18:41:59+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Realm Swift/objective-C/Android用のデータベース]]></title>
    <link href="http://morizyun.github.io/blog/realm-swift-database-ios-smartphone/"/>
    <updated>2015-06-21T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/realm-swift-database-ios-smartphone</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797371145/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797371145&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797371145&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797371145" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Swiftやobjective-Cなどを使ったiOSのアプリ開発や、
Javaを使ったAndroid開発で使えるローカルデータベースとして最近人気がある『<strong><a href="https://realm.io/jp/">Realm</a></strong>』の紹介です。</p>

<p>今回はまだ触り始めたばかりであまり知見もないので、紹介記事へのリンクをメインにします。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Realmの特徴</h2>

<pre>
* 使い方が簡単
* ゼロコピーの設計なので速い
* iOS、Androidでクロスプラットフォーム
</pre>


<h2>リンク集</h2>

<h3>公式ドキュメント</h3>

<p><strong><a href="https://realm.io/jp/docs/swift/latest/">Swift Docs - Realm is a mobile database: a replacement for SQLite &amp; Core Data</a></strong></p>

<p>公式ドキュメント。日本人のコミッターもいるそうで、とにかくドキュメントがわかりやすいのも特徴の一つ。</p>

<h3>Realm for Swift まとめ完全版</h3>

<p><strong><a href="http://qiita.com/okitsutakatomo/items/9134c5fa8bd4384a2acf">Realm for Swift まとめ完全版</a></strong></p>

<p>これだけ読んでも簡単な使い方ならわかるほどクオリティの高いまとめ。素晴らしすぎる。</p>

<h3>Realmを使ってデータ管理</h3>

<p><strong><a href="http://qiita.com/jtemplej/items/0443571fdbffbcea3e7f">Objective-C - Realmを使ってデータ管理【Swift編】-その2- - Qiita</a></strong><br/>
<strong><a href="http://qiita.com/jtemplej/items/10ed4bc0cc6519682e6e">iOS - Realmを使ってデータ管理【Swift編】-その3- - Qiita</a></strong></p>

<p>こちらもQiitaの記事ですが、Realmを使ってデータ管理するときに使いそうな細かいTipsが書かれている。Qiita素敵！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Upsert」 大量のデータを一括でInsert/UpdateするGem！]]></title>
    <link href="http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql/"/>
    <updated>2015-06-14T18:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00YG8PXLI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00YG8PXLI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00YG8PXLI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00YG8PXLI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails/Rubyで大量のデータを一括で新規登録・更新スクリプト
を書く場合は、ActiveRecordは生成コストが高くて、必ずしも向いていません。そんな状況での利用にオススメなのが、この
『<strong><a href="https://github.com/seamusabshere/upsert">upsert</a></strong>』というGemです。</p>

<p>このGemがサポートしているデータベースは、<code>MySQL、PostgreSQL、SQLite3</code>です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Upsertが適した利用シーン</h2>

<p>実装としては、OracleやMySQLのPL/SQL、PostgreSQLのPL/pgSQLのスクリプトを一時的に定義して、
その中で対象テーブルに一致するキーのレコードがあればupdate、なければinsert処理を行ってくれます。
DB内部でレコードの有無を判定して、insert/update処理までおこなってくれるので、当然速度は早くなります。</p>

<p>また、Commitを複数件単位でまとめてくれる機能も持っているので、ActiveRecordで同じ機能を
実装する場合に比べると、更に速度が早くなります。</p>

<p>一方でデメリットとして、ActiveRecord側に設定しているvalidationや便利機能が使えなくなるので、
そのデメリットを考慮しても速度を優先させたいような処理で限定して使うことをおすすめします！</p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle install</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bulk Insert/Update</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;upsert&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecordでUpsertを使う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
にUpsertする場合は次のように記述します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;upsert/active_record_upsert&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Pet</span><span class="o">.</span><span class="n">upsert</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;beagle&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecordで一括でUpsertを行う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
に2件のデータを一括で、Upsertする場合は次のように記述します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bulk でinsert / updateを実行 (mass upsert)</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">connection_pool</span><span class="o">.</span><span class="n">with_connection</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Upsert</span><span class="o">.</span><span class="n">batch</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">table_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">upsert</span><span class="o">|</span>
</span><span class='line'>    <span class="n">upsert</span><span class="o">.</span><span class="n">row</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;beagle&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span><span class='line'>    <span class="n">upsert</span><span class="o">.</span><span class="n">row</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Pierre&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;tabby&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>あとがき</h2>

<p>Ruby/ActiveRecordで大量のデータを登録するようなスクリプトを書くことは
必ずしも適していない。。。かもしれませんが、Rubyで複雑なデータを加工して
登録したいようなケースもあると思います。
ぜひ、そういった時の速度改善に使ってみてください！</p>

<h2>おまけ</h2>

<p>2009年の記事ですが、結構面白いのでオススメです！</p>

<p><strong><a href="https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/">Mass inserting data in Rails without killing your performance</a></strong></p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「minimum-omniauth-scaffold」　Facebook/Twitter/GitHubログインを高速実装！]]></title>
    <link href="http://morizyun.github.io/blog/minimum-omniauth-scaffold/"/>
    <updated>2015-05-30T17:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/minimum-omniauth-scaffold</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4839926689/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839926689&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4839926689&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4839926689" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プロダクトを作る時にFacebookやTwitter、GitHubのログイン機能を組み込むのはかなり普通に必要になってきました。そんな時にすごく便利なのが、この「<strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">minimum-omniauth-scaffold</a></strong>」です。</p>

<p>実際にハッカソンの中で初めて使いましたが、10〜20分で簡単に実装できてしました。
以下の環境で実行できました！</p>

<pre>
Rails 4.2.1
Ruby 2.2.2
</pre>




<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Facebook/Twitter/GitHubログイン機能</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;minimum-omniauth-scaffold&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにこちらのgemは、Ruby2.0+、Rails4.0+環境用とのことです。</p>

<h2>OmniAuth用のScaffold</h2>

<p>以下のコマンドを実行して、OmniAuth用のScaffoldを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g minimum:omniauth:scaffold
</span></code></pre></td></tr></table></div></figure>


<h2>Facebook/Twitter/GitHubでアプリを作成してキーを登録</h2>

<h3>Facebook</h3>

<p><strong><a href="https://developers.facebook.com/apps">Facebook Developers - App</a></strong>でアプリを作成して、App IDとアプリのシークレットキーを取得。<br/>
※ 必須マークが無いが 「Callback URL」も入力必要</p>

<h3>Twitter</h3>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong>でアプリを作成して、キーを取得。<br/>
※　「新しいアプリを作成」作成後「Facebookでログインするウェブサイト」に「http://0.0.0.0:3000/」を入力</p>

<h3>GitHub</h3>

<p><strong><a href="https://github.com/settings/applications/new">GitHub Register a new OAuth application</a></strong>でアプリを登録してキーを取得。
※ Main URL／Callback URL：「http://0.0.0.0:3000/」</p>

<h3>config/settings.local.yml</h3>

<p><code>config/settings.local.yml</code>に上で取得した情報を登録。</p>

<h3>本番用の環境変数の設定</h3>

<p>キー情報などはgitリポジトリに含めないほうがいいです。ということでHerokuを使って環境変数にキー情報を登録するのはこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Twitter</span>
</span><span class='line'>heroku config:set <span class="nv">TWITTER_KEY</span><span class="o">=</span>xxxxxxxxxx <span class="nv">TWITTER_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># Facebook</span>
</span><span class='line'>heroku config:set <span class="nv">FACEBOOK_APP_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">FACEBOOK_APP_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># GitHub</span>
</span><span class='line'>heroku config:set <span class="nv">GITHUB_CLIENT_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">GITHUB_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<h3>認証用のテーブルを作成</h3>

<p>マイグレーションコマンドを実行して、認証に必要なテーブルを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>と、たったこれだけのコマンドでログイン認証に必要な機能をひと通り実装できてしまいます！</p>

<p>継続的に開発を続けてこられている作者の<strong><a href="https://twitter.com/shu_0115">@shu0115</a></strong>さんには感謝感謝です＾＾</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">shu0115/minimum-omniauth-scaffold</a></strong></p>

<p><strong><a href="http://qiita.com/shu_0115/items/6f5f0c210e9999da66be">Ruby 2.0.0-p247 + Rails 4.0.0 + minimum-omniauth-scaffold - Qiita [キータ]</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アブストラクトファクトリ Ruby 2.0.0 デザインパターン速攻習得[Abstract Factory][Design Pattern]]]></title>
    <link href="http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/"/>
    <updated>2015-05-26T20:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4894712857/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4894712857&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4894712857&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="200" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4894712857" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />GoFのデザインパターン(Design Pattern)の一つ、アブストラクトファクトリ(Abstract Factory)をRubyのサンプルコードで紹介します。</p>

<p>アブストラクトファクトリは、矛盾のないオブジェクトの生成を行うためのパターンです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>ソースコードを使ったAbstract Factoryの説明</h2>

<p>Abstract Factoryをソースコードを使って説明します。<br/>
ここでは次のような池をサンプルとして取り上げます。</p>

<pre>
* 動物を表すクラス:
  * アヒルを表すDuckクラスは、食事(eat)メソッドを持っている
  * カエルを表すFrogクラスは、食事(eat)メソッドを持っている

* 植物を表すクラス:
  * 藻を表すAlgaeクラスは、成長(grow)メソッドを持っている
  * スイレンを表すWaterLilyクラスは、成長(grow)メソッドを持っている

池の生態系を生成するクラス:
  * コンストラクタで動物と植物を定義する
  * 動物、植物のオブジェクトを返すメソッドを持っている

* 池の環境(動物と植物の組み合わせ)は次の2種類のみが許されている
  * DuckとWaterLily
  * FrogとAlgae
</pre>


<p>上を満たすコードを書いていきます。</p>

<p>まず、アヒル(Duckクラス)とカエル(Frogクラス)は次のようになります。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># アヒル</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 食べる(eat)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">eat</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;アヒル </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は食事中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># カエル</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Frog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 食べる(eat)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">eat</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;カエル </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は食事中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一方、藻(Algaeクラス)とスイレン(WaterLilyクラス)のは次のようになります。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 植物/藻</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Algae</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;藻 </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は成長中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 植物/スイレン</span>
</span><span class='line'><span class="k">class</span> <span class="nc">WaterLily</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;スイレン </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は成長中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に池を作成する前に、「池の環境の制約」について考えます。</p>

<pre>
* 池の環境(動物と植物の組み合わせ)は2種類のみが許されている
  * アヒル(Duckクラス)とスイレン(WaterLilyクラス)
  * カエル(Frogクラス)と藻(Algaeクラス)
</pre>


<p>この池の環境の制約を守ること、<strong>言い換えると矛盾のないオブジェクトの組み合わせを作る</strong>のが「<strong>Abstract Factoryパターン</strong>」です。
今回はこの矛盾のない環境の作成を次の２つのクラスに担当してもらいます。</p>

<pre>
* カエル(Frog)と藻(Algae)の生成を行う => FrogAndAlgaeFactory
* アヒル(Duck)とスイレン(WaterLily)の生成を行う => DuckAndWaterLilyFactory
</pre>


<p>さらに上の２つのクラスのベースとなる池の生態系を表すクラス<code>OrganismFactory</code>を作り、上記のクラスが継承するようにします。</p>

<p>ということで、ソースコードはこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 池の生態系を作る (Abstract Factory)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">OrganismFactory</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">number_plants</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="c1"># 池の動物を定義する</span>
</span><span class='line'>    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">animal</span> <span class="o">=</span> <span class="n">new_animal</span><span class="p">(</span><span class="s2">&quot;動物 </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="c1"># 池の植物を定義する</span>
</span><span class='line'>    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">plant</span> <span class="o">=</span> <span class="n">new_plant</span><span class="p">(</span><span class="s2">&quot;植物 </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 植物についてのオブジェクトを返す</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_plants</span>
</span><span class='line'>    <span class="vi">@plants</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 動物についてのオブジェクトを返す</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_animals</span>
</span><span class='line'>    <span class="vi">@animals</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># カエル(Frog)と藻(Algae)の生成を行う (Concrete Factory)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FrogAndAlgaeFactory</span> <span class="o">&lt;</span> <span class="no">OrganismFactory</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Frog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Algae</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># アヒル(Duck)とスイレン(WaterLily)の生成を行う(Concrete Factory)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DuckAndWaterLilyFactory</span> <span class="o">&lt;</span> <span class="no">OrganismFactory</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Duck</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">WaterLily</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のプログラムを実行した結果を載せておきます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="o">=</span> <span class="no">FrogAndAlgaeFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_animals</span>
</span><span class='line'><span class="n">animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">eat</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 0 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 1 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 2 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 3 は食事中です</span>
</span><span class='line'><span class="n">plants</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_plants</span>
</span><span class='line'><span class="n">plants</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plant</span><span class="o">|</span> <span class="n">plant</span><span class="o">.</span><span class="n">grow</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; 藻 植物 0 は成長中です</span>
</span><span class='line'>
</span><span class='line'><span class="n">factory</span> <span class="o">=</span> <span class="no">DuckAndWaterLilyFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_animals</span>
</span><span class='line'><span class="n">animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">eat</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; アヒル 動物 0 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; アヒル 動物 1 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; アヒル 動物 2 は食事中です</span>
</span><span class='line'><span class="n">plants</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_plants</span>
</span><span class='line'><span class="n">plants</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plant</span><span class="o">|</span> <span class="n">plant</span><span class="o">.</span><span class="n">grow</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; スイレン 植物 0 は成長中です</span>
</span><span class='line'><span class="c1">#=&gt; スイレン 植物 1 は成長中です</span>
</span></code></pre></td></tr></table></div></figure>


<p>矛盾のない組み合わせて、オブジェクトを生成できた事がわかります。</p>

<p>このサンプルソースはGitHubにも置いています。</p>

<p><a href="https://github.com/morizyun/ruby_design_pattern_sample" class="button big primary">サンプルソース(GitHub)</a></p>

<h2>Abstract Factoryの構成</h2>

<p>Abstract Factoryは次の３つの要素で構成されています。</p>

<pre>
AbstractFactory: ConcreteFactoryの共通部分の処理を行う(この例ではPond)
ConcreteFactory: 実際にオブジェクトの生成を行う
(この例ではFrogAndAlgaeFactoryとDuckAndWaterLilyFactoryクラス)
Product: ConcreteFactoryによって生成される側のオブジェクト
(この例では、Duck，Frog, WaterLily, algaeクラス)
</pre>


<h2>アブストラクトファクトリのメリットは？</h2>

<pre>
* 関連し合うオブジェクトの集まりを生成することができる
* 整合性が必要となるオブジェクト群を誤りなしに生成できる
</pre>


<h2>Special Thanks</h2>

<p><a href="https://twitter.com/chinmo">@chinmo</a>さんにアブストラクトファクトリについて<a href="https://gist.github.com/chinmo/6195212">コード付きのコメント</a>を頂きました。深謝です！</p>

<p>ma2さんにブログ上に記述したコードがOrganismFactoryを継承していない部分のミスをご指摘頂きました。ミスすんませんでした＆ma2さん、本当に有難うございます！</p>

<p><a href="http://murayama.hatenablog.com/entry/20090706/1246855224">Factory - Murayama Blog.</a></p>

<p><a href="http://capm-network.com/?tag=%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-AbstractFactory">デザインパターン-AbstractFactory</a></p>

<p><a href="http://www.amazon.co.jp/gp/product/4894712857/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4894712857&amp;linkCode=as2&amp;tag=morizyun00-22">Amazon.co.jp： Rubyによるデザインパターン: Russ Olsen, ラス・オルセン, 小林 健一, 菅野 裕, 吉野 雅人, 山岸 夢人, 小島 努: 本</a></p>

<h2>変更来歴</h2>

<p>12/12/10 23:10 11回FactoryをFactoryMethodとAbstractFactoryに分割<br/>
12/12/11 00:00 書籍へのリンクをAmazon アフィリエイトに変更<br/>
13/06/21 19:10 Ruby2.0.0対応、読みづらい部分を修正<br/>
13/08/15 13:15 モデリング・説明が不適切だったため、修正<br/>
14/01/18 09:35 継承の記述が抜けていたため、修正<br/>
15/05/26 20:00 コメントの記述にミスがあったので修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[セルフトーク・マネジメントのすすめ。なりたい自分を手に入れよう[書評]]]></title>
    <link href="http://morizyun.github.io/blog/selftalking-management-book-review/"/>
    <updated>2015-05-25T22:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/selftalking-management-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00N0XOWTO/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00N0XOWTO&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00N0XOWTO&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00N0XOWTO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B00N0XOWTO/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00N0XOWTO&amp;linkCode=as2&amp;tag=morizyun00-22">セルフトーク・マネジメントのすすめ</a></strong>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』
で読みました。自分をコントロールして、コンスタントに実力を発揮するためには自分自身のメンタルを常にベストな状態にする必要があります。
そんな時に役に立つのがこの『<strong>セルフトーク・マネージメント</strong>』だそうです。僕自身、人前で話をするのは苦手なので、こういった書籍を通して、
少しでも「理想とする自分」に近づけるように、努めたいと思っています。</p>

<p>ここでは、この書籍の中で特に参考になった部分を中心に書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>セルフトークとは？</h2>

<p>セルフトークとは、自分のアイデンティティや価値観、世界観といった「自分が信じているもの/Belief」が揺らいだ時に発生するものです。
このセルフトークによって感情が誘発され、それに基づいて行動が誘発されていきます。</p>

<h2>自分をコントロールするいくつかの方法</h2>

<p>以下の3つは比較的よく知られている自分をコントロールするための手法です。
自己啓発セミナーなどは、主に「アイデンティティや価値観、世界観」を組み替えることで自分をより良くします。
ポジティブシンキングは、感情を制御することで行動を変えていきます。
また認知行動療法は、誤った認識や歪んだ先入観による非合理的心情を修正すること。まず行動を変えてみるという手法です。</p>

<p>このセルフトーク・マネージメントは上記の方法と違い、感情を誘発する「言葉」を認識し、理性によって上手くコントロール
することで、感情や行動を制御するという手法です。理解さえすれば、合理的で馴染みやすい方法だと思います。</p>

<h2>セルフトークを「変える」</h2>

<p>実際にセルフトークをマネージメントする方法の最初にセルフトークを「変える」というのがあります。</p>

<pre>
1) セルフトークの状態を認識。ポジティブかネガティブかを意識する
2) 「感情による反応」を「理性による対応」に置き換える
</pre>


<p>究極的にはどんな質問を自分に投げかけられるかであり、それによってセルフトークを変える事ができる。</p>

<h2>セルフトークを「使う」</h2>

<p>セルフトークを使って、「理性による対応」を生み出すことに慣れて、使いこなし続けることで
緊張をほぐしたり、自分をいい状態に持っていくことができます。大切なことはセルフトークを通して、
悩むのではなく、考えること。もし自分がいいリーダーになりたいのであれば、「リーダーとしてどうあるべきか」
を常に考え続けることで、セルフトークを使いこなすすべを身につけていくことができます。</p>

<h2>セルフトークを「減らす」</h2>

<p>感情によって生み出される反応をできるだけ減らすことで、より良い状態を維持することを心がけます。
これは単純にセルフトークを認識して、言語化することで解決すべき問題の一つとして昇華させます。</p>

<h2>セルフトークを「なくす」</h2>

<p>スポーツにおけるゾーンのように、理性を司るセルフトークでいっぱいにすることで、本当に集中した状態を生み出します。
ポイントは結果ではなく、プロセス自体を楽しみ、目的とすることで、時間の縛りから、自由になることである。</p>

<h2>あとがき</h2>

<p>ちょっと書いた内容が具体性が乏しく、上手くノウハウを紹介することができませんでした。。。
でも私個人にはこのセルフトークを意識することで、色んな場面で自分を客観的に捉える事ができるようになってきました。
もしお時間があれば、ぜひ試しに読んでみてください＾＾</p>

<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コーチングのプロが教える「ほめる」技術！ コーヒー1杯で人生が変わる[書評]]]></title>
    <link href="http://morizyun.github.io/blog/acknowledgement-compliment-skill-book-review/"/>
    <updated>2015-05-03T11:25:00+09:00</updated>
    <id>http://morizyun.github.io/blog/acknowledgement-compliment-skill-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00JGR3T5G/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00JGR3T5G&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00JGR3T5G&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00JGR3T5G" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B00JGR3T5G/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00JGR3T5G&amp;linkCode=as2&amp;tag=morizyun00-22">コーチングのプロが教える「ほめる」技術</a></strong>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。</p>

<p>2015年5月3日時点ではkindle版の価格は、コーヒー1杯分強のお値段で気軽に買えるお値段です。
肝心の内容ですが、すでに購入後に2度読んでしまうほど、すごくためになることばかり書かれています。</p>

<p>メインのターゲットは、部下を持つ上司です。
その上司が部下のモチベーションをいかに向上させるかという、
コーチングのお仕事をされている筆者の視点で書かれています。
ですが、実際には部下上司の関係だけじゃなく、同僚や友達、恋人、
家族へのコミュニケーションにも活かせる内容が満載です！</p>

<p>今回はこの書籍の中で特に役に立った点を中心に書いていきます！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>アクノレッジメント</h2>

<p>アクノレッジメントとは、日本語では承認です。
相手の変化や違い、成長や過程・成果に気づき、相手に対して「私はあなたの存在をそこに認める」
と伝える行為・言葉のことを言います。これによって、相手は次の行動やチャレンジに対して
モチベーションをアップさせることができます。</p>

<p>この本では、このアクノレッジメントの実例や効果、実践方法などがかなり細かく記載されています。</p>

<p>今までコミュニケーションのうまい人がやっていたけど、自分で言語化できなかった部分ですが、
そういうことだったのかと、目からウロコの言葉でした。</p>

<h2>認めること・褒めること</h2>

<p>例えば人に仕事を「任せる」のもアクノレッジメントの一つ。
その人を信じて、その人に委ねることは勇気のいる行為だけどすごく大切なこと。</p>

<p>また、相手の存在価値を高めることも大切。自分にとっていかに相手が
大切かを伝えることは大切なアクノレッジメントの一つ。</p>

<p>時には部下を「接待」することも大切。その人を本当に動かしたいのであれば、
その人に対して「重要感」を感じてもらえるようにする必要があります。</p>

<h2>人によって接し方はさまざま</h2>

<p>アクノレッジメントの観点で見た場合、次の4つのタイプに分類することで、
接し方を切り替えることができるそうです。</p>

<pre>
コントローラー => 行動的、野心的で、状況を自分でコントロールしたいと思うタイプ
プロモーター => とにかく褒められたら木に登ってしまうタイプ
サポーター => 周囲からの期待に答えようと、こつこつ努力するタイプ
アナライザー => 状況を分析し、冷静に判断をするタイプ。専門性を認める必要がある。
</pre>


<p>実際には複数が組み合わさっていたりと一般化しづらい部分はありますが、
大まかな分類を持っておくだけでも、よりよいアクノレッジメントができます。
『<strong><a href="http://test.jp/">Test.jp / 自己診断テストサイト</a></strong>』などのサイトで
判定テストがあるそうなので、是非トライしてみてください！</p>

<h2>相手の立場に立ったコミュニケーション</h2>

<p>当たり前ですが、なかなか出来ていないことの一つとして
『<strong>相手の立場に立ったコミュニケーション</strong>』があると思います。</p>

<ul>
<li>人に「お願い」するときには、理由や重要性を説明する</li>
<li>人は他人に対して「警戒心」を持つ。警戒心を解きほぐすために、まずは自分をオープンにする</li>
<li>相手の話を聞く。リフレイン「相手の言ったことを繰り返すこと」は大切なコミュニケーションの一つ</li>
</ul>


<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[セッションに関するセキュリティリスクについて勉強してみた！]]></title>
    <link href="http://morizyun.github.io/blog/session-web-service/"/>
    <updated>2015-04-27T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/session-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00R0XW0E4/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00R0XW0E4&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00R0XW0E4&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00R0XW0E4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Webサービスに関するセキュリティについて基礎をちゃんと理解したくて勉強をはじめました。
基本的には、『<strong><a href="http://railsguides.jp/security.html">Rails セキュリティガイド — Rails ガイド</a></strong>』
を一から読みながら、大事なところを写経しています。無料なのにめっちゃわかりやすくてはかどります！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>セッションとは</h2>

<p>「リクエストとそのリクエスト元を結びつけるための仕組み」です。
コンピュータがネットワーク通信において、『接続(ログイン)してから切断(ログオフ)』
するまでの一連の動作や時間をさして、 <strong>セッション</strong> と呼びます。
このセッションによって、特定のユーザーがどのような状態にあるかを追跡する事ができます。</p>

<h2>セッションハイジャック</h2>

<p>ユーザのセッションidを盗むと、攻撃者がそのユーザーと偽ってWebアプリケーションを利用
できてしまいます。これを <strong>セッションハイジャック</strong> と呼びます。</p>

<h2>セッションの取り扱いに関するガイドライン</h2>

<p>セッションには巨大なオブジェクトを格納しない。idだけをセッションで保存して、データは
サーバ側に保存すること。また、セッションには重要なデータを保存しない。ユーザーによって
データの改竄や削除が容易なため。</p>

<h2>CookieStoreセッションに対する再生攻撃</h2>

<p>Cookie側に重要なデータを保存して暗号化するのもNG。過去のCookieを再現すること自体は
容易なため、悪意のあるユーザーに古いCookieを再現されてしまい、重要なデータが改竄される
可能性がある。</p>

<p>有効な対策としては、ログイン成功時に古いセッションを破棄して、新しいセッションを生成する。</p>

<h2>Railsのセッション管理</h2>

<pre>
# Cookieでの保存(CookieStore、デフォルト)
セッションの中身を_application_sessionというCookieに保存する。Rails4以降は暗号化している。
クライアント側で操作できてしまうので、過去の状態に戻す等の不正が考えられる。

# DBへの保存
ActiveRecordSessionStoreなどのGemを使うとDBにセッションの中身を保存できる。
サーバ側に保存することでCookieStoreの問題を解消できるがDBへの負荷が上がってしまう。

# メモリへの保存
DalliなどのGemを使うとMemcachedやRedisなどにセッションを保存できる。
DBよりも高速に処理できるが、複数サーバの環境では一箇所のMemcachedやRedisを共有する必要がある。
</pre>


<h2>セッション固定攻撃</h2>

<p>セッションが有効期限切れになるタイミングで、攻撃者が標的のセッションを自分のものと置き換えます。
具体的には、XSSを使ってJavaScriptのコードインジェクションによって置き換えます。
もし、サーバー側がそのセッションを破棄せずに使い続けるような仕様になっている場合は
そのセッションが攻撃者のものと一致した状態でログイン処理を行う。
結果として、攻撃者は標的ユーザーになりすますことができます。</p>

<p>これを防ぐためにログイン時にセッションを破棄して新しいセッションを生成することです。
Railsであれば以下のコマンドを実行すればセッションを破棄することができます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reset_session</span>
</span></code></pre></td></tr></table></div></figure>


<h2>セッションに有効期限をつける</h2>

<p>セッションを無期限にした場合、CSRFやセッションハイジャック、セッション固定などの攻撃の機会を増やしてしまいます。
これを防ぐためには、セッションに有効期限を持つようにすることです。ただし、Cookieでセッションを管理する
場合は、ブラウザ内で簡単に有効期限を変更できてしまいます。そのため、セッションの有効期限はサーバーサイド
で管理することが望ましいと言われています。</p>

<h2>CSRF (Cross Site Request Forgeries)</h2>

<p>攻撃の主な流れ。</p>

<pre>
1) 攻撃者が、攻撃用のWebページを作成して WWW上に公開する
2) 第三者が、攻撃用のWebページにアクセスする
3) 第三者が、HTTPリクエストによって、攻撃者のの意図した操作が行われる
</pre>


<h2>Webサイト側のCSRFへの対策</h2>

<p>Webサイト(開発者)側のCSRFへの対策。</p>

<pre>
1) 暗号論的擬似乱数をCookie値とformのhidden値に発行する
2) 一方の値は、偽造を防ぐために暗号学的ハッシュ関数に通す
3) HTTP POST時にその両方の値が一致するかを検証する
</pre>




<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<p><strong><a href="http://thinkit.co.jp/free/tech/9/2/1.html">[ThinkIT] 第2回：セッション管理 (1/4)</a></strong></p>

<p><strong><a href="http://shindolog.hatenablog.com/entry/2014/11/02/164118">Railsのセッション管理方法について - Programming log - Shindo200</a></strong></p>

<p><strong><a href="http://railsguides.jp/security.html">Rails セキュリティガイド — Rails ガイド</a></strong></p>

<p><strong><a href="http://bakera.jp/glossary/%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83">セッション固定攻撃 | 鳩丸ぐろっさり (用語集)</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAKERS 21世紀の産業革命が始まる を読みました。未来のビジョンが変わる本[書評]]]></title>
    <link href="http://morizyun.github.io/blog/makers-the-new-industrial-revolution-book-review/"/>
    <updated>2015-04-25T09:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/makers-the-new-industrial-revolution-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B009SKVI90/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B009SKVI90&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B009SKVI90&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B009SKVI90" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B009SKVI90/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B009SKVI90&amp;linkCode=as2&amp;tag=morizyun00-22">MAKERS  -21世紀の産業革命が始まる</a></strong>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。
2012年に日本語化された本でかなりのベストセラーになりましたが、今秋初めて読みました。
ビット(デジタル)の世界とアトム(物質)の世界との融合がものづくりの世界に起きることで、
新しい産業革命が生み出されるという内容です。</p>

<p>今読んでも不思議なくらい色褪せない内容で、英語圏と日本語圏の知識・技術格差の広がりと、
アトムの世界に影響を与えるのには時間がかかるんだということ実感しました。</p>

<p>今回の書評は少しネガティビティがありますがご容赦頂ければ幸いです＾＾；</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>オープンソースによるものづくり</h2>

<p>日本ではオープンソースによる開発はソフトウェアが有名だが、海外ではオープンソースのマインドを
受け継いで、ネット上で多くの人が協力してアトムのものづくりをするムーブメントが数年前から起きている。</p>

<p>一方で日本では2015年時点でも、未だに大きなコミュニティは生まれていないように思える。
これは日本という閉じた世界に閉じこもった結果、新しいイノベーションの仕組みから取り残されているように思える。
逆に、英語のコミュニケーションが大切だとすごく感じた。</p>

<h2>Webによるマーケティング</h2>

<p>Webの出現によって、世界中に情報発信できるようになった。
これまでニッチ過ぎて、通常のマーケティングではリーチできなかったような人にリーチする手段が生まれた。
結果、ニッチな市場であっても数千、数万のニーズを生み出し、それをターゲットとした製造業とその生態系が生まれ始めている。</p>

<p>これも日本だと注目こそされても着実なセールスを生み出せるスタートアップが生まれていないことと対象的だと思う。
この本が販売されて2年強たっての今の日本の現状は本当に驚くべき事実だと思う。</p>

<h2>あとがき</h2>

<p>少し短めですがこの本を読んで感じたのは、未来のものづくりの可能性と、
日本にいると見えづらい2012年時点でのアトムとビットが融合したものづくりのトレンドです。
そして、同時に日本にある潜在的な可能性と市場、英語ができることによるチャンスを感じました。</p>

<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不格好経営 読みました！魂を揺さぶられる文章！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/malconformation-management-dena-book-review/"/>
    <updated>2015-04-05T12:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/malconformation-management-dena-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00E7OQ0TA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00E7OQ0TA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00E7OQ0TA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00E7OQ0TA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B00E7OQ0TA/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00E7OQ0TA&amp;linkCode=as2&amp;tag=morizyun00-22">不格好経営―チームDeNAの挑戦</a></strong>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。
2-3時間で一気に読んでしまいました。読んだ直後の感想としては、本当に『<strong>魂が揺さぶられる本</strong>』の一言でした。
多分これはDeNAの創業者の南場さん自身の根本的な『<strong>人を魅了する才能</strong>』が文章にまで現れている気がします。</p>

<p>今回は少し短めですが、思ったことをメモしておきます。
1年後にもう一度読みなおしてみて、来年の自分がどう思うかを知りたいと思わせる本です＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>南場さんの才能と人としての魅力</h2>

<p>最初に書いたことの繰り返しにはなりますが、第一声はここまで人の心に訴えかけられるのかと素直に感心しました。
読ませる文章は一級品ですが、それ以上に人の心をこれほどまでに訴えかけ、魅了するのかと感銘を受けました。
DeNAの創業期に南場さんのもとに、日本でもトップの中のトップの人達が多数集まったことの理由が
少しだけわかったような気がします。また、起業して、売上2,000億の企業を作り上げるということが
どういうことかの断片を知ることができたような気がします。</p>

<h2>南場さんの人間らしさと暖かさ</h2>

<p>ここには一緒に働いてきた人への感謝の気持と、DeNAというチームに対する愛情で溢れている気がします。
僕は最近、この『愛情』を自分の働いているチームに対して向けられるということが大切だと感じています。
そういう組織をどうやって作り出せるかのヒントを知ることができた点でも素晴らしい本だったと思います。</p>

<h2>不思議な表層</h2>

<p>と同時に、失礼ながら不思議な表層を見ているような気もしました。
僕が起業的なことに失敗した中途半端な人間だからこそ思う、劣等感のような気もしますが。。。
そういう意味でも自分を見つめなおすことができるいい書籍だと思います(笑)</p>

<h2>ビッターズの裏側を知ることができた</h2>

<p>個人的にオークションが大好きで、ビッターズやモバオクが成長していたのを一人のユーザーとして見ていたので、
ああこういう裏事情があったのか。。。純粋に楽しかったです。逆に言うとずっとインターネットやってて、
思えばおっさんになったなぁと気付かされた気がします(笑)</p>

<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<p>ちなみに、いつまでかはわかりませんが「<strong>30日間全額返金キャンペーン</strong>」もやっているので、まずは一度買ってためしてみるのもありだと思います！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伝わるデザインの基本を読みました！ドキュメントを書くすべての人に読んでほしい[書評]]]></title>
    <link href="http://morizyun.github.io/blog/design-basic-for-reach-book-review/"/>
    <updated>2015-04-04T11:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/design-basic-for-reach-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774166138/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774166138&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774166138&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774166138" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/4774166138/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774166138&amp;linkCode=as2&amp;tag=morizyun00-22">伝わるデザインの基本
よい資料を作るためのレイアウトのルール</a></strong>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。
たまにパワーポイントですごくきれいな資料を作る人がいましたが、ああこういうルールを守れば読み手に優しく、
読みやすくなるんだな。と納得できる実践的な情報が満載の一冊です。多分これから、何度も読んで仕事やプライベート
で活用していくことになると思います！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>目立つ書体と読みやすい書体</h2>

<p>知らないと気づかないことですが、知ってしまうとなるほどと思います。
この使い分けは一番最初に書かれていますが、かなり大切です！</p>

<pre>
  - 日本語
    - 明朝体: 長文などにマッチしていて読みやすい。疲れにくい。
    - ゴシック体: 短文など目立つところに置くといい。パワポのタイトルとか。
  - 英語
    - セリフ体: 長文などにマッチしていて読みやすい。疲れにくい。
    - サンセリフ体: 短文など目立つところに置くといい。
</pre>


<p>長文では、基本は明朝体とセリフ体を使い、タイトルなどの目立つところにはゴシック体とサンセリフ体を使うと良さそう。
パワポは逆で、基本はゴシック体とサンセリフ体を使い、長文で読みにくそうな部分があれば明朝体とセリフ体を使うことを検討するくらい。</p>

<h2>美しいフォントを選ぶ</h2>

<p>WindowsとMacでおすすめのフォントは次の通り。</p>

<pre>
  - Windows
    - 明朝体
      - 游明朝
    - ゴシック体
      - メイリオ
      - 游ゴシック
  - Mac
    - 明朝体
      - ヒラギノ明朝
      - 游明朝
    - ゴシック体
      - ヒラギノ角ゴ
      - 游ゴシック
</pre>


<h2>フォントで気をつけること</h2>

<pre>
- 英数字には、必ず英文フォントを使う
- 日本語フォントと英数字フォントの組み合わせ
  - 日本語がゴシックなら、英数字には基本はサンセリフ体を組み合わせる
  - 日本語が明朝体なら、英数字には基本はセリフ体をつかうこと
</pre>


<h2>数字は強調し、単位は小さくする</h2>

<p>これは目からうろこでしたが、特にパワーポイントなどでは「数字は強調し、単位は小さくする」
を徹底するだけでも格段に見やすくなります。</p>

<h2>背景がわかりにくい時には袋文字(黒字で枠が白)</h2>

<p>背景に写真などを使う場合には、袋文字(黒字に枠が白)というのを
使うだけでもかなり見栄えが変わります。</p>

<h2>文字の強弱には気をつける</h2>

<p>有用度に応じて優先順位をつけて、それに応じた文字サイズを適用します。
すると、目線を正しく誘導できる、受け手にやさしい資料になります。</p>

<h2>文字に関するTips</h2>

<pre>
  - 地面の大きな文字(メイリオやヒラギノ角ゴ)などは、少しだけ字間を広げると読みやすくなります
  - 行間は「行の長さ」に合わせて、読みやすさを意識して調整するといいです
  - 和文と欧文の字間は少し調整をしたほうが読みやすくなります
  - 1行の文字数は増やしすぎない方が読みやすい資料になります
</pre>


<h2>図形に関するTips</h2>

<pre>
  - 矢印の図形を使う場合は、変形させずに、矢じりの大きさと柄の太さを統一する
  - 必ず余白で囲う。文字数(行数や横幅)などが増えるほど、余白を多めに取る
  - フローチャートは位置と大きさを揃える
  - 影やグラデーションをなくして、不要な補助線は載せない。フォントはゴシックにする
  - 囲みや塗りの色は最低限に。囲みのサイズは統一させる
</pre>


<h2>表に間するTips</h2>

<pre>
  - フォントや線、行間、揃えを調節する
  - 1行ごとに背景をつけると罫線が不要になったり、読みやすくなる
</pre>


<h2>レイアウトにおける5つの法則</h2>

<pre>
  - 余白を取る: 資料やスライドの上下左右に余白をしっかりと取る
  - 揃える: グリットを意識して、レイアウトを揃えて配置する
  - グループ化する: グループ化により、直感的に構造を把握できるようにする
  - 強弱をつける: 有用度に応じて、文字の太さやサイズ、色を調節する
  - 繰り返す: ルールを作り繰り返すことで、読み手の読みやすさに配慮する
</pre>


<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<p>ちなみに、いつまでかはわかりませんが「<strong>30日間全額返金キャンペーン</strong>」もやっているので、まずは一度買ってためしてみるのもありだと思います！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBの基礎 - コネクションプーリングについて]]></title>
    <link href="http://morizyun.github.io/blog/connection-pooling-database-db-postgresql/"/>
    <updated>2015-03-30T20:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/connection-pooling-database-db-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774171972/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774171972&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774171972&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774171972" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
コネクションプーリングについて、わかっていないことが多すぎたので、ちょっとだけ調べたことをメモで残しておきます。
今はまだ触りレベルしかわかっていなのいので、もう少しちゃんと分かるようになりたい！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>[スライド] データベースの羅針盤</h2>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/28303485" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>コネクションプーリングを調べている過程で偶然見つけた資料
『<strong><a href="http://morizyun.github.io//www.slideshare.net/matsunobu/ss-28303485">データベース技術の羅針盤</a></strong>』。
とにかくわかりやすくて、俯瞰的にDBの業界を知ることが出来る資料。素晴らしすぎる。</p>

<h2>コネクション・プーリングとは？</h2>

<p>DBのコネクションを一定数確立しておいて、それを使いまわす手法のこと。
DBへの接続に必要となるオーバーヘッドをカットしてWeb/DBの双方の負荷を下げる。
また、WebとDBの接続を使いまわすことで同時接続数を節約する。
用意した、コネクション数を超えたアクセスは、コネクションに空きがでるまで待たされる。</p>

<p>以下はOracle関連の話ですが、基本はおんなじだと思います。</p>

<h2>Oracle Connection Pooling</h2>

<pre>
  - 新規のサーバープロセスの作成に必要な処理
    - OSに新しいプロセスを割り当ててもらう
    - プロセス空間をOracle用に初期化
    - Oracle SGAにアクセスできるように設定
    - Oracleを使えるようにするためのパラメータを読み込んで初期化
</pre>


<p>(1)OracleでSQLを実行にかかるコストと、コネクションを生成するコストを比較
した場合、コネクション生成のほうが圧倒的にコストが高くなるそうです。</p>

<h2>コネクションのマイナス要素</h2>

<p>コストが高い一方で、コネクションを持ちすぎることには以下のマイナス要素がある</p>

<pre>
  - 接続要求処理は、CPU使用料や応答時間におけるコストが高い
  - アイドル状態のコネクションは、メモリリソースを無駄に消費する
</pre>


<h2>開発者とDBAの視点それぞれで考えるべきこと</h2>

<pre>
  - 開発者・設計者
    - 接続頻度や保持するコネクション数は適切か？コネクションプーリングは使用可能か？

  - DBA
    - どのようなアプリケーションからどのような接続形態で使用されるのか？
</pre>


<h2>コネクションプーリングの接続プロセス</h2>

<p>Oracleの場合は、コネクションプールの管理モジュールがコネクションの管理と割り当てを担当する。</p>

<pre>
アプリケーション・プロセス x3 <- 獲得・返却 -> コネクションプールの管理モジュール <- コネクションの生成・切断 -> DB
</pre>


<h2>コネクションプーリングの構成要素</h2>

<pre>
  - 物理接続数のコントロール
    - DB内部の実装によって変わる

  - 最小物理接続数までの接続
    - 一気に取得するタイプ、段階的に取得するタイプ
  - 最小物理接続数 -> 最大物理接続数
    - 要求があればで取得するタイプ、先回りして取得するタイプ

  - 最大物理接続数を超える要求
    - 積極型、我慢型、厳密型
</pre>


<h2>アイドル接続の奪取と切断</h2>

<p>メンテナンススレッドは、一定時間使用されていない物理接続を切断するための仕組み。
これによって、使われていないスレッドが生き残り続けるのを避ける。</p>

<h2>障害時の挙動</h2>

<p>コネクションプーリングには、障害を検知するためのSQL文を設定できる。
設定できるタイミングは『論理接続獲得時、論理接続返却時、アイドル時に一定間隔』の３つ。
プロセス障害の可能性を意識して、楽観型の仕組みにするとよい。</p>

<h2>あとがき</h2>

<p>ちょっとわかっていない部分が多いので、もしコネクションプーリング
を理解する上で、おすすめの資料とかあればぜひ教えて下さい＾＾</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://e-words.jp/w/%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0.html">コネクションプーリングとは 【 connection pooling 】 〔 コネクションプール 〕 - 意味/解説/説明/定義 ： IT用語辞典</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/naoya/20060912/1158058322">コネクションプーリングの話 - naoyaのはてなダイアリー</a></strong></p>

<p><strong><a href="http://www.oracle.com/technetwork/jp/articles/chapter5-1-101584-ja.html">門外不出のOracle現場ワザ 第5章</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/wyukawa/20131116/1384621867">RDBMSのコネクションプーリングとかその辺の話 - wyukawa’s blog</a></strong></p>

<p><strong><a href="http://togetter.com/li/558788">RDBMSでコネクションプールが必要な理由、わからない。 - Togetterまとめ</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppleのiOSヒューマン・デザイン・ガイドライン読んだ！iPhone App開発者必読！]]></title>
    <link href="http://morizyun.github.io/blog/ios-human-interface-guidelines-apple-iphone-app/"/>
    <updated>2015-03-28T08:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ios-human-interface-guidelines-apple-iphone-app</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/477417064X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=477417064X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=477417064X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=477417064X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Appleが出しているiOSのデザインのガイドライン資料『<strong><a href="https://developer.apple.com/jp/documentation/UserExperience/Conceptual/MobileHIG/BasicsPart/BasicsPart.html">iOSヒューマンインターフェイスガイドライン</a></strong>』を読みました！</p>

<p>公式のドキュメントだけど、端的でわかりやすいのでiPhoneアプリを開発する人にはぜひ読んでほしいドキュメントです。</p>

<p>この資料に書かれているところで特に参考になる点を俺得メモで書きました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>iOSのUI設計の方針</h2>

<p>iOS7 以降のAppleのUIを見ると確かに納得できます。</p>

<pre>
* UIはユーザーに内容を的確に伝わるようにする。ただしそれ自身が目立ち過ぎのはダメ
* 文字は読みやすく、アイコンは的確明瞭で、その機能を明確に表すこと
* 奥行きを持つことで、視覚的な重なりや、楽しさ、わかりやすさを向上させる
</pre>


<h2>標準的なUI要素を使う</h2>

<p>OSのアップデートへの追従や、ユーザーがiOSの中で見慣れているUIを使うメリットを考えると、できるだけ
標準的なUIを使うことが推奨されています。もし、必要な場合はユーザーによる「設定」によってUIの変更
を行えるようにすることが望ましいとされています。</p>

<h2>UIのカスタマイズにおけるガイドライン</h2>

<pre>
* UIのカスタマイズによってユーザーの体験が強化されること
* ユーザーは標準UI要素になれているため、その状態を阻害することなく、操作ができること
* コンテンツを主役として考えて、カスタマイズしたUIが目立ち過ぎないように注意すること
* カスタムUIは徹底的にユーザーテストを行うこと
</pre>


<h2>起動と停止</h2>

<p>起動と停止は瞬時に行い、ログイン処理や設定処理などユーザーの操作を妨げる処理はできるだけ行わないようにする。
いつ停止しても、アプリの挙動に影響を与えないように、適切な頻度でデータを保存するようにする。</p>

<h2>ナビゲーション</h2>

<p>ナビゲーションのスタイルは大きく<code>階層型、平坦型、内容型(体験型)</code>の3つの種類がある。
ナビゲーションで大切なことは、現在アプリケーション内のどの位置にいて、次に目標とする画面には
どうすれば到達できるか、いつでもわかるようにする必要がある。</p>

<h2>設計における原則</h2>

<h3>一貫性</h3>

<p>アプリケーションのUIに一貫性があれば、あるエリアで得た知識や技能を別のエリアでもそのまま活かす事ができます。</p>

<h3>直接操作</h3>

<p>画面上のオブジェクトを、他のコントロール部品を介さずに直接操作できれば、操作の意味や得られる結果を把握しやすくする。</p>

<h3>フィードバック</h3>

<p>UIのフィードバックには、アクションを受けた旨を知らせ、結果を見せ、進捗を更新するなどの動きがあります。
直感的でわかりやすいフィードバックを心がけましょう。</p>

<h3>メタファ</h3>

<p>アプリケーションの仮想オブジェクトが、現実世界やデジタル世界におけるオブジェクトやアクションのメタファになる。
代表的なのは、書籍や雑誌めくりのインタラクションや、スイッチの切替、スライダーによる操作などです。</p>

<h2>概念を実装する手順</h2>

<p>アプリケーションの主な目的や対象ユーザーを簡潔かつ具体的に記述した「アプリケーション定義ステートメント」を作り、
統一感をとれた商品を実装することが大切です。以下主な流れです。</p>

<pre>
1) ユーザーに好まれる可能性のあるすべての機能の洗い出し
2) 対象ユーザーの決定
3) 対象ユーザーを特定して機能を絞り込む
4) 機能・コントロール・用語の整合性をとり、統一感を作り出す
5) アプリケーションが実現したい機能に合わせてカスタマイズを行う
  5-1) 常にカスタマイズを行う理由を考える(whyを繰り返す)
  5-2) アプリケーション内の一貫性を保つ
  5-3) コンテンツを重視して、コンテンツに合わせたUIを作る
  5-4) 標準コントロールの修正は最小限に留める。熟考すること。
  5-5) カスタムUI要素は徹底的にユーザーテストを行う
6) プロトタイプ作成と評価の繰り返し
</pre>


<h2>アプリケーションの拡張機能</h2>

<p>iOSで作成できるアプリケーションの拡張機能のタイプは以下の通り。</p>

<pre>
「Today」ウィジェット: 通知センタの「Today」ビューに置いて、表示内容を即座に更新、あるいは簡単なタスクが実行できる
Share: 情報投稿サイトに記事を投稿して他のユーザーと共有する
Action: 他のアプリケーションのコンテキストで、情報を操作し、あるいは表示する
Photo Editing: 「Photos」アプリケーションで写真や動画を編集する
ドキュメントプロバイダ: ファイルのリポジトリにアクセスして管理する
Custom keyboard: iOSのシステムキーボードをカスタムキーボードに置き換える
</pre>


<h2>ユーザーデータへのアクセス</h2>

<p>位置情報やコンタクトリスト、カレンダーやリマインダー、Photo Libraryなど
他のシステム・サービスが保存したデータに、他のアプリがアクセスできます。
ただしガイドラインに従って、個人データを利用してよいかを問い合わせるようにしてください。</p>

<pre>
個人データの共有が必要な理由をユーザーが理解できるように明記する
ユーザーデータがなければ、アプリケーションの主要な機能を実行できない場合のみアラートを表示
アラートを出す前には、ユーザーデータを使うようなプログラムを実行しない
アラートが不必要に表示されないように、必要とするタイミングのみアラートを出す
</pre>




<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イノベーションのジレンマ！熱い技術革新のマネージメント論[書評]]]></title>
    <link href="http://morizyun.github.io/blog/innovation-dilemma-book-review/"/>
    <updated>2015-03-23T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/innovation-dilemma-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B009ILGWS6/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B009ILGWS6&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B009ILGWS6&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B009ILGWS6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<a href="http://www.amazon.co.jp/gp/product/B009ILGWS6/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B009ILGWS6&amp;linkCode=as2&amp;tag=morizyun00-22">イノベーションのジレンマ</a>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。</p>

<p>本の大きなテーマはイノベーションにおけるマネージメント論。</p>

<p>例えば、ハードディスクが14インチ => 8インチ => 5.25インチ=> 3.5インチ => 2.5インチと
変遷する過程で、多くのトップ企業が脱落し、新興企業が上位に上り詰めるという現象が発生した。
この大きな技術的変化を筆者は『破壊的イノベーション』とよんでいる。
一方で、既存の製品での容量の増加や読み込み速度の向上など、既存技術・製品の
延長線での性能向上を『継続的イノベーション』と呼ぶ。</p>

<p>製品の進化の過程では多かれ少なかれ、この破壊的イノベーションと継続的イノベーションが発生する。
2つのイノベーションが断続的に発生する製品開発において、適切なマネージメントを科学的に
研究、議論しているのがこの本。大企業に勤めて事業に関わっている人にとって本書はとても有意義だし、
新規事業を立ち上げようとしている人の視点でも俯瞰的に事業を考えられる面白い本です。</p>

<p>今回はこの本の中で特に有意義だった内容を中心に書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>優れた組織ほど破壊的イノベーションに弱い</h2>

<p>業績の優れた企業ほど、「既存顧客」が求めないアイデアを切り捨てるシステムが整備されている。
投資家は短期的な利益を求めがちなので、破壊的技術に十分な資源を割り当てることが困難になる。
一方で、破壊的イノベーションは登場時点では既存顧客が求めるレベルに無かったり、投資家の供給に
見合う利益率や成長率を上げることは難しい。</p>

<p>だが、破壊的イノベーションはあるタイミングで既存技術によるシェアを奪い始める。
結果として、破壊的技術を顧客が求める頃には、市場参入が遅くなりすぎてしまい、市場から淘汰される。</p>

<h2>小規模な成長では大企業の成長ニーズを満たせない</h2>

<p>破壊的イノベーションは、まず「単純・低価格・性能要求の低い市場」に受け入れられやすい。
会社の規模が大きくなると、成長率を維持するために大規模市場にフォーカスしないといけなくなる。
将来大規模になる「可能性」がある小さな新興市場に参入することが困難になってしまう。</p>

<h2>上位市場で成熟した企業は下に降りられない</h2>

<p>例えば、トヨタは米国市場に参入した時にはカムリなどの低価格な車種で徐々に低価格帯の市場シェアを伸ばしながら、
少しずつ上位の価格帯に侵食していった。理由は、低価格帯よりも高価格帯のほうが利益率が高いから。
このように上位市場に移行することは、低価格帯で鍛えられたコスト構造なら簡単だ。しかし、上位市場でシェアを
持つ企業が、下位市場で同じシェアを持つことは難しい。利益率が低く、投資家や既存顧客からの利益を得られなかったり、
オーバースペックになってしまうためだ。</p>

<h2>存在しない市場は分析ができない</h2>

<p>破壊的イノベーションは、新しい市場やニーズを持つ顧客を見つけ出して、事業を成長させることがある。
存在するかどうかもわからない市場を、一定のシェアを持って大きくなった組織が、新たな市場を開拓し、
成長させていくことは、実は相当難しい。組織で働くマネージャーは失敗が許されないため、優秀な
マネージャーほど、既存顧客にマッチした戦略を立案する。成長した組織はこのジレンマから抜け出せない。</p>

<h2>製品成長のマネージメント</h2>

<p>思えば、この20年コンピュータはものすごいスピードで進化した。Windows 3.1は今思えばできることなんて
殆どなかったけど、Window95、98、XP、Vista、7、8と機能が増え、使いやすくなった。</p>

<p>じゃあ、本当にそれだけの性能がユーザーに必要不可欠だった？
インテルが作ったCPUは顧客が『必要』として進化していったのか？
それともソフトがどんどん容量を使うから、性能が進化していったのか？</p>

<p>ここで大切なことはありのままのオーバースペックを顧客に見せるのではなく、さも顧客のニーズに合わせて
進化しているようにマイクロソフトやAppleが「演出」している点だと思う。それができていることで、顧客は
その製品が必要だと思うように「錯覚」できているのかもしれないと思った。マッチポンプ大切w</p>

<h2>組織にできること、できないことを評価する</h2>

<p>組織でイノベーションに取り組み、成功させるためには、目的にあった人材の選定、訓練、動機付けだけでは足りない。
目的にあった組織の選択、構築、準備にも優れた手腕を発揮する必要がある。組織の能力は、資源、プロセス、価値基準
の３つの要因によって構成される。この３つの能力のどれか欠けても、イノベーションに成功する事はできない。</p>

<h2>あとがき</h2>

<p>以前勤めていた企業ではハイエンド製品が世界的にも強く、ローエンド製品はほぼ無名だった。
入社後、ローエンドの新製品に社運をかけて取り組んだが、結果は上手く行かず、その製品はいつのまにかカタログから消えた。
今思えば、この本の内容の多くの指摘が当てはまっていた。実体験からもこの本の内容は納得できる。</p>

<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<p>ちなみに、いつまでかはわかりませんが「<strong>30日間全額返金キャンペーン</strong>」もやっているので、まずは一度買ってためしてみるのもありだと思います！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 初心者向け 参考資料[動画/チュートリアルなど]]]></title>
    <link href="http://morizyun.github.io/blog/swift-beginner-learing-ios-iphone-apple/"/>
    <updated>2015-03-17T10:25:00+09:00</updated>
    <id>http://morizyun.github.io/blog/swift-beginner-learing-ios-iphone-apple</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4800710707/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4800710707&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4800710707&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4800710707" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ちょっと時間ができたので、Swiftの勉強をはじめました。Objective-Cに比べてずっと書きやすくなっていますが、
ところどころまだググっても出てこない情報があったりして、いい具合にハマりましたw</p>

<p>今回は2日くらいSwiftを勉強をしていて、特に役に立った資料を中心にまとめていきます！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>[動画]Swift入門 - ドットインストール</h2>

<p><strong><a href="http://dotinstall.com/lessons/basic_swift">Swift入門 (全24回)</a></strong></p>

<p>プレミアム会員限定ですが、ドットインストールでSwiftの入門チュートリアルを見る事ができます。
日本語の入門動画として、Swiftの雰囲気を知るのに最適です！</p>

<h2>[チュートリアル] Swift日本語チュートリアル</h2>

<p><strong><a href="http://xavier.hateblo.jp/entry/2014/06/12/223346">Swift日本語チュートリアル ~ 前編（Apple公式ドキュメントSwift Tour±α）</a></strong></p>

<p><strong><a href="http://xavier.hateblo.jp/entry/2014/06/14/201418">Swift日本語チュートリアル ~ 後編（Apple公式ドキュメントSwift Tour±α）</a></strong></p>

<p>本当の初心者と言うよりは他の言語の経験者がSwiftを初めて勉強するときに、標準ライブラリを
調べながらなら一通りはコーディング出来るようになることを目標にしたチュートリアル。</p>

<h2>[コーディング規約] Swift</h2>

<p><strong><a href="https://github.com/raywenderlich/swift-style-guide">raywenderlich/swift-style-guide</a></strong></p>

<p>raywenderlich.com のSwiftのコーディング規約。スクリーンショットも多くて丁寧でわかりやすいっす。</p>

<p><strong><a href="http://qiita.com/susieyy/items/f71435cc962e70d81b37">Objective-C - Swiftコーディング規約@Wantedly - Qiita</a></strong></p>

<p>Wantedlyさんで使っているSwiftのコーディング規約。言語初心者の時にはついつい、あまり良くない
書き方をしてしまいがちなので、最初にコーディング規約を読んでおくと後で負債を作らずにすむと思います！</p>

<h2>[言語機能] エクステンション と プロトコル</h2>

<p><strong><a href="http://codezine.jp/article/detail/8293">Swiftの「エクステンション」と「プロトコル」～ 機能と役割、Objective-Cとの違いを知る</a></strong></p>

<p>特にエクステンションは、</p>

<h2>[言語機能] クロージャとは</h2>

<p><strong><a href="http://qiita.com/tajihiro/items/332fe94a25209f1e80c1">Swiftでクロージャ (Closure)を簡単にまとめてみる - Qiita</a></strong></p>

<p>クロージャをちゃんとわかっていなかったので、読んでみました。少しだけ理解しました。
使いながら、少しずつちゃんと理解を深めていきたい。</p>

<h2>[Xcode] 便利なショートカット</h2>

<p>XCode6で時短か短縮するためのショートカット。英語ですがわかりやすいのでオススメ！</p>

<p><strong><a href="http://iphonedev.tv/blog/2014/9/15/14-xcode-time-saving-shortcuts-memorize-and-improve-your-productivity">14 Xcode Time Saving Keyboard Shortcuts - Memorize and Improve Your Productivity</a></strong></p>

<p>こちらはエディタ画面内でのカーソル移動などを中心にショートカットを紹介している記事。</p>

<p><strong><a href="http://nanananande.helpfulness.jp/post-1837/">Xcode5を軽快に利用するためのショートカット[基本編]</a></strong></p>

<h2>[書籍] 詳細! Swift iPhoneアプリ開発 入門ノート</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4800710707/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4800710707&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4800710707&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4800710707" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />本屋さんで小一時間読み比べて、『<strong><a href="http://www.amazon.co.jp/gp/product/4800710707/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4800710707&amp;linkCode=as2&amp;tag=morizyun00-22">詳細! Swift iPhoneアプリ開発 入門ノート Swift 1.1+Xcode 6.1+iOS 8.1対応</a></strong>』にしました。Objective-Cでも同じシリーズが多数リリースされていて、
さすがに年季の違いを感じました。知りたいことがきちんと書かれているのも好印象。</p>

<br style="clear:both;"/>


<h2>サンプルコード</h2>

<p>GitHubがカジュアルに使われるようになったお陰で、サンプルソースが結構簡単に入手できるようになりました。</p>

<p><strong><a href="http://bundlr.com/clips/538e569809359743040000c0">Bundlr - SwiftとMagicalRecordを使って簡単なTodoアプリを作るチュートリアル - Qiita</a></strong></p>

<p>MagicalRecordとSwiftを使ったお手軽なTodoアプリのチュートリアル。スクリーンショットも豊富で、
ほとんど詰まることなく、チュートリアルができます。感謝感謝っす。</p>

<p><strong><a href="http://himaratsu.hatenablog.com/entry/swift/tiqav">SwiftでTiqav APIを叩くビューワアプリを100行でつくったよ - Think Big Act Local</a></strong></p>

<p>簡単な画像Viewerのアプリ。ソースコードも説明もわかりやすくて素敵です！</p>

<h2>初心者向け Tips</h2>

<p>久々にXCodeを触っていて、最初にちょっとハマった部分を中心にメモ。</p>

<h3>iPhone Simulatorでキーボードが表示されない</h3>

<p>XCode6からMacのキーボードがつながっている事になって、
ソフトウェアキーボードが表示されない場合があるそうです。
解決策は以下の通り。</p>

<pre>
iOS Simulator -> Hardware -> Keyboard ->「Connect Hardware Keyboard」のチェックを外す
</pre>


<h3>マシなiOSアプリのフォームを実装・デザインする</h3>

<p>普通のアプリっぽい挙動を目指していた過程ですごく参考になったWebの記事。こればいいね！</p>

<p><strong><a href="http://naoty.hatenablog.com/entry/2014/09/18/012246">マシなiOSアプリのフォームを実装・デザインする - naoty.to_s</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://tnakamura.hatenablog.com/entry/2014/10/20/how_to_use_the_cocoapods_in_swift">Swift で CocoaPods を使う - present</a></strong></p>

<p><strong><a href="http://paranishian.hateblo.jp/entry/xcode/keyboard-not-showing-in-ios-simulator">iOSシミュレータでキーボードが表示されない - paranitips</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionSheetPicker-3.0 を Swiftで使う]]></title>
    <link href="http://morizyun.github.io/blog/action-sheet-picker-swift-cocoapods-ios/"/>
    <updated>2015-03-16T12:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/action-sheet-picker-swift-cocoapods-ios</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117038/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117038&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117038&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117038" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
UIActionSheetがiOS8でdeprecatedになりましたが、この『<strong><a href="https://github.com/skywinder/ActionSheetPicker-3.0">ActionSheetPicker-3.0</a></strong>』を使うと、それ代替する事ができます。さらにActionSheetPickerはUIPickerView
としての機能を簡単にカスタマイズすることができます！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Cocoapodsによるライブラリのインストール</h2>

<p>基本的にはブリッジするためのヘッダファイルさえ書けば大丈夫でした。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># プロジェクトフォルダの直下に移動</span>
</span><span class='line'><span class="nb">cd</span> /path/to/project
</span><span class='line'>
</span><span class='line'><span class="c"># Podfileの初期化 (Podfileが存在しない場合のみ)</span>
</span><span class='line'>pod init
</span></code></pre></td></tr></table></div></figure>


<p><code>Podfile</code>が作成されるので、そこに次のように設定を追記します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>platform :ios, <span class="s1">&#39;8.0&#39;</span>
</span><span class='line'>
</span><span class='line'>target <span class="s1">&#39;APP_NAME&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span>pod <span class="s1">&#39;ActionSheetPicker-3.0&#39;</span>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>target <span class="s1">&#39;APP_NAME_TEST&#39;</span> <span class="k">do</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>あとは、Podfileに書かれたファイルをインストールします。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Podfileをインストール</span>
</span><span class='line'>pod install
</span></code></pre></td></tr></table></div></figure>


<h2>ブリッジのためのヘッダファイルの作成/追記</h2>

<p><code>File => New => File...</code>からHeader Fileを選択、
<code>APP_NAME-Bridging-Header.h</code>ファイルを追加して、
以下を追加します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#import &quot;ActionSheetPicker.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>プロジェクトを選択 => TARGETS => Build Settings => Objective-C Bridging Header</code> に<code>$(SRCROOT)/$(PROJECT)/SwiftProject-Bridging-Header.h</code>を追加</p>

<p><img src="https://farm9.staticflickr.com/8615/16795002516_5c2d2976c7_z.jpg" width="640" height="268" alt="スクリーンショット_2015-03-15_20_00_20"></p>

<h2>日付 + 時間を選択するPickerの作成</h2>

<p>「日付 + 時間を選択するUIPickerView」はこちら。</p>

<p>Liquid error: ClassNotFound: no lexer for alias &#8216;swift&#8217; found</p>

<p>作成された「日付 + 時間を選択するUIPickerView」はこちら。</p>

<p><img src="https://farm8.staticflickr.com/7612/16642396840_410f12a3dc_z.jpg" width="640" height="430" alt="スクリーンショット 2015-03-16 12.28.06"></p>

<h2>あとがき</h2>

<p>変な話ですが、Objective-Cの時に比べてSwiftには言語を書く楽しさが詰まっているような気がします。
とにかくめっちゃ楽しいです！ (単純に仕事の抑圧から解き放たれて好きなことをしているのが楽しいだけかもですがw)</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MagicalRecord を Swiftで使う]]></title>
    <link href="http://morizyun.github.io/blog/magical-record-swift-cocoapods-ios-iphone-apple/"/>
    <updated>2015-03-16T10:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/magical-record-swift-cocoapods-ios-iphone-apple</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797381264/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797381264&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797381264&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797381264" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />MagicalRecordをSwiftで使う手順です。
iOSのアプリを作るときには、いつもお世話になるライブラリなので、ちゃんと使い方をメモしておくために書きます。
この記事では、SwiftでMagicalRecordを使うための初期設定</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プロジェクト作成時に注意すること</h2>

<p>プロジェクトを新規作成するときに『Core Dataを使う』をチェックしてください。</p>

<p><img src="https://farm9.staticflickr.com/8606/16642602219_7151aafa45_z.jpg" width="640" height="375" alt="スクリーンショット_2015-03-16_10_15_05"></p>

<h2>Cocoapodsによるライブラリのインストール</h2>

<p>基本的にはブリッジするためのヘッダファイルさえ書けば大丈夫でした。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># プロジェクトフォルダの直下に移動</span>
</span><span class='line'><span class="nb">cd</span> /path/to/project
</span><span class='line'>
</span><span class='line'><span class="c"># Podfileの初期化 (Podfileが存在しない場合のみ)</span>
</span><span class='line'>pod init
</span></code></pre></td></tr></table></div></figure>


<p><code>Podfile</code>が作成されるので、そこに次のように設定を追記します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>platform :ios, <span class="s1">&#39;8.0&#39;</span>
</span><span class='line'>
</span><span class='line'>target <span class="s1">&#39;APP_NAME&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span>pod <span class="s1">&#39;MagicalRecord&#39;</span>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>target <span class="s1">&#39;APP_NAME_TEST&#39;</span> <span class="k">do</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>あとは、Podfileに書かれたファイルをインストールします。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Podfileをインストール</span>
</span><span class='line'>pod install
</span></code></pre></td></tr></table></div></figure>


<h2>モデルデータを作成</h2>

<p><code>APP_NAME.xcdatamodeld</code>でモデルを作成します。
今回は<code>Sample</code>というモデルを作成することにします。</p>

<p><img src="https://farm8.staticflickr.com/7634/16802880056_b1cfc51591_z.jpg" width="640" height="237" alt="スクリーンショット_2015-03-16_10_19_28"></p>

<p>次に、このSampleエンティティにクラス名「Sample」を設定します。</p>

<p><img src="https://farm8.staticflickr.com/7607/16641388660_c16cf989b5_z.jpg" width="546" height="252" alt="スクリーンショット 2015-03-16 10.22.25"></p>

<h2>mogenerator を使ってモデルファイルを作成</h2>

<p>Homebrewを使って、『<strong><a href="https://github.com/rentzsch/mogenerator">mogenerator</a></strong>』をインストール。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install mogenerator
</span></code></pre></td></tr></table></div></figure>


<p>次にmogeneratorを使ってモデルファイルを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># プロジェクトフォルダの直下に移動</span>
</span><span class='line'><span class="nb">cd</span> /path/to/project
</span><span class='line'>
</span><span class='line'><span class="c"># Modelフォルダの配下にモデルファイルを作成</span>
</span><span class='line'>mogenerator -m APP_NAME/APP_NAME.xcdatamodeld/APP_NAME.xcdatamodel -O Model/ --template-var <span class="nv">arc</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると以下のファイルが作成されると思います。</p>

<pre>
_Sample.h
_Sample.m
Sample.h
Sample.m
</pre>


<p>アンダーバーのついたファイルはシステムが使うベースファイルで、ユーザーはアンダーバーのついていないファイルに
自由にメソッドや変数を書き加えることができます。</p>

<h2>ブリッジのためのヘッダファイルの作成/追記</h2>

<p><code>File => New => File...</code>からHeader Fileを選択、
<code>APP_NAME-Bridging-Header.h</code>ファイルを追加して、
以下を追加します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#import &quot;CoreData+MagicalRecord.h&quot;</span>
</span><span class='line'><span class="c">#import &quot;Sample.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>プロジェクトを選択 => TARGETS => Build Settings => Objective-C Bridging Header</code> に<code>$(SRCROOT)/$(PROJECT)/SwiftProject-Bridging-Header.h</code>を追加</p>

<p><img src="https://farm9.staticflickr.com/8615/16795002516_5c2d2976c7_z.jpg" width="640" height="268" alt="スクリーンショット_2015-03-15_20_00_20"></p>

<h2>MagicalRecordの初期化</h2>

<p><code>AppDelegate.swift</code>に初期化用の設定を追記します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>func application<span class="o">(</span>application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?<span class="o">)</span> -&gt; Bool <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  // initialize coredata <span class="o">(</span>↓初期化用の設定を追記<span class="o">)</span>
</span><span class='line'>  MagicalRecord.setupCoreDataStackWithAutoMigratingSqliteStoreNamed<span class="o">(</span><span class="s2">&quot;APP_NAME.sqlite&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>- <span class="o">(</span>void<span class="o">)</span>applicationWillTerminate:<span class="o">(</span>UIApplication *<span class="o">)</span>application
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  // clean up coredata <span class="o">(</span>↓データ永続化の設定を追記<span class="o">)</span>
</span><span class='line'>  MagicalRecord.cleanUp<span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>データ作成、編集、削除等の操作について</h2>

<p>こちらのエントリーがすごくわかりやすいのでよければこちらをご参照ください。</p>

<p><strong><a href="http://qiita.com/key/items/35569f334528e225531e">Objective-C - Mogenerator + MagicalRecordでCoreData入門 - Qiita</a></strong></p>

<p>また、公式のWikiもすごくわかりやすいので良ければ参考にしてください！</p>

<p><strong><a href="https://github.com/magicalpanda/MagicalRecord/wiki">Home · magicalpanda/MagicalRecord Wiki</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://bundlr.com/clips/538e569809359743040000c0">Bundlr - SwiftとMagicalRecordを使って簡単なTodoアプリを作るチュートリアル - Qiita</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらVPS&AWS&VULTR EC2/CentOS 6.5へのRailsサーバ構築手順！[Ruby]]]></title>
    <link href="http://morizyun.github.io/blog/centos63-sakura-vps-rails-setup-guide/"/>
    <updated>2015-03-16T10:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/centos63-sakura-vps-rails-setup-guide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798038164/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798038164&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798038164&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798038164" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
さくらVPS/AWS EC2/VULTRのCentOS 6.5にRailsサーバを構築するための手順をまとめました。
Railsの簡単なサーバーの構築から、各種ミドルウェアの導入まで少しずつ充実してきたかなと思います。
用途に応じて、ぜひご活用ください。また、もしこういうミドルウェアの導入方法がわからないといった
事があれば、お気軽にコメントをください！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>最近のサーバのお気に入り</h2>

<p>最近VULTRのサーバが気に入っています。VULTRのメリットはこちら</p>

<pre>
* SSDベースのサーバを時間単位の課金体制(初回費用や解約月のタイミングなど気にしなくていい)
* メモリ768MBで$5/月
* 性能もEC2等と比べてもいい
</pre>


<p>ということでもし試して見たい方は拙著『<strong><a href="http://morizyun.github.io/blog/VULTR-server-ssd-vps-easy-to-use/">VULTR 日本リージョン/MEM 768MB/SSD 15GB VPS $5/月を借りてみた！</a></strong>』を読んでみてください＾＾</p>

<h2>(A) AnsibleやVagrantを使ったサーバ構築</h2>

<p>Ansibleはすごく簡単にサーバ構築手順をコード化できるツールです。
めちゃくちゃ便利なので、ぜひ使って見てください。</p>

<h3>(A-1) <strong><a href="http://morizyun.github.io/blog/ansible-rails-rvm-nginx-mysql-postgresql-centos">AWS/VULTR + AnsibleでベーシックなRailsサーバを簡単構築</a></strong></h3>

<h3>(A-2) <strong><a href="http://morizyun.github.io/blog/vagrant-ansible-rails-rvm-nginx-mysql/">Vagrant/AWS + AnsibleでCentOS/Nginx/MySQL/RVM/Ruby2.1.2環境を構築</a></strong></h3>

<h2>(B)これだけは導入したい</h2>

<h3>(B-1) <a href="http://morizyun.github.io/blog/sakura-vps-centos63-ssh-setup">初期状態から鍵認証SSHでの接続まで</a></h3>

<p>初期状態からSSHで接続できるようにするまでです。</p>

<h3>(B-2) <a href="http://morizyun.github.io/blog/iptable-sakura-vps-centos63">iptableの設定</a></h3>

<p>iptables(通信ポートを制限できるファイヤーウオール用のパッケージ)の設定です。</p>

<h3>(B-3) <a href="http://morizyun.github.io/blog/logwatch-sakura-vps-centos63">logwatchの導入</a></h3>

<p>logwatchはログを整形してメールで1日一回送ってくれるパッケージの設定です。</p>

<h3>(B-4) <a href="http://morizyun.github.io/blog/stop-noneed-service-sakura-vps-centos63">ipv6の停止/日本語化/denyhostsの導入</a></h3>

<p>ipv6の停止/日本語化/denyhosts導入についての手順です。</p>

<h3>(B-5) <a href="http://morizyun.github.io/blog/nginx-setup-sakura-vps-centos">Nginxの導入</a></h3>

<p>Webサーバ Nginxの導入手順です。</p>

<h3>(B-6) <a href="http://morizyun.github.io/blog/passenger-install-apache-ruby-rails">Passengerの導入</a></h3>

<p>ApacheでRailsを使えるようにするためのパッケージの導入手順です。</p>

<h3>(B-7) <a href="http://morizyun.github.io/blog/postgresql-mac-centos-rails/">PostgreSQL 9.3の導入</a></h3>

<p>MySQLと並ぶオープンソースのRDBMであるPostgreSQLの導入手順です。海外のRailsプロジェクトではMySQLよりもPostgreSQLのほうが人気があるっぽいです。Herokuを使う方にはおすすめです。</p>

<h3>(B-8) <a href="http://morizyun.github.io/blog/rvm-install-centos-ruby-rails">Ruby 2.0.0/RVMの導入</a></h3>

<p>RVM(Ruby Version Management)とRuby 1.9.3の導入手順です。</p>

<h2>(C) 必要に応じて</h2>

<h3>(C-1) <a href="http://morizyun.github.io/blog/mysql-setup-sakura-vps-centos63">MySQL 5.5の導入</a></h3>

<p>データベース MySQLの導入手順です。</p>

<h3>(C-2) <a href="http://morizyun.github.io/blog/postfix-centos-sakura-vps-aws/">メールサーバ Postfix/Dovecotの導入</a></h3>

<p>メールサーバのPostfix/Devocotの導入手順です。これは、Railsサーバには直接不要ですが、メールを使ったサービスを作る場合に使えると思います。</p>

<h3>(C-3) <a href="http://morizyun.github.io/blog/gem-dalli-memcache/">高性能な分散メモリキャッシュサーバ memcached</a></h3>

<p>データベースへの問い合わせ結果を一時的にキャッシュすることで，データベースへのアクセス回数を減らし，動的なウェブアプリケーションの高速化やスケーラビリティの向上のために利用されているツールです。次のRedisと同じく、高速化の手伝いをしてくれます。</p>

<h3>(C-4) <a href="http://morizyun.github.io/blog/redis-mac-centos-rails/">永続化対応のインメモリDB Redisの導入</a></h3>

<p>memcachedライクなKey-Value方式と、永続化対応のインメモリDB『Redis』の導入手順です。こちらも必須のツールではないですが、高速化の際に活用出来ますよ！</p>

<h3>(C-5) <a href="http://morizyun.github.io/blog/apache-setup-sakura-vps-centos63">Apacheの導入</a></h3>

<p>Webサーバ Apacheの導入手順です。</p>

<h2>(D) AWS編</h2>

<h3>(D-1) <a href="http://morizyun.github.io/blog/elastic-block-store-aws-amazon-strage/">Elastic Block Store(EBS)をAWSのEC2にヒモ付</a></h3>

<p>AWSのElastic Block Store(EBS)の設定手順です。</p>

<h2>(E) Ubuntu編</h2>

<h3>(E-1) <a href="http://morizyun.github.io/blog/linux-swap-memory-space/">Ubuntuサーバのスワップ領域の割り当て</a></h3>

<p>Ubuntuでスワップ領域を割り当てるための手順です。題名のCentOSから離れていますが(笑)</p>

<h2>(F)番外編</h2>

<h3>(F-1) <a href="http://morizyun.github.io/blog/VULTR-server-ssd-vps-easy-to-use/">VULTR 日本リージョン/MEM 768MB/SSD 15GB VPS $5/月を借りてみた！</a></h3>

<p>日本リージョン/MEM 768MB/SSD 15GBが時間単位で借りれて、月間でもわずか$5。初期費用がいらなかったり、初回デポジット2倍キャンペーンをやっていたりとおすすめです！</p>

<h3>(F-2) <a href="http://morizyun.github.io/blog/aws-epel-active-denyhosts/">AWS EC2のAmazon Linux AMIでRailsサーバを立ち上げる際の違い</a></h3>

<p>AmazonのAWSを使ってRailsサーバを立ち上げる際の手順です。基本は(1)-(8)でいけるのですが、若干違いがあったのでその部分のメモです。</p>

<h3>(F-3) <a href="http://morizyun.github.io/blog/paas-vps-aws-compare">導入の前に/コストパフォーマンスに優れたRailsサーバの紹介</a></h3>

<p>2012年はRailsサーバの選択肢がより多くなった1年です。そこで個人が使うのにコストパフォーマンスが最適なサービスを幾つかチョイスしてみました！</p>

<h3>(F-4) <a href="http://morizyun.github.io/blog/yslow-speed-up-rails-server-centos">Webサイトの速度改善を提案してくれるブラウザアドオン「YSlow」</a></h3>

<p>アプリのレスポンス向上を目指すのに最適なアドオンの紹介です。</p>

<h2>変更来歴</h2>

<p>(13/01/27 22:00) 「(9) AWS EC2のAmazon Linux AMIでRailsサーバを立ち上げる際の違い」を追加<br/>
(13/01/30 16:45) 「(9) メールサーバ Postfix/Dovecotの導入」を追加<br/>
(13/03/01 16:45) memcachedとRedisの導入手順を追加<br/>
(13/03/02 13:15) Postgresの導入手順を追加<br/>
(13/09/24 07:55) Ruby2.0.0対応 &amp; CentOS 6.4対応、記述ミス修正<br/>
(14/04/23 20:00) AWS - CentOS 6.5、Nginx環境の構築手順を追記<br/>
(14/04/29 08:00) Ubuntuサーバのスワップ領域の割り当てを追加<br/>
(14/05/02 08:55) Elastic Block Store(EBS)をAWSのEC2にヒモ付<br/>
(14/08/04 19:25) VULTRの説明や、Ansibleの解説記事を追加<br/>
(2015-03-16 10:10) Ansibleの解説記事を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDBをMac Yosemiteにインストール]]></title>
    <link href="http://morizyun.github.io/blog/mongodb-install-setup-mac/"/>
    <updated>2015-03-16T10:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/mongodb-install-setup-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00ITFOFLS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00ITFOFLS&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00ITFOFLS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00ITFOFLS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
MongoDBはドキュメント思考のデータベース(NoSQLの一種)です。
開発の初期段階で、RailsでMongoDB/mongoidを使うとスキーマが固まっていない段階でDBを意識せずに開発が進められます。
うまくユースケースにハマりそうな場合は、ぜひ使ってみてください＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>MongoDBをインストール手順</h2>

<p>Homebrewのアップデート。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew update
</span></code></pre></td></tr></table></div></figure>


<p>mongodbのインストール。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install mongodb
</span></code></pre></td></tr></table></div></figure>


<p>自動起動設定。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 起動スクリプトのシンボリックリンク追加</span>
</span><span class='line'>ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
</span><span class='line'>
</span><span class='line'><span class="c"># 自動起動をさせたい場合はこちら</span>
</span><span class='line'>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
</span><span class='line'>
</span><span class='line'><span class="c"># もし自動起動をしたくない場合に手動で起動する場合はこちら</span>
</span><span class='line'>mongod --config /usr/local/etc/mongod.conf
</span></code></pre></td></tr></table></div></figure>


<p>mongodbの動作確認。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo
</span><span class='line'>&gt; MongoDB shell version: 3.0.0
</span><span class='line'>&gt; connecting to: <span class="nb">test</span>
</span><span class='line'>&gt; Welcome to the MongoDB shell.
</span><span class='line'>&gt; For interactive <span class="nb">help</span>, <span class="nb">type</span> <span class="s2">&quot;help&quot;</span>.
</span><span class='line'>&gt; For more comprehensive documentation, see
</span><span class='line'>&gt;  http://docs.mongodb.org/
</span><span class='line'>&gt; Questions? Try the support group
</span><span class='line'>&gt;  http://groups.google.com/group/mongodb-user
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>dbの切り替え。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>use mydb
</span><span class='line'>&gt; switched to db mydb
</span></code></pre></td></tr></table></div></figure>


<p>データの登録テスト。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">j</span> <span class="o">=</span> <span class="o">{</span> name : <span class="s2">&quot;mongo&quot;</span> <span class="o">}</span>;
</span><span class='line'>&gt; <span class="o">{</span> <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;mongo&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>db.things.save<span class="o">(</span>j<span class="o">)</span>;
</span><span class='line'>db.things.find<span class="o">()</span>;
</span><span class='line'>&gt; <span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;503ae94fb29f5c1529443919&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;mongo&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>シンプル &amp; 便利！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>補足</h2>

<p><a href="http://www.cuspy.org/diary/2012-04-17">MongoDBの薄い本(The Little MongoDB Book)</a>は、MongoDBを実際に手を動かして学ぶことができる無料のチュートリアル本です。</p>

<p><a href="http://www.cuspy.org/diary/2012-04-17" title="fpu_tmp_1353921432.4884_59f4bc by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8057/8219449049_f555a10dae.jpg" width="243" height="344" alt="fpu_tmp_1353921432.4884_59f4bc"></a></p>

<p>オススメです！</p>

<h2>Special Thanks</h2>

<p><a href="http://www.mongodb.org/display/DOCSJP/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB-%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E5%8F%96%E5%BE%97">チュートリアル | mongoDB 公式 日本語</a></p>

<h2>変更来歴</h2>

<p>(2012-11-12 17:00) 新規作成<br/>
(2014-03-16 10:00) Yosemiteでインストール<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 開発 完全初心者向けの入門資料]]></title>
    <link href="http://morizyun.github.io/blog/android-studio-java-beginner/"/>
    <updated>2015-03-15T13:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/android-studio-java-beginner</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774169986/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774169986&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774169986&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774169986" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Androidのアプリ開発の勉強を始めたので、読んでいる入門資料や書籍を中心にまとめてみました。
こういう完全アウェーな開発の場合はドットインストールの動画にはめちゃくちゃ助けられます、premium動画素晴らしい！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>環境構築</h2>

<h3>Java 入門</h3>

<p>Androidの前にJavaに入門したい人には、拙著『<strong><a href="http://morizyun.github.io/blog/java-introduction-code-style/">Java 初心者向け資料を全力でまとめてみた！</a></strong>』がオススメです！</p>

<h3>ドットインストール: Androidアプリ開発入門</h3>

<p><strong><a href="http://dotinstall.com/lessons/basic_android">Androidアプリ開発入門 (全12回) - プログラミングならドットインストール</a></strong></p>

<p>環境構築は初心者が一番つまづきやすいポイントですが、動画を見ながらなのでほぼつまらずに一気にHello Worldが出来ました！</p>

<h3>MacでAndroidアプリ開発！「Android Studio」を使ってみる</h3>

<p><strong><a href="http://saku-java.be-ourselves.jp/2014/03/11/mac-android-studio-install/">MacでAndroidアプリ開発！「Android Studio」を使ってみる 〜その1 インストール〜</a></strong><br/>
<strong><a href="http://saku-java.be-ourselves.jp/2014/03/13/mac-android-studio-start-app-and-create-emulator/">MacでAndroidアプリ開発！「Android Studio」を使ってみる 〜その3 Androidエミュレータ作成、アプリ起動〜 | サクッとJava研修室</a></strong><br/></p>

<p>エミュレータの設定などの部分を中心に文字で読みたい場合にはこちらがおすすめ。スクリーンショットが多いのでわかりやすいです！</p>

<p><strong><a href="http://androidstudio.hatenablog.com/entry/2014/07/21/143425">Android Studioでアプリを実機で動作確認する - Android Studioでアプリ開発！</a></strong><br></p>

<p>もし実機を持っているなら、実機デバックが操作感もわかっておすすめです。ということでAndroid Studioで実機デバックする手順です。以外と簡単！</p>

<h2>Android 開発入門</h2>

<p><strong><a href="http://www.techinstitute.jp/material/01/">Tech Institute Android アプリ開発者養成講座テキスト</a></strong></p>

<p>アプリ開発者のためのプログラミングスクール Tech Institute さんの教材資料。
950ページに及ぶ、充実したテキスト！</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_android_layout">【Premium】Androidレイアウト入門 (全8回) - ドットインストール</a></strong></p>

<p>月額980円かかるドットインストールのPremium動画ですが、十分その価値はあります。画面サイズがばらばらなAndroidでの
開発前に抑えておきたいポイントを勉強する事ができます。</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_android_listview">【Premium】Androidリストビュー入門 (全21回) - ドットインストール</a></strong></p>

<p>同じく、月額980円かかるドットインストールのPremium動画。Androidのリストビュー(ListView)を作る際に必要な考え方について学ぶことができます。</p>

<p><strong><a href="http://dotinstall.com/lessons/omikuji_android">【Premium】Androidでおみくじアプリを作ろう (全7回) - プログラミングならドットインストール</a></strong></p>

<p>同じく、月額980円かかるドットインストールのPremium動画。おみくじであれば、DB等も使わないので、シンプルですがアプリの作り方をイメージすることができる面白い動画でした！</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_android_db">【Premium】Androidデータベース入門 (全25回) - ドットインストール</a></strong></p>

<p>月額980円かかるドットインストールのPremium動画。Androidでデータベースを扱っていく方法について学ぶ事ができます。
これだけだとDB操作をするときの概念を理解しきれませんが、どういったフローなのかは概略をつかむことができます。</p>

<h2>mixi-inc/AndroidTraining</h2>

<p><strong><a href="https://github.com/mixi-inc/AndroidTraining">mixi-inc/AndroidTraining - GitHub</a></strong></p>

<p>MixiさんがGitHubで公開しているAndroid アプリ開発の基礎知識と実務スキルを身に付けるトレーニングコース。
めちゃくちゃ品質が高いので、下手な書籍よりもよっぽどオススメです。素晴らしい時代や。</p>

<h2>コーディング規約</h2>

<p><strong><a href="http://qiita.com/Sam/items/4b4c53c9e616a39c7c70">Androidのコード規約について考えてみた - Qiita</a></strong><br/>
<strong><a href="https://github.com/cookpad/styleguide/blob/master/java.ja.md">styleguide/java.ja.md at master · cookpad/styleguide</a></strong></p>

<p>初心者のうちからコーディング規約を読んでおくのは結構大切！と思い読んでいます。</p>

<h2>チュートリアル</h2>

<p><strong><a href="http://eure.jp/blog/android-app-for-beginners-1/">初心者必見！10時間で作るはじめてのAndroidアプリ−前編 | 株式会社エウレカ</a></strong></p>

<p>サーバーとの通信も必要でちょっと難しめのアプリですが、写経しながら実用的なAndroidアプリの作り方を知ることができる、素晴らしいチュートリアルです！</p>

<h2>お願い</h2>

<p>もしオススメの入門資料や書籍をお見かけしたら、ぜひコメントお願いします！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>変更来歴</h2>

<p>(2015-03-15 13:10) Tech Institute Android アプリ開発者養成講座テキスト を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ゼロ・トゥ・ワン 君はゼロから何を生み出せるか[書評]]]></title>
    <link href="http://morizyun.github.io/blog/zero-to-onepeter-thiel-book-review/"/>
    <updated>2015-03-13T13:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/zero-to-onepeter-thiel-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00NQ3QONK/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00NQ3QONK&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00NQ3QONK&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00NQ3QONK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
遅ればせながら、『<strong><a href="http://www.amazon.co.jp/gp/product/B00NQ3QONK/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00NQ3QONK&amp;linkCode=as2&amp;tag=morizyun00-22">ゼロ・トゥ・ワン―君はゼロから何を生み出せるか</a></strong>』を読みました。</p>

<p>作者のピーター・ティールはペイパルの創業者で、ペイパルの創業メンバーはイーロン・マスクをはじめ、
Youtubeやリンクトインなど10億ドル企業を次々と創業した『ペイパルマフィア』の一人。</p>

<p>USのスタートアップ業界で圧倒的な影響力のある人がこれまでの人生の中で大切にしてきた『ゼロから何を生み出せるか』
という哲学に対して、いくつかのヒントを与えてくれている本。明確な答えを書いたような本ではないけど、
彼が本当に大切だと思っていること、それを自分の頭で考えるための材料を教えてくれる本です。</p>

<p>今回はこの本を通して面白かった話を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>ゼロからイチを創りだす</h2>

<p>この本で一番いいたいことは、タイトルの通り「ゼロからイチを生み出す」ことの重要性だと思う。
この一番のメリットは市場を独占できること。社内、社外の『競争』がいかに無駄かを説いている。
健全な市場競争が成立している資本主義経済においては、利益は限りなくゼロに近づく。
その原理原則を避けるためにはその市場を支配し、競争の原理から外れる必要がある。</p>

<p>書いてしまえば一見当たり前のことだけど、名著と言われる様々な書籍などの中でも、
これと矛盾したことが書かれている。今までそれらを信じていたんだなぁと実感した。</p>

<p>面白いエピソードとして、HPの話があった。1990年代-2000年代にHPは、ラップトップや
プリンタ複合機などを「発明」して栄華を極めた。だがその後、社内の競争によって
機能不全となり、やがて時価総額は半分になっていた。
自分たちの終始している競争が、ビジネスの中で人生の中でいかに無駄なものなのか、
過去の経験を通して、もっと知るべきだと思う。</p>

<h2>セールスとプロダクトは同じくらい大切</h2>

<p>この本を読むまでは自分がエンジニアとして、良いモノを作り出せればビジネスになると本気で信じていました。
でも、セールスとプロダクトは同じくらい大切で、『本気で売る努力』をしなければそのプロダクト
は絶対に売れない。セールスができるプロダクトの価格帯を十分に意識したプロダクトを作りをしなければ、
その商品を売る方法はなくなる。</p>

<p>それと合わせて大切なことは、小さな市場を独占することから始めること。小さな市場を独占できずに、
大きな市場に踏み出せるはずがない。今までの経験を通しても身につまされる事実だと思う。</p>

<h2>既存プロダクトとは10倍の違いを生み出さないといけない</h2>

<p>競争相手を見誤ることなく、既存プロダクトを見比べないと『ユーザーから見た市場』を見誤ると思う。
そして、その10倍を生み出せなければ、その市場を独占する事はできない。これは自分が消費者だった
時には意外と当たり前の事実だと思う。CMで『20%向上』と言われても、ふーんとしか思わない。</p>

<p>これは何もスタートアップだけに言えることではない。大企業の既存製品だったとしても、常にそれを
自問自答して10倍の違いを生み出すための「実効可能な計画」を推し進める必要があると思う。</p>

<h2>常識だと信じすぎてはいけない</h2>

<p>僕らは、ダーウィンの進化論を信じすぎてなんにでもその理論を適用しようとする。
リーンスタートアップはスタートアップのバイブルだと言われるが、あの本が出てどれだけの人が
あの本を信じ、実践して、結果がどうだったか。自分の頭で考えるべきだと思う。</p>

<p>「インテリジェント・デザイン」という言葉を知りました。宇宙や自然が偶然の産物ではなく、意図や目的
を持って『偉大なる知性』によってデザインされたと考える理論だそうです。すくなくとも自分のプロダクト
に対して、自分がインテリジェント・デザインを持たずに誰が持つというのだろうと思う。</p>

<h2>ひとつのもの、ひとつのことが他の全てに勝る</h2>

<p>自分自身が起業に失敗した経験を持つからこそそのとおりだと思う一つの言葉を見つけた。</p>

<p><strong>もしあえて起業するなら、一番大切なのは「ひとつのもの、ひとつのことが他の全てに勝る」ことだ</strong></p>

<p>ある市場はその他すべての市場にまさる。たいていの場合、ある販売戦略が他のすべてを支配している。
起業した時この言葉をわかっていなかった。今思うことは、この言葉を理解して残りの人生でそれを
自らそれ掴み取るためにどう行動し、何をすべきかということだと思う。</p>

<h2>一緒にビジネスをやるために大切なこと</h2>

<p>10億ドル企業を次々と創業したペイパルマフィアの仲間を選ぶ基準は『共謀者』を選ぶことだったそうです。
一緒に働くことを心から喜んでくれる人を採用すること。そして、仕事を超えた固いつながりを持つ場所にする。
一つのことに責任をもつようにして社内での争いが起きないための仕組みを作ることを重視されたそうです。</p>

<p>みんな思っていることは一緒だと思うけど、それを実現し、維持することは並大抵のことではないはずだ。</p>

<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<p>ちなみに、いつまでかはわかりませんが「<strong>30日間全額返金キャンペーン</strong>」もやっているので、まずは一度買ってためしてみるのもありだと思います！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
</feed>
