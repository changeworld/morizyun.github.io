<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-23T17:21:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015のMatzのキーノート・メモ]]></title>
    <link href="http://morizyun.github.io/blog/rubykaigi2015-matz-keynote/"/>
    <updated>2015-12-23T17:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rubykaigi2015-matz-keynote</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873113946/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873113946&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873113946&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873113946" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />2015/12/11-13に開催された『<strong><a href="http://rubykaigi.org/2015">RubyKaigi 2015</a></strong>』に出席してきたので、その時のメモです。</p>

<p>とは言っても1日目から風邪でセッション中殆ど寝てて、２・３日目には熱がでて会場にすら行けなかったという
体たらくぶりでした。来年はマスクとか、うがい・手洗いとか万難を排して臨みたいと思っています&#8230;orz&#8230;</p>

<p>今回はまともに聞けてたMatzのKeynoteを中心にメモを書いていきます。</p>

<p>あとこの記事は、<strong><a href="http://qiita.com/advent-calendar/2015/m3">エムスリー Advent Calendar 2015 - Qiita</a></strong>の23日目です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プログラマーの三大美徳</h2>

<p>Perlの作者 Lally Wallの言葉。考えれば考える程いい言葉。</p>

<pre>
- 怠惰: プログラムを書いて、苦労を減らしたり、ドキュメントを書いて不要な質問を避ける
- 短気: 将来起こる問題を想定した設計、ロジックの無駄を排除した実装を行う
- 傲慢: 周りから文句が出ないような、自分が自信を持てるプログラムを書こう
</pre>


<h2>怒りに通じている</h2>

<p>「<strong>怒り</strong>」とは、制御されている限り有益なモチベーションの源泉となる。
ただし、怒りは他の人にネガティブな気持ちを伝染させてしまうので注意しよう。</p>

<h2>ナイスも人に移る</h2>

<ul>
<li>「<strong>ナイスさ</strong>」こそはRubyコミュニティの良さ => MINASWAN(Matz is Nice And So We Are Nice)</li>
<li>内心で怒っていても、外っつらは愛想よく、ナイスであろう</li>
</ul>


<h2>Ruby 2.3.0</h2>

<p>preview2が出た。クリスマスに合わせてリリース予定。新機能は次のようなもの。</p>

<pre>
- Did-you-mean
  - Gooogleのもしかして機能
- Enuerable#grep_v(inverseのv)
  - マッチしていないものを返す
- Hash#fetch_value
- Numeric$positive?, negative?
- Hwash comparisons(<=, <, >=, >) - No Comparable(<=>はない)
- Hash#to_proc
- Array,Hash,Struct$dig
- Indented here document(インデントの一番浅いところでとってくれる)
- froze-string-literal: true
- safe navigation operation => &.
  - u&.name&.first
</pre>


<p>Rubyの改善は、コミュニティの成果であう。</p>

<h2>OCaaS</h2>

<ul>
<li>OCaaS(OSS community as a Shark)、つまりオープンソースコミュニティは、動き続けなければ死ぬ。</li>
<li>変化を生み出し続ける必要があるが、変化を受け入れるのは、決して簡単なことではない。</li>
</ul>


<h2>変化</h2>

<ul>
<li>ユーザーのwantsを聞くべきではない。大切なのは隠れたneedsを見つけることだ</li>
<li>未来のことはわからないが「<strong>未来の変化</strong>」を生み出さないといけない</li>
</ul>


<h2>環境の変化</h2>

<p>Rubyの置かれている環境の変化として次の3つがある。</p>

<pre>
- Multi Core
- Code Scalability
- Data Scalability
</pre>


<h3>マルチコア</h3>

<pre>
- コンカレンシー
- 抽象度の高さがRubyの売り
- 候補
  - Ownership Model => 排他制御
  - STM => 現実的ではに
  - Streem model
</pre>


<p>この辺りで時間なくなったはず。。
Ruby3を2020年までにだして、Ruby 2.0より3倍早くするのが目標とのこと。
すごい！</p>

<h2>RubyKaigi で参考になりそうなサイト</h2>

<ul>
<li><strong><a href="https://www.youtube.com/channel/UCBSg5zH-VFJ42BGQFk4VH2A">RubyKaigi - YouTube</a></strong></li>
<li><strong><a href="http://togetter.com/li/911396">Ruby準国際カンファレンス #rubykaigi 2015 - Togetterまとめ</a></strong></li>
</ul>


<h2>個人的に面白かった発表</h2>

<p>テンプレートエンジンの高速化、FamlとHamlitの話はすごい面白かったっす。</p>

<script async class="speakerdeck-embed" data-id="acd0c621607045aa8218049ae613747a" data-ratio="1.33333333333333" src="http://morizyun.github.io//speakerdeck.com/assets/embed.js"></script>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSの IAM & STS の基礎知識]]></title>
    <link href="http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service/"/>
    <updated>2015-12-20T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774176737/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774176737&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774176737&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774176737" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />ちょっとマニアックですが、AWSのIAMやSTSについてどういうものかを調べたので、完全俺得メモです。
理解が間違ってそうなところがあればぜひ twitterとかで突っ込んでくださいw</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>IAM とは？</h2>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/introduction.html">IAM とは - AWS Identity and Access Management</a></strong></p>

<p>IAMとは「<strong>AWS Identity and Access Management</strong>」の略で、AWSのアカウントが持つ権限を一部他人に付与できる仕組み。</p>

<h2>IAM の機能</h2>

<p>機能としては次のようなものがある。</p>

<pre>
- AWS アカウントへのアクセスの共有できる
  - 他の人に「自分のAWS」のリソース管理や利用のための権限を付与
- アクセス権限を詳細に設定できる
  - どのリソースをどこまで利用できるかといったことを細く設定できる
- 多要素認証（MFA）
  - パスワード/アクセスキー以外にも、特別に設定されたデバイスからのコードの入力も必要にすることができる
- ID フェデレーション
  - 他の認証に基づいたユーザーに対して、自分のAWSアカウントに対して一時的なアクセス権を付与できる
- 保証のための ID 情報
  - IAM IDに基づいたログを AWS CloudTrail で残すことができる
- 多くの AWS サービスと連携
  - 数多くの AWS サービスがIAMと連携している
</pre>


<h2>IAM へのアクセス</h2>

<p>次のいずれかの方法でIAMを使うことができます。</p>

<pre>
- AWS マネジメントコンソール
- AWS コマンドラインツール
  - AWS Command Line Interface (AWS CLI)
    - AWS サービスを管理するための統合ツール
    - **[aws/aws-cli - GitHub](https://github.com/aws/aws-cli)**
  - AWS Tools for Windows PowerShell
    - Windows PowerShell スクリプト環境でAWSサービスを管理できる
- AWS SDK
  - Java、Python、Ruby、.NET、iOS、Android などのライブラリとサンプルコードで構成された ソフトウェア開発キット(SDK)
- IAM HTTPS API
  - サービスに HTTPS リクエストを直接発行できる IAM HTTPS API
</pre>


<h2>IAMの ユースケース</h2>

<ul>
<li>AWS マネジメントコンソールを使用し、AWS アカウントの下でユーザーを作成して、そのアクセス許可

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/getting-started.html">使用を開始する - AWS Identity and Access Management</a></strong></li>
</ul>
</li>
<li>使用している認証システと AWS の間での ID フェデレーション。ユーザーに対して、アクセストークンを発行

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html</a></strong></li>
<li>AWS Security Token Service(STS) API の詳細 => <strong><a href="http://docs.aws.amazon.com/STS/latest/APIReference/">Welcome - AWS Security Token Service</a></strong></li>
</ul>
</li>
<li>IAM を使用して、他の AWS アカウントにアクセス許可を付与する方法</li>
</ul>


<h2>Security Token Service(STS)</h2>

<p>STSとは、AWS Security Token Serviceの略。AWSリソースへのアクセスを制御できる一時的な セキュリティ認証情報を持つ、信頼されたユーザーを作成・提供するための仕組みです。</p>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">一時的セキュリティ認証情報 - AWS Identity and Access Management</a></strong></p>

<p>IAMユーザーが使用できる長期的なアクセス情報と似ているが違いは次の点。</p>

<pre>
- 使用期限が短い (数分〜数時間で設定できる)
- 一時的セキュリティ認証情報はユーザーとともに保存されることはなく、ユーザーのリクエストに応じて動的に生成される
</pre>


<p>このSTSを使うメリットは次の通り。</p>

<pre>
- 一時的に使うアプリに対して、長期のセキュリティ情報を配布しなくていい
- AWS の ID を定義せずに AWS リソースへのアクセスを提供できる
</pre>


<h2>フェデレーションとは</h2>

<p>フェデレーションは「組織間の結合という意味」。フェデレーションとは、イントラネットを超えて
他社のシステムやアプリケーション、サービスとの間でシングルサインオン(SSO)やWebサービスの
処理結果をほかのサービスに受け渡す技術、もしくはそれを実現する考えのことである。</p>

<p><strong><a href="http://www.itmedia.co.jp/enterprise/articles/0708/31/news010_3.html">ID管理をスッキリさせるIAMのお役立ち度：“フェデレーション”が企業間連携の今後を変える</a></strong></p>

<h2>認証フェデレーション</h2>

<p>ウェブ ID フェデレーションとは、Facebook、Googleアカウントを利用して、ユーザーにサインインしてもらうことができる。
その認証情報をSTSによってAWSアカウントのリソースを使うための一時的なアクセス権に変換できる。</p>

<p>ウェブ ID フェデレーションを使用すると、アプリケーションで IAM ユーザーアクセスキーのような長期的なセキュリティ認証情報を配布する必要がないので、AWS アカウントの安全性の維持に役立ちます。</p>

<h2>あとがき</h2>

<p>ちなみに、興味をもったキッカケの記事。これは確かにすごい便利そう。</p>

<p><strong><a href="http://qiita.com/seratch@github/items/53b53f143d64f16486bb">Rails - AWS 管理コンソールを社内認証と SSO 化させる #m3dev - Qiita</a></strong></p>

<h2>次読む記事</h2>

<p><strong><a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL that Enables Federated Users to Access the AWS Management Console (Custom Federation Broker) - AWS Identity and Access Management</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kaminariをBootstrap3、Rails4環境で使う！]]></title>
    <link href="http://morizyun.github.io/blog/kaminari-gem-paginator-rails/"/>
    <updated>2015-12-20T18:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/kaminari-gem-paginator-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048916599/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048916599&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048916599&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048916599" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails 4でも不動の人気を誇るページネーター「<strong><a href="https://github.com/amatsuda/kaminari#customizing-the-pagination-helper">amatsuda/kaminari</a></strong>」をBootstrap3、Rails4環境で使うための導入手順です。びっくりするくらい簡単に導入できちゃいますよ！</p>

<!-- more -->


<br style="clear:both;"/>


<h2>まえおき</h2>

<p>この記事は、Bootstrap環境を構築済の前提で話を進めます。もし、Bootstrap環境の構築からスタートしたい場合は、拙著『<strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの最短手順</a></strong>』をご参照頂ければ幸甚です！</p>

<h2>Gemのインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Pagenation</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;kaminari&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>kaminari configの設定</h2>

<p>kaminariのconfig(設定)ファイルを生成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g kaminari:config
</span></code></pre></td></tr></table></div></figure>


<p><code>config/initializers/kaminari_config.rb</code>を構築するサイトに合わせて各種パラメータを調整。<br/>
パラメータの詳細は『 <strong><a href="https://github.com/amatsuda/kaminari#general-configuration-options">amatsuda/kaminari | GitHub</a></strong>』を参照。</p>

<h2>Controller/Viewへの設置</h2>

<p>Controllerでページネーションをするための変数を追加。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">page</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Viewでページネーションを表示したい場所に以下のコードを追加。<br/></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">paginate</span> <span class="vi">@users</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ベージネーションViewのテンプレート取得</h2>

<p>次のコマンドを実行すると<code>/app/view/kaminari/</code>フォルダにBootstrap用のViewを生成してくれます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g kaminari:views  bootstrap3
</span></code></pre></td></tr></table></div></figure>


<p>ただしこちらは、Bootstrap2用のテンプレートっぽいです。ということで、<code>/app/view/kaminari/_paginator.html.haml</code>を次の様に編集します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">render</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">.pagination</span>
</span><span class='line'>    <span class="cp">-# ↓ ここに.pagenationを追加</span>
</span><span class='line'>    <span class="nt">%ul</span><span class="nc">.pagination</span>
</span><span class='line'>      ...(ゴニョゴニョ)
</span></code></pre></td></tr></table></div></figure>


<h2>ページネーターの表示カスタマイズ</h2>

<p>ページネーションの文言(prevやnextなど)の変更程度であれば、<code>conifg/locales/ja.yml</code>に以下の内容を追加するだけで解決します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ja:
</span><span class='line'>  views:
</span><span class='line'>    pagination:
</span><span class='line'>      first: <span class="s2">&quot;&amp;laquo;&quot;</span>
</span><span class='line'>      last: <span class="s2">&quot;&amp;raquo;&quot;</span>
</span><span class='line'>      previous: <span class="s2">&quot;&amp;lsaquo;&quot;</span>
</span><span class='line'>      next: <span class="s2">&quot;&amp;rsaquo;&quot;</span>
</span><span class='line'>      truncate: <span class="s2">&quot;...&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上は英語部分を外して、記号を残した場合の例です。
これだけでもシンプルでわかりやすいですよ！</p>

<p><img src="http://farm9.staticflickr.com/8477/8250145044_9193f27280_n.jpg" width="320" height="42" alt="fpu_tmp_1354804296.8519_d61bda"></p>

<h2>ルーティングの設定</h2>

<p><code>config/routes.rb</code>のルーティングを以下の様に変更します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resources :my_resources <span class="k">do</span>
</span><span class='line'><span class="k">  </span>get <span class="s1">&#39;page/:page&#39;</span>, :action <span class="o">=</span>&gt; :index, :on <span class="o">=</span>&gt; :collection
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>このルーティングのメリットは次の通り。</p>

<pre>
* SEO的に良い、ユーザーフレンドリーである
* params pageがURLセグメントの一部 => RailsのPageキャシュが有効に
</pre>


<h2>表示確認</h2>

<p>ブラウザで表示を確認します。以下は今回作ったサンプルページネーションです。</p>

<p><img src="http://farm9.staticflickr.com/8340/8244955784_4b2ae33c4a_n.jpg" width="320" height="44" alt="fpu_tmp_1354636719.4462_910632"></p>

<h2>補足: プレゼンターDraperと共存させる場合</h2>

<p>kaminariとプレゼンターのDraperを使う場合は、Draperがうまくkaminariのメソッドを呼び出せない場合があります。<br/></p>

<p>その場合は、<code>config/initializers/draper.rb</code>を作成して以下を記入しておくとエラーを回避できます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Draper</span><span class="o">::</span><span class="no">CollectionDecorator</span><span class="o">.</span><span class="n">delegate</span> <span class="ss">:current_page</span><span class="p">,</span> <span class="ss">:total_pages</span><span class="p">,</span> <span class="ss">:limit_value</span><span class="p">,</span> <span class="ss">:total_count</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><a href="https://github.com/drapergem/draper/issues/401">Kaminari vs Draper · Issue #401 · drapergem/draper</a></strong></p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/amatsuda/kaminari#customizing-the-pagination-helper">amatsuda/kaminari | GitHub</a></strong></p>

<p><strong><a href="https://github.com/amatsuda/kaminari/wiki/Kaminari-recipes">Kaminari recipes | amatsuda/kaminari | GitHub wiki</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/CortYuming/20131027/p1">ささっと Rails4 + Bootstrap3 + kaminari でゲストブック作成してみるメモ - 牌語備忘録 - pygo</a></strong></p>

<h2>変更来歴</h2>

<p>13/04/18 23:35 補足: プレゼンターDraperと共存させる場合を追加<br/>
13/12/23 20:15 Bootstrap3、Rails4に対応<br/>
15/12/20 18:30 コマンドを修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsエンジニアのためのSQLチューニング速習会@wantedlyに行ってきた！]]></title>
    <link href="http://morizyun.github.io/blog/sql-speedup-explain-rails/"/>
    <updated>2015-12-13T10:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/sql-speedup-explain-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1RU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1RU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1RU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://wantedly.connpass.com/event/23794/">RailsエンジニアのためのSQLチューニング速習会 - connpass</a></strong>』に参加してきました。すごく勉強になったので、
その時のメモです。<strong><a href="https://twitter.com/minami7o">@minami7o</a></strong> さんありがとうございました！</p>

<p>あとこの記事は、<strong><a href="http://qiita.com/advent-calendar/2015/m3">エムスリー Advent Calendar 2015 - Qiita</a></strong>の13日目です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>スライド</h2>

<p>Wantedlyの <strong><a href="https://twitter.com/minami7o">@minami7o</a></strong> さんの発表スライドです。</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/hzRuN7dqFFk2nj" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe>


<h2>説明用のブランチ</h2>

<p>勉強会で共有されたテストデータを使えるGitHubのブランチです。</p>

<p><strong><a href="https://github.com/south37/sql-tuning">south37/sql-tuning - GitHub</a></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="nb">clone</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:south37</span><span class="o">/</span><span class="n">sql</span><span class="o">-</span><span class="n">tuning</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'><span class="n">cd</span> <span class="n">sql</span><span class="o">-</span><span class="n">tuning</span>
</span><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="n">db</span><span class="ss">:create</span>
</span><span class='line'><span class="n">pg_restore</span> <span class="o">-</span><span class="n">j</span> <span class="mi">4</span> <span class="o">--</span><span class="n">verbose</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">acl</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">owner</span> <span class="o">-</span><span class="n">d</span> <span class="n">sql</span><span class="o">-</span><span class="n">tuning</span><span class="o">-</span><span class="n">dev</span> <span class="n">db</span><span class="o">.</span><span class="n">dump</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecord::Base.explain</h2>

<p>ActiveRecord::Baseに<code>#explain</code>があることを知らなかったです。<code>#explain</code>超便利！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Job</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:company</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;companies.country&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;companies.id &lt; 1000&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;companies.country&#39;</span><span class="p">,</span> <span class="s1">&#39;COUNT(jobs.id)&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">explain</span>
</span><span class='line'>  <span class="no">Job</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span><span class="p">,</span> <span class="no">COUNT</span><span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;jobs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;companies&quot;</span> <span class="no">ON</span> <span class="s2">&quot;companies&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;jobs&quot;</span><span class="o">.</span><span class="s2">&quot;company_id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">companies</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">EXPLAIN</span> <span class="k">for</span><span class="p">:</span> <span class="no">SELECT</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span><span class="p">,</span> <span class="no">COUNT</span><span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;jobs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;companies&quot;</span> <span class="no">ON</span> <span class="s2">&quot;companies&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;jobs&quot;</span><span class="o">.</span><span class="s2">&quot;company_id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">companies</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>                                              <span class="no">QUERY</span> <span class="no">PLAN</span>
</span><span class='line'><span class="o">-------------------------------------------------------------------------------------------------------</span>
</span><span class='line'> <span class="no">HashAggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">1184</span><span class="o">.</span><span class="mi">79</span><span class="o">.</span><span class="n">.</span><span class="mi">1191</span><span class="o">.</span><span class="mi">12</span> <span class="n">rows</span><span class="o">=</span><span class="mi">634</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="no">Group</span> <span class="no">Key</span><span class="p">:</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>   <span class="o">-&gt;</span>  <span class="no">Hash</span> <span class="no">Join</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">54</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="n">.</span><span class="mi">1159</span><span class="o">.</span><span class="mi">79</span> <span class="n">rows</span><span class="o">=</span><span class="mi">5000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>         <span class="no">Hash</span> <span class="no">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">company_id</span> <span class="o">=</span> <span class="n">companies</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span>  <span class="no">Seq</span> <span class="no">Scan</span> <span class="n">on</span> <span class="n">jobs</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mo">00</span><span class="o">.</span><span class="n">.</span><span class="mi">868</span><span class="o">.</span><span class="mo">00</span> <span class="n">rows</span><span class="o">=</span><span class="mi">50000</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span>  <span class="no">Hash</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span> <span class="n">rows</span><span class="o">=</span><span class="mi">1000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>               <span class="o">-&gt;</span>  <span class="no">Index</span> <span class="no">Scan</span> <span class="n">using</span> <span class="n">companies_pkey</span> <span class="n">on</span> <span class="n">companies</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">29</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span> <span class="n">rows</span><span class="o">=</span><span class="mi">1000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                     <span class="no">Index</span> <span class="no">Cond</span><span class="p">:</span> <span class="p">(</span><span class="nb">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">8</span> <span class="n">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにEXPLAINとは、与えられた文に対して、PostgreSQLプランナが生成する実行計画を表示するための命令です。</p>

<p>実行計画とは、問い合わせ文が参照するテーブル（複数の場合もある）をスキャンする方法（単純なシーケンススキャン、インデックススキャンなど）複数のテーブルを参照する場合に、各テーブルから取り出した行を結合するために使用されます。</p>

<h2>実行計画のコストの見方</h2>

<p>Explainでのコストの見方はこちら。</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/hzRuN7dqFFk2nj?startSlide=11" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe>


<h2>indexの仕組み</h2>

<p>「B-tree index」とは、バランスド・ツリーインデックスの略です。
ソートアルゴリズムや二分木の進化版的なアルゴリズムだそうです。
一部のブランチが成長しすぎて、計算量が増えないように再編成(バランシング)する仕組みをもっています。
これにより、常に高い検索性能を保つことができるそうです。</p>

<h2>indexが効かないパターン</h2>

<pre>
- indexを貼ったカラムに演算(`lower`と演算子を使う場合、ただし後述の方法なら貼れる)
- 絞り込み条件のゆるいwhere (デフォルトだと4/1以下に絞り込まれる必要がある)
  - HDDへのランダムアクセスとシーケンシャルアクセスの速度差が原因
</pre>


<h2>index利用のデメリット</h2>

<pre>
- indexの更新に時間がかかる
- PostgreSQLのカラム更新を高速化するための仕組みの「HOT」が効かない
</pre>


<p>ちなみに「HOT(Heap Only Tuple)」とは、「インデックスを持たない、ヒープのみのタプル」だそうです。
(1)不要なインデックスの更新を行なわないことによる更新処理コストの削減や、(2)ガベージの自動回収
といったことをサポートしてくれます。</p>

<h2>インデックスの種類</h2>

<pre>
- Unique Indexes : 重複した値を許可しないようなインデックス
- Multicolumn Indexes : 2つ以上のカラムに対するインデックス
- Indexes on Expressions
  - 関数などの返り値を key として index を作る事ができる
</pre>


<h2>JOIN のアルゴリズム</h2>

<pre>
- Nested Loop Join (遅い)
  - テーブル1とテーブル2に対してすべての組み合わせを試す
  - テーブル2にindexがあれば早くなる
- Hash Join
  - テーブル2に対して、1度フルスキャンしてHashMapを作る
  - テーブル2の全レコードをメモリにのせる必要がある
- Merge Join (早い)
  - ソート済のテーブル1とテーブル2に対して一度だけフルスキャン
  - JOINに使うカラムにはindexを貼る
</pre>


<h2>データ集約</h2>

<pre>
- Group Aggregate
  - 入力されたデータをグループキーでソート後、各グループを順に処理
- Hash Aggregate
  - グループキーをkeyとする、一時的なHash Tableを作成する
</pre>


<h2>sortもindexをはるべき</h2>

<ul>
<li>予めindexを貼っておくとソートされた状態でデータが保持されている</li>
<li><code>ORDER BY</code>でsortを実施するときにはindexされたカラムを使おう</li>
</ul>


<h2>その他 PostgreSQLの特徴的機能</h2>

<pre>
- JSON型
  - json型とjsonb型がある
  - jsonb型を基本で使うべきだが、すごいきたないデータの場合json型になる
- Hstore型
  - key, valueのペアを一つのカラムに保存可能
- Materialized View
  - キャッシュされたView。高速化は期待できるが手動でRefreshする必要がある
- Stored Procedure (PL/pgSQL)
  - PostgreSQLで実行可能なfunctionを定義可能。
</pre>


<h2>その他勉強になったこと</h2>

<ul>
<li>データの分布 = 「統計情報」が大事</li>
<li>SerializeよりはJSONのほうがいいかも</li>
<li>PostgreSQL - indexの利用状況を閲覧できる - pg_stat_user_indexes</li>
<li>Gem <strong><a href="https://github.com/grosser/bitfields">grosser/bitfields</a></strong> 便利そう</li>
</ul>


<h2>まとめ</h2>

<pre>
- SQLの実行児に選ばれる実行計画は、indexの有無や統計情報(データの量・分布)に依存
- 適切なschema, index, queryの選択によって、高速化しよう
- WHERE, JOIN,ORDER BY, GROUP BYのkeyにはindex
- JOINの前に絞り込めるだけ絞り込む
- JSON Typeなどもケースバイケースで
</pre>


<h2>最後に</h2>

<p>懇親会で、ピザやビールを大量あってお腹いっぱいになれました。
めっちゃ有りがたかったです！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第6章 コードを記述するコード[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code/"/>
    <updated>2015-12-05T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>6章 クラス定義</h2>

<h3>オブジェクトの汚染</h3>

<p>外部から来た安全ではないをブジェクを「オブジェクトの汚染」という。
この汚染を判定するメソッドが<code>#tainted?</code>である。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_input</span> <span class="o">=</span> <span class="s2">&quot;User input: </span><span class="si">#{</span><span class="nb">gets</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;user_input.tainted? =&gt; </span><span class="si">#{</span> <span class="n">user_input</span><span class="o">.</span><span class="n">tainted?</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">only_code_object</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;only_code_object.tainted? =&gt; </span><span class="si">#{</span> <span class="n">only_code_object</span><span class="o">.</span><span class="n">tainted?</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby 6.2.4.tainted_code.rb</span>
</span><span class='line'><span class="c1"># &lt;= 1</span>
</span><span class='line'><span class="c1"># user_input.tainted? =&gt; true</span>
</span><span class='line'><span class="c1"># only_code_object.tainted? =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ERB内のRubyコードの評価メソッド</h3>

<p>ERBの中でRubyのコードを書くとそのコードが<code>eval</code>で評価される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ERB</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">new_toplevel</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@safe_level</span>
</span><span class='line'>      <span class="nb">proc</span> <span class="p">{</span>
</span><span class='line'>        <span class="vg">$SAFE</span> <span class="o">=</span> <span class="vi">@safe_level</span>
</span><span class='line'>        <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">eval</span><span class="p">(</span><span class="vi">@scr</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ユーザーが<code>@safe_level</code>を設定していれば、サンドボックスの中で、コードを評価する。
また、<code>$SAFE</code>はprocの中だけで有効になっており、全体の設定を変更しないようにしている。</p>

<h2>フックメソッド</h2>

<p>Rubyにはいくつかのイベントが発生した時にフックするメソッドが存在する。</p>

<h3>継承にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inherited</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">subclass</span><span class="si">}</span><span class="s2"> に継承されたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyString</span> <span class="o">&lt;</span> <span class="nb">String</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; &quot;String は MyString に継承されたよ！&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>include にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2"> にincludeされたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">M1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; M1 は C にincludeされたよ！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>prepend にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M2</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prepended</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2"> にprependされたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">M2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; M2 は C にprependされたよ！</span>
</span></code></pre></td></tr></table></div></figure>


<p>その他以下のようなメソッドもある。</p>

<pre>
Module#method_added - メソッドを追加した時に呼ばれる
Module#method_removed - メソッドがModule#remove_method により削除された時に呼ばれる
Module#method_undefined - メソッドがModule#undef_method によって削除されるか、 undef 文により未定義になったら呼ばれる

# 特異メソッドのイベントをキャッチする
Kernel#singleton_method_added - 特異メソッドが追加された時に呼ばれる
Karnel#singleton_method_removed - 特異メソッドが削除された時に呼ばれる
Karnel#singleton_method_undefined - 特異メソッドがundefinedになった時に呼ばれる
</pre>


<h2>アトリビュートのチェック</h2>

<h3>全Classで <code>attr_checked</code> を使えるようにする</h3>

<p>classやmoduleのアトリビュートをチェックするようなDSL <code>attr_checked</code>を追加する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attr_checked</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">validation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span> <span class="o">||</span> <span class="o">!</span><span class="n">validation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">attribute</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">attr_checked</span> <span class="ss">:age</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestCheckedAttribute</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_accepts_valid_values</span>
</span><span class='line'>    <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">18</span><span class="p">,</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_invalid_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_nil_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_false_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>なるほど、これでできるのかとちょっと感激！</p>

<h3>include した時だけ使えるようにする</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">CheckedAttributes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">attr_checked</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">validation</span><span class="p">)</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="k">raise</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span> <span class="o">||</span> <span class="o">!</span><span class="n">validation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">define_method</span> <span class="n">attribute</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CheckedAttributes</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_checked</span> <span class="ss">:age</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestCheckedAttribute</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_accepts_valid_values</span>
</span><span class='line'>    <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">18</span><span class="p">,</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_invalid_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_nil_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_false_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第5章 クラス定義[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition/"/>
    <updated>2015-11-29T19:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>5章 クラス定義</h2>

<h3>カレントクラスとは？</h3>

<pre>
- プログラムのトップレベルでは「カレントクラス」はmainクラスのObjectになる
- classキーワードでクラスをオープンするとそのクラスが「カレントクラス」となる
- メソッドの中では、カレントオブジェクトのクラスがカレントクラスとなる
</pre>


<h3>class_evalを使ったメソッドの定義</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_method_to</span><span class="p">(</span><span class="n">a_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a_class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">greet</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_method_to</span> <span class="nb">String</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;bcd&#39;</span><span class="o">.</span><span class="n">greet</span> <span class="c1">#=&gt; Hello</span>
</span></code></pre></td></tr></table></div></figure>


<h3>カレントクラスのまとめ</h3>

<pre>
- Rubyのインタプリタはカレントクラスの参照を追跡する。defで定義されたメソッドはカレントクラスのインスタンスメソッドとなる
- クラス定義内では、カレントオブジェクト self と カレントクラスは同義である
- クラスへの参照を持っていれば、クラスはclass_eval(module_eval)でオープンできる
</pre>


<h3>クラスインスタンス変数</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vi">@my_var</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># クラスインスタンス変数</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">read</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="c1"># クラスインスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">arg_num</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="o">=</span> <span class="p">(</span><span class="n">arg_num</span><span class="p">)</span> <span class="c1"># インスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="c1"># インスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クラス変数の癖</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vc">@@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vc">@@v</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="vc">@@v</span> <span class="c1">#=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="n">xxx</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">xxx</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="k">class</span> <span class="n">variable</span> <span class="n">access</span> <span class="n">from</span> <span class="n">toplevel</span>
</span><span class='line'><span class="n">xxx</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">7</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="k">class</span> <span class="n">variable</span> <span class="n">access</span> <span class="n">from</span> <span class="n">toplevel</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>警告は出ているが、<code>@@v</code>の内容が書き換えられている事がわかる。</p>

<h3>クラスメソッド</h3>

<p>クラス・メソッドは『<strong>クラスの特異メソッド</strong>』。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method</span>
</span><span class='line'>    <span class="c1"># メソッドの中身</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>確かに言われてみれば、特異メソッドと言えるかも。</p>

<h2>クラス拡張</h2>

<p>以下の実装をクラス拡張という。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s1">&#39;good evening&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1">#=&gt; &quot;good evening&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このクラス拡張のためのメソッドが、<code>extend</code>。(<code>extend</code>がなくても自分で実装できる)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s1">&#39;good morning&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">MyModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1">#=&gt; &quot;good morning&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでSSHポートフォワーディング管理 Coccinellida & ローカルでrails console実行してサーバDBに接続]]></title>
    <link href="http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel/"/>
    <updated>2015-11-20T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117313/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117313&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117313&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117313" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近借りているサーバーのDBに安全につなぐ方法はないものかと
物色している家庭でSSHポートフォワーディングの便利さをようやく理解しました(恥ずかしながら)。</p>

<p>この便利さを自作アプリとかでも応用できるようにMacの起動時に自動で接続して、それを維持し続けるようにしてくれる無料アプリ
『<strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a></strong>』
(正確にはそのためのterminalコマンドを設定できる)を見つけたので紹介です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>ターミナルコマンド</h2>

<p>まずはターミナルからSSHのポートフォワーディングをするためのコマンドがこちら。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh ログイン名@経由サーバ -L 自分のポート:目的サーバ:目的サーバのポート</span></code></pre></td></tr></table></div></figure>


<h2>Coccinellida を使った設定方法</h2>

<p>基本的には次のことをすればいいです。</p>

<ul>
<li><strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a> からアプリをダウンロード</strong></li>
<li>ターミナルと同様の設定をアプリで行う

<ul>
<li>不明な点がある場合 => <strong><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする</a></strong></li>
</ul>
</li>
<li>System preference => ユーザーとグループ => ログイン時に自動起動するアプリに追加</li>
</ul>


<p>これでlocalhostのポートをサーバー内のDBのポートと同じように扱う事ができるようになります。
(SSHを使っているので安全に接続、データをやり取りできるはず)</p>

<h2>RailsコンソールからサーバーDBに接続する場合</h2>

<p>これを応用すると、ローカルでRailsコンソールするとリモートのDBに接続するといったことも可能になります。</p>

<p>今回はリモートの環境(remote)を作ります。<code>config/environments/remote.rb</code>をdevelopmentあたりをコピーして作成。
次に<code>config/database.yml</code>に以下を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>remote:
</span><span class='line'>  adapter: postgresql
</span><span class='line'>  encoding: unicode
</span><span class='line'>  database: &lt;DB名&gt;
</span><span class='line'>  pool: 5
</span><span class='line'>  username: &lt;ユーザー名&gt;
</span><span class='line'>  password: &lt;パスワード&gt;
</span><span class='line'>  port: ＜ポートフォワーディングしているport番号＞
</span><span class='line'>  host: localhost</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけ、あとは普通にローカルで以下のコマンドを実行するとリモートのDBにつないで好き勝手できます。
(<code>host</code>がなかった場合、localのsocketを探しに行ってしまうので、必ずhostは設定してください)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=remote bundle exec rails console</span></code></pre></td></tr></table></div></figure>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする | eye4brain</a></li>
<li><a href="http://qiita.com/ron214_ron/items/aa273baff030e253ae96">rails consoleにて、dbをproductionに接続する。 - Qiita</a></li>
<li><a href="http://nob-on-the-boat.blogspot.jp/2010/03/ssh.html">No One Better: SSHポートフォワーディング</a></li>
<li><a href="http://qiita.com/YusukeHigaki/items/9bd0c21fbcc47e12b5c1">postgresqlを他ホストからもつなげるようにする - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第4章 ブロック[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block/"/>
    <updated>2015-11-18T20:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第4章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>4章 ブロック</h2>

<h3>ブロックの基礎</h3>

<p>メソッドに block を渡して、簡単に実行させることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">a_method</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="s1">&#39;ブロックがありません&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">a_method</span> <span class="c1">#=&gt; ブロックがありません</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a_method</span> <span class="p">{</span> <span class="s1">&#39;ブロックがあります！&#39;</span> <span class="p">}</span> <span class="c1">#=&gt; ブロックがあります！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用語: クロージャー</h3>

<p>『<a href="http://language-and-engineering.hatenablog.jp/entry/20101118/p1">Rubyの動かないコード （初級編） ブロックとクロージャの性質 - 主に言語とシステム開発に関して</a>』
の説明が非常に分かりやすかったので、お借りしました。まずはクロージャの説明。</p>

<pre>
- クロージャの外の(より広いスコープで定義された)変数はクロージャの中からでも参照可能
- クロージャの中で定義された変数はクロージャの外からは参照できない。
</pre>


<p>これってつまりはブロックと同じようなものということ。</p>

<pre>
- Rubyのブロックは、ブロック定義時のコンテキスト(変数とか)を保持する
- Rubyのブロック内で宣言された変数は、ブロック内でのみ参照可能な変数となる
</pre>


<h3>instance_eval</h3>

<p><code>instance_eval</code>は、渡されたブロックをレシーバのインスタンスの元で実行します。
private メソッドや@vなどのインスタンス変数にもアクセスできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">self</span> <span class="c1">#=&gt; &lt;MyClass:0x007ff9f89dcde0&gt;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@v</span> <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>instance_exec</h3>

<p>次の例は<code>instance_eval</code> だと、Cのインスタンス変数にしかアクセス出来ないが、
<code>instance_exec</code> を使えば ブロックに引数を渡せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twisted_method</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="s2">&quot;@x : </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">, @y : </span><span class="si">#{</span><span class="vi">@y</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">D</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">twisted_method</span> <span class="c1">#=&gt; @x : 1, @y :</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">E</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twisted_method</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_exec</span> <span class="p">(</span><span class="vi">@y</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span> <span class="s2">&quot;@x : </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">, @y : </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">E</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">twisted_method</span> <span class="c1">#=&gt; @x : 1, @y : 2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procオブジェクト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">inc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">inc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># lambdaの別記法</span>
</span><span class='line'><span class="n">inc2</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">inc2</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>＆修飾</h3>

<p>ブロックを引数として渡したい場合によく使うのが <code>&amp;修飾</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">do_math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># block を Proc(オブジェクト)に変換して渡す</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">do_math</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="p">}</span> <span class="c1">#=&gt; 5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Procをブロックに戻す</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="k">yield</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_proc</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="s2">&quot;Bill&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">my_method</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_proc</span><span class="p">)</span> <span class="c1">#=&gt; &quot;Hello Bill!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>あとで評価の例</h3>

<p><code>highline</code> は lambdaを渡すと、それをユーザーが質問に回答した後に実行してくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;highline&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">hl</span> <span class="o">=</span> <span class="no">HighLine</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">friends</span> <span class="o">=</span> <span class="n">hl</span><span class="o">.</span><span class="n">ask</span><span class="p">(</span><span class="s1">&#39;友達を入力してください&#39;</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;友達一覧：</span><span class="si">#{</span><span class="n">friends</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; 友達を入力してください</span>
</span><span class='line'><span class="c1"># &lt;= hoge,fuga</span>
</span><span class='line'><span class="c1"># =&gt; 友達一覧：[&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procとlambdaの差</h3>

<p>Procとlambdaは次のような違いがある。lambdaのほうがメソッドに挙動が近いので、
特別な事情がない限りはlambdaを使うほうが良さそう。</p>

<pre>
- Proc
  - Procが定義されたスコープから戻る
  - 引数が少なかったり、多すぎた場合によしなに処理をしてくれる
- lambda
  - return した場合、単に lambdaから戻る
  - 引数の数が異なるとArgumentErrorを出す
</pre>


<h3>はじめてのDSL</h3>

<p>DSLの初歩を実践してみる。まずは <code>redflag.rb</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@setups</span> <span class="o">&lt;&lt;</span> <span class="n">block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="n">description</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@events</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="n">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="n">condition</span><span class="p">:</span> <span class="n">block</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@setups</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vi">@events</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;event.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@events</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@setups</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class='line'>    <span class="n">setup</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;ALERT: </span><span class="si">#{</span><span class="n">event</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">event</span><span class="o">[</span><span class="ss">:condition</span><span class="o">].</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に <code>event.rb</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">setup</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;空の高さを設定&#39;</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;山の高さを設定&#39;</span>
</span><span class='line'>  <span class="vi">@mountains_height</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span> <span class="s1">&#39;空が落ちてくる&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">&lt;</span> <span class="mi">300</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span> <span class="s1">&#39;空が近づいている&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">&lt;</span> <span class="vi">@mountains_height</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span> <span class="s1">&#39;もうダメだ....手遅れになってしまった...&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>で実行すると次のような結果になる。</p>

<pre>
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が落ちてくる
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が近づいている
#=> 空の高さを設定
#=> 山の高さを設定
</pre>


<p>期待する挙動はしているが、実質的なグローバル変数があり、他の仕組みに影響を与えてしまう可能性がある。</p>

<h2>グローバル変数を排除した実装</h2>

<p>グローバル変数を排除して、クリーンルームを使って実装したのがこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">setups</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">events</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:setup</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">setups</span> <span class="o">&lt;&lt;</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:event</span> <span class="k">do</span> <span class="o">|</span><span class="n">description</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">events</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="n">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="n">condition</span><span class="p">:</span> <span class="n">block</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each_setup</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">setups</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class='line'>      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">setup</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each_event</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">events</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">event</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;4.6.event.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">each_event</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>  <span class="n">env</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">each_setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">instance_eval</span> <span class="o">&amp;</span><span class="n">setup</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;ALERT: </span><span class="si">#{</span><span class="n">event</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">env</span><span class="o">.</span><span class="n">instance_eval</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">event</span><span class="o">[</span><span class="ss">:condition</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 空の高さを設定</span>
</span><span class='line'><span class="c1"># 山の高さを設定</span>
</span><span class='line'><span class="c1"># ALERT: 空が落ちてくる</span>
</span><span class='line'><span class="c1"># 空の高さを設定</span>
</span><span class='line'><span class="c1"># 山の高さを設定</span>
</span><span class='line'><span class="c1"># ALERT: 空が近づいている</span>
</span><span class='line'><span class="c1"># 空の高さを設定</span>
</span><span class='line'><span class="c1"># 山の高さを設定</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wheneverは導入が超簡単なcrontab管理ライブラリGemです！[Rails4.2]]]></title>
    <link href="http://morizyun.github.io/blog/whenever-gem-rails-ruby-capistrano/"/>
    <updated>2015-11-15T17:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/whenever-gem-rails-ruby-capistrano</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B016QEE30G/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B016QEE30G&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B016QEE30G&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B016QEE30G" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />wheneverはcrontab管理ライブラリです。導入はすごく簡単ですし、RailsやCapistranoとの連携もスムーズで楽ちんです！定期実行するような処理がある場合はぜひご検討ください！</p>

<p><a href="https://github.com/javan/whenever" title="javan/whenever · GitHub" class="button big primary">javan/whenever · GitHub</a></p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Gemのインストール</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># crontab管理</span>
</span><span class='line'>gem <span class="s1">&#39;whenever&#39;</span>, :require <span class="o">=</span>&gt; <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>whenever設定ファイルschedule.rbを作成</h2>

<p>以下のコマンドを実行してconfig/schedule.rb</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wheneverize .
</span><span class='line'>&gt; <span class="o">[</span>add<span class="o">]</span> writing <span class="sb">`</span>./config/schedule.rb<span class="err">&#39;</span>
</span><span class='line'>&gt; <span class="o">[</span><span class="k">done</span><span class="o">]</span> wheneverized! <span class="c">#&lt;= 成功</span>
</span></code></pre></td></tr></table></div></figure>


<h2>wheneverのコマンドの解説</h2>

<p>wheneverでは以下の4つをスケジューリングできます。</p>

<pre>
command: bashコマンド実行
rake: rakeタスク実行
runner: Rails内のメソッド実行
script: scriptの実行
</pre>


<h2>設定の具体例</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 出力先のログファイルの指定</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="s1">&#39;log/crontab.log&#39;</span>
</span><span class='line'><span class="c1"># ジョブの実行環境の指定</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3時間毎に実行するスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="mi">3</span><span class="o">.</span><span class="n">hours</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;MyModel.some_process&quot;</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;my:rake:task&quot;</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;/usr/bin/my_great_command&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 毎日 am4:30のスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;4:30 am&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;MyModel.task_to_run_at_four_thirty_in_the_morning&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一時間毎のスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="ss">:hour</span> <span class="k">do</span> <span class="c1"># Many shortcuts available: :hour, :day, :month, :year, :reboot</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;SomeModel.ladeeda&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 日曜日のpm12時にスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="ss">:sunday</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;12pm&#39;</span> <span class="k">do</span> <span class="c1"># Use any day of the week or :weekend, :weekday</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;Task.do_something_great&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># crontab型の設定「分」「時」「日」「月」「曜日」</span>
</span><span class='line'><span class="c1"># 毎月27日〜31日まで0:00に実行</span>
</span><span class='line'><span class="n">every</span> <span class="s1">&#39;0 0 27-31 * * &#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;echo &#39;you can use raw cron syntax too&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 6-24時まで3時間おきに実行</span>
</span><span class='line'><span class="n">work_hour_per_two</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;6&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;24&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">:00&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span> <span class="n">work_hour_per_two</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;my:rake:task&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Corntabへの設定</h2>

<p>crontab に設定する際のコマンドは以下のとおり。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wheneverの設定更新
</span><span class='line'>RAILS_ENV=development bundle exec whenever --update-crontab
</span><span class='line'>
</span><span class='line'># crontabの設定削除
</span><span class='line'>RAILS_ENV=development bundle exec whenever --clear-crontab</span></code></pre></td></tr></table></div></figure>


<p>詳しい設定方法はGitHubの公式ページへ。</p>

<p><a href="https://github.com/javan/whenever" title="javan/whenever · GitHub" class="button big primary">javan/whenever · GitHub</a></p>

<h2>Capistranoとの連携</h2>

<p>Capistranoについての詳しい記事は、『<strong><a href="http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/">Capistrano 3系でRails4.1のデプロイ</a></strong>』です。興味があれば是非ご一読下さい。</p>

<h3>capistrano/wheneverの基本的な連携</h3>

<p>wheneverの特徴の一つとして、Deployプロセスの自動化をしてくれるGem Capistranoと簡単に連携できる点があります。</p>

<p>設定方法は、まず以下を<code>Capfile</code>に追記。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>require <span class="s1">&#39;whenever/capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、<code>config/deploy.rb</code>に以下を追記。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> :whenever_identifier, -&gt;<span class="o">{</span> <span class="s2">&quot;#{fetch(:application)}_#{fetch(:stage)}&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは<code>cap deploy</code>のたびにcrontabをアプデートしてくれます。</p>

<h2>capistrano/wheneverで環境ごとに設定を変更したい場合</h2>

<p>以下の記事を見ながら設定すれば出来る気がします<sup>^</sup></p>

<ul>
<li><strong><a href="http://qiita.com/zaru/items/348c126a205a2e48b4d6">Rails - Wheneverで環境ごとにschedule内容を変更する</a></strong></li>
<li><strong><a href="https://github.com/javan/whenever/wiki/Setting-variables-on-the-fly">Setting variables on the fly · javan/whenever Wiki</a></strong></li>
</ul>


<h2>Special Thanks</h2>

<p><a href="http://higelog.brassworks.jp/?p=1554">CapistranoでWhenever | ひげろぐ</a></p>

<p><a href="http://www.logiclogic.jp/blog/tech/backend/124/">capistrano+wheneverで簡単cron管理-logiclogic&#8217;s blog | logiclogic&#8217;s blog</a></p>

<h2>変更来歴</h2>

<p>(12/12/24 xx:xx) 新規作成<br/>
(13/01/07 18:35) 「補足：別ファイルにローカルタスク用の設定を書く」を追加<br/>
(13/01/08 23:50) 「補足：複数環境でwheneverを使いたい場合&#8230;」を修正<br/>
(14/04/23 22:20) Rails4.1対応、全面書き直し！<br/>
(14/07-10 20:15) 環境ごとにcronの設定を切り替える方法を追記<br/>
(14/11-02 15:25) capistranoで環境ごとに処理を振り分ける方法がrvmのパスが変わってうまく動かなくなったので一度削除<br/>
(15/11-15 17:15) wheneverコマンドの記述を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acts-as-taggable-onでつくるタグクラウド＆効率的なタグ管理【Rails4.2 x Ruby2.2】]]></title>
    <link href="http://morizyun.github.io/blog/acts-as-taggable-on-gem-rails/"/>
    <updated>2015-11-15T13:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/acts-as-taggable-on-gem-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4K/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4K&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4K&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4K" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsのサービスを作っていて「タグ付けをしたい」と「タグクラウドを作りたい」という場合に使えるGem『<strong><a href="https://github.com/mbleigh/acts-as-taggable-on">mbleigh/acts-as-taggable-on</a></strong>』を紹介します。「<a href="http://blog.livedoor.jp/kensuu/archives/54268130.html">タグ付けやカテゴライズで構造化することはSEO的にもいいらしい</a>」ので、もしチャンスがあればぜひトライしてみてください！</p>

<p><strong>15/11/15 13:00 Rails 4.2 x Ruby 2.2で動作確認</strong><br/></p>

<p><a href="https://github.com/mbleigh/acts-as-taggable-on" class="button big primary">mbleigh/acts-as-taggable-on | GitHub</a></p>

<!-- more -->


<br style="clear:both;"/>


<h2>Gemの導入・設定</h2>

<p><code>Gemfile</code>に以下を追加して、<code>bundle install</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Manage Tag</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;acts-as-taggable-on&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてタグ管理用のテーブルのマイグレーションファイルを生成し、migrate。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">acts_as_taggable_on</span><span class="ss">:migration</span>
</span><span class='line'><span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<h2>タグクラウドをViewに表示するまでの流れ</h2>

<p>続いて実際にタグクラウドをViewに表示させてみます。</p>

<p>まず<code>app/model/user.rb</code>に<code>tags</code>タグを設置します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span> <span class="c1"># acts_as_taggable_on :tags のエイリアス</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったこれだけで、<code>Userモデル</code>はこんな使い方ができるようになります。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bobby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">tag_list</span> <span class="o">=</span> <span class="s2">&quot;awesome, slick, hefty&quot;</span> <span class="c1"># this should be familiar</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">tags</span> <span class="c1"># =&gt; [&lt;Tag name:&quot;awesome&quot;&gt;,&lt;Tag name:&quot;slick&quot;&gt;,&lt;Tag name:&quot;hefty&quot;&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">tags_count</span> <span class="c1"># =&gt; [&lt;Tag name:&quot;awesome&quot; count=2&gt;,&lt;Tag name:&quot;slick&quot;&gt;,&lt;Tag name:&quot;hefty&quot; count=2&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて<code>app/controller/users_controller.rb</code>に以下の記述を追加して、tagを取得。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>class UsersController &lt; ApplicationController
</span><span class='line'>  def tag_cloud
</span><span class='line'>    <span class="c"># order(&#39;count DESC&#39;)でカウントの多い順にタグを並べています</span>
</span><span class='line'>    @tags <span class="o">=</span> User.tag_counts_on<span class="o">(</span>:tags<span class="o">)</span>.order<span class="o">(</span><span class="s1">&#39;count DESC&#39;</span><span class="o">)</span>
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>タグクラウドの表示のために、<code>app/helpers/user_helper.rb</code>に次の記述を追加します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>module Userhelper
</span><span class='line'>  include ActsAsTaggableOn::TagsHelper
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p><strong>erb</strong>の場合は以下を追記。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">tag_cloud</span><span class="p">(</span><span class="vi">@tags</span><span class="p">,</span> <span class="sx">%w(css1 css2 css3 css4)</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">css_class</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="ss">:tag</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span> <span class="p">},</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="n">css_class</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>haml</strong>の場合はこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">tag_cloud</span><span class="p">(</span><span class="vi">@tags</span><span class="p">,</span> <span class="sx">%w(css1 css2 css3 css4)</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">css_class</span><span class="o">|</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="p">{</span> <span class="n">action</span><span class="p">:</span> <span class="ss">:tag</span><span class="p">,</span> <span class="n">tag_name</span><span class="p">:</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span> <span class="p">},</span> <span class="n">class</span><span class="p">:</span> <span class="n">css_class</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、cssファイルにはこちら。(任意で変更してください)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.css1</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.css2</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.2em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.css3</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.4em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.css4</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.6em</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に<code>config/routes.rb</code>を修正。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:users</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;tag/:tag_name&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>出来上がったタグクラウドはこちら。</p>

<p><img src="http://farm9.staticflickr.com/8348/8281723435_4029406336.jpg" width="500" height="87" alt="fpu_tmp_1355785967.3979_16f667"></p>

<p>GitHubには更に詳しい情報が載っているのでよかったら覗いてみてください。</p>

<p><a href="https://github.com/mbleigh/acts-as-taggable-on" class="button big primary">mbleigh/acts-as-taggable-on | GitHub</a></p>

<h2>所感</h2>

<p>Rails 4 x Ruby 2.1環境で久々にトライしてみましたが、本当に簡単に導入できました！</p>

<h2>[補足] 現在登録済のタグの一覧が欲しい場合</h2>

<p>現在登録済のタグの一覧が欲しい場合はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActsAsTaggableOn</span><span class="o">::</span><span class="no">Tag</span><span class="o">.</span><span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Special Thanks</h2>

<ul>
<li><a href="http://t-taira.hatenablog.com/entry/20110116/1295139238">Rails3でタグ付けの実装 - t-taira blog</a></li>
<li><a href="https://github.com/mbleigh/acts-as-taggable-on">mbleigh/acts-as-taggable-on · GitHub</a></li>
<li><a href="http://stackoverflow.com/questions/22710243/how-to-get-a-list-of-all-tags-while-using-the-gem-acts-as-taggable-on-in-rails">ruby - How to get a list of all tags while using the gem &#8216;acts-as-taggable-on&#8217; in Rails (not the counts) - Stack Overflow</a></li>
</ul>


<h2>変更来歴</h2>

<p>12/12/18 08:00 新規作成<br/>
13/12/31 21:30 Rails 4 x Ruby 2.1で動作確認<br/>
15/11/15 13:00 Rails 4.2 x Ruby 2.2.3で動作確認<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第3章 メソッド[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3/"/>
    <updated>2015-11-09T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第3章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>3章 メソッド</h2>

<h3>動的メソッドを使ったリファクタリング</h3>

<p>まずは修正前の変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Mouse: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Cpu: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>動的メソッドを使ってリファクタリングを行った結果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>    <span class="n">data_source</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/^get_(.*)_info$/</span><span class="p">)</span> <span class="p">{</span> <span class="no">Computer</span><span class="o">.</span><span class="n">define_component</span> <span class="vg">$1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">?</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>method_missing を使った リファクタリング</h3>

<p>さきほどの <code>Computer</code> クラスを <code>method_missing</code> でリファクタリングした場合。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@data_source</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">?</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">include_private</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@data_source</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、 <code>method_missing</code> はバグが発生した場合に気づきにくい特徴があるので利用には注意が必要。
あと、<code>method_missing</code> よりも、<code>respond_to_missing?</code> のほうが適切というお話もあります。</p>

<p><strong><a href="https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding">Always Define respond_to_missing? When Overriding method_missing</a></strong></p>

<p>ゴーストメソッドの最大の問題点は、本物のメソッドではないという点だ。
振る舞いはメソッドなのに、 <code>Object#methods</code> に含まれないのだ。</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Railsを仕事にしていくための第一歩]]></title>
    <link href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/"/>
    <updated>2015-11-08T23:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近仕事でRailsのコードレビューをする時間が長くって、いろいろ指摘するんですが、
Railsって「Railsチュートリアル」には書いてないのに覚えないと仕事にならないこと多すぎだなと気付かされます。
どこでどんなふうにすれば、プロになろうとしている人が最短距離で知識を獲得できるかはわからないですが、
今思っている特に大事だなと思うことつらつらと書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プログラミングの重要な要素</h2>

<p>まず、Railsの前にプログラミングで全般的に特に重要と思っている要素を紹介します。</p>

<pre>
- リーダブルなコード
  - ネーミングルールについて
  - 言語・フレームワークのルール
  - 変数のスコープについて
  - プロジェクトの設計思想
  - オブジェクト指向・コードの再利用性
- 正しいテストケースを作る
</pre>


<p>プロジェクトによって変わるので、全ては書きませんが、ぜひ意識してどこを学ぶべきかを考えてみてください。</p>

<h2>ネーミングルールについて</h2>

<ul>
<li>動詞・名詞を正しく使い分けて下さい(英語離れるまで大変ですが、頑張ってください＞＜)</li>
<li>名前は「他のチームメンバーにも意味がわかる英語の名前」にして下さい</li>
<li>プロジェクト内の周りのメソッド・変数うがどんな意味を持っているか考えて見てください</li>
</ul>


<h2>コーディングガイドライン</h2>

<p>Ruby/Railsの有名なコーディングガイドラインは世の中に沢山あるので、ぜひ読んでください。</p>

<ul>
<li><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide">The Rails Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/cookpad/styleguide/blob/master/ruby.ja.md">CookPad Ruby コーディング規準</a></li>
<li><a href="https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md">The Ruby Style Guide (fortissimo1997)</a></li>
<li><a href="https://github.com/satour/rails-style-guide/blob/master/README-jaJA.md">The Rails Style Guide (satour)</a></li>
</ul>


<h2>変数のスコープについて</h2>

<p>変数のスコープにおいてプログラムの読みやすさはすごく大切です。
ローカル変数、インスタンス変数、クラス変数のスコープを理解して使い分けて下さい。
スコープの広い変数をむやみに使うとほかの人がコードを読みにくくなり、バグの温床になります。</p>

<h2>オブジェクト指向について</h2>

<ul>
<li><a href="http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1">オブジェクト指向を手に入れるまでの奇跡</a></li>
<li><a href="http://tdak.hateblo.jp/entry/20140406/1396773476">オブジェクト指向について</a></li>
<li><a href="http://www.itmedia.co.jp/im/articles/0703/06/news125.html">5分で分るオブジェクト指向</a></li>
</ul>


<h2>その他必須で読んで欲しい本・記事</h2>

<h3>書籍</h3>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4873115655">リーダブルコード</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873113679">初めてのRuby</a></li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">EveryDay Rails(RSpec)</a></li>
</ul>


<h3>記事</h3>

<ul>
<li><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに使えそうなイディオムとか便利メソッドとか</a></li>
<li><a href="http://at-grandpa.hatenablog.jp/entry/2013/11/01/072636">MVCの勘所</a></li>
<li><a href="http://betterspecs.org/jp/">RSpecの書き方</a></li>
</ul>


<h2>Rails/Ruby Tips</h2>

<p>ここからは、細かめのTipsです。よく指摘するところを中心に書きます。</p>

<h3>Active Record</h3>

<ul>
<li>pluck を上手に活用して下さい(ARのオブジェクトを作らないのでSQLのコストが減ります)

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51847390.html">Rails3.2から導入されたpluckメソッドのパフォーマンスが素晴らしい件 - (ﾟ∀ﾟ)o彡 sasata299&#8217;s blog</a></li>
</ul>
</li>
<li>ログを見て、無駄なSQLがないかを常に考えてください</li>
<li>indexが適切に効かないと、パフォーマンスが悪くなります。常にパフォーマンスを意識してください</li>
</ul>


<h3>Rails - View</h3>

<ul>
<li>共通的に使う可能性のあるは Decorator(ActiveDecorator等を利用) 側に書いて下さい</li>
<li>Viewのロジックは出来る限り減らして下さい</li>
<li>haml/slimは構造化しやすいという点で便利！</li>
</ul>


<h3>Rails - i18n</h3>

<p>適材適所でi18nを活用してください。</p>

<ul>
<li><a href="http://railsguides.jp/i18n.html">Rails国際化(I18n) API | Rails ガイド</a></li>
<li><a href="http://morizyun.github.io/blog/i18n-english-rails-ruby-many-languages/">Railsの多言語化対応 i18nのやり方を整理してみた！</a></li>
<li><a href="http://ruby-rails.hatenadiary.com/entry/20150226/1424937175">Railsのi18nの基本的な使い方まとめ - Rails Webook</a></li>
</ul>


<h3>N+1問題の対策 - Bullet</h3>

<p>RailsのActiveRecord(findやwhere)は便利ですが、DB(SQL)の側から見ると
非効率的なクエリを発生させることがあります。
これを監視してくれるのが、『<strong><a href="https://github.com/flyerhzm/bullet">Gem Bullet</a></strong>』です。
このGemを入れておくと開発環境で N+1が発生した時に警告を出してくれます。</p>

<ul>
<li><a href="http://www.techscore.com/blog/2012/12/25/rails%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E7%B4%B9%E4%BB%8B-n1%E5%95%8F%E9%A1%8C%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E3%80%8Cbullet%E3%80%8D/">Railsライブラリ紹介: N+1問題を検出する「bullet」</a></li>
<li><a href="http://morizyun.github.io/blog/speed-up-rails-bullet/">[Rails 高速化] ページキャッシュ、N+1対策、SQLチューニング</a></li>
</ul>


<h3>Profiler</h3>

<p>Viewが遅い時にボトルネックを探すためのツールです。
速度改善をする場合はプロファイラーか、ログを取ってボトルネックを計測して実施して下さい。</p>

<ul>
<li><a href="https://github.com/MiniProfiler/rack-mini-profiler">MiniProfiler/rack-mini-profiler - GitHub</a></li>
<li><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化 - CubicLouve</a></li>
</ul>


<h3>Ruby/Railsの細かいTips</h3>

<ul>
<li>Ruby の定数は 書き換え可能です。immutable な場合はかならず、最後に .freeze をつけて下さい

<ul>
<li><a href="http://qiita.com/yukiyan/items/39f945c55b6dc5e11ed7">Rubyで定数を扱う場合はfreezeするべき</a></li>
</ul>
</li>
<li>Timezoneもしっかり意識して実装すると後々はまらないと思います

<ul>
<li><a href="http://qiita.com/jnchito/items/cae89ee43c30f5d6fa2c">RubyとRailsにおけるTime, Date, DateTime, TimeWithZoneの違い</a></li>
</ul>
</li>
<li>ActiveSupport::StringInquirerを使うとコードが読みやすくなります。適材適所で利用を検討してください。

<ul>
<li><a href="http://d.hatena.ne.jp/holysugar/20110513/p1">今更ながらシリーズ(2) StringInquirer - HWPS別館</a></li>
</ul>
</li>
</ul>


<h2>参考書籍</h2>

<p>その他読んでおくといいよって本です。</p>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4774145963">良いコードを書く技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873114799">プログラマが知るべき97のこと</a></li>
<li><a href="http://www.amazon.co.jp/dp/4822284654">オブジェクト指向でなぜ作るのか</a></li>
<li><a href="http://www.amazon.co.jp/dp/4774142042">Webを支える技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4048869558">プログラマの考え方が面白いほど身につく本</a></li>
</ul>


<p>あとは『<strong><a href="http://blog.jnito.com/entry/2014/09/29/074949">プログラマ歴12年の僕が選んだ「10年経っても役立つ技術書17選」 - give IT a try</a></strong>』
にプログラマーが基礎を身につける上で役に立ちそうな本が紹介されています。こちらも良かったら読んでみてください<sup>^</sup></p>

<h2>本当に初心者な人向けに</h2>

<p>ちょっと上の内容がハードだなと思う人向けには拙著
『<strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファースト・ガイド - 酒と泪とRubyとRailsと</a></strong>』
をよかったら読んでみてください。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://goo.gl/0HPyuh">pull-request-のフォーマットを決めるとレビューの効率が3倍よくなる</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのマスタ的なModelのキャッシュについて[Redis]]]></title>
    <link href="http://morizyun.github.io/blog/model-master-cache-rails-redis/"/>
    <updated>2015-11-08T10:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/model-master-cache-rails-redis</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4K/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4K&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4K&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4K" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsで中規模なサイトを作っていく上で
避けて通れないのが、増えてきたモデルを適切にキャッシュする仕組みのように思えます。</p>

<p>特に変更が少ないマスタ的なテーブルに対して、『多対多』で<code>関連付け(アソシエーション: association)</code>がある場合などは、
それなりのSQLの発行コストになる事があります。そこを適切にキャッシュすることでDBへの負荷が減り、
ユーザーへのレスポンスが改善されると思います。</p>

<p>今回は、最近実装しているキャッシュの方法について、紹介したいと思います。
(というか偉い人、ぜひいい方法教えて下さい＞＜)</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>前提条件: RailsからRedisにキャッシュ</h2>

<p>今回は前提条件として、Railsのアプリ から『<strong><a href="https://github.com/redis-store/redis-rails">redis-store/redis-rails - GitHub</a></strong>』
のGemを使って、Redisにキャッシュをされているとします。
セットアップ方法は『<strong><a href="https://github.com/redis-store/redis-rails">redis-store/redis-rails - GitHub</a></strong>』
のREADMEを御覧ください。</p>

<p>またRedis自体のインストールについては拙著
「<strong><a href="http://morizyun.github.io/blog/redis-mac-centos-rails/">CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB</a></strong>」
をよかったら御覧ください。</p>

<h2>Railsでのキャッシュ(ActiveSupport::Cache)</h2>

<p>Rails内では次のように書くことでRedisに<code>xxx</code>というキーでキャッシュ済の場合は、Redisのキャッシュを取得します。
Redisに<code>xxx</code>というキーがない場合は中の処理を実行してキャッシュにセットした上で値を取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;hoge&quot;</span><span class="p">,</span> <span class="s2">&quot;fuga&quot;</span><span class="o">]</span> <span class="c1"># 実際には重い処理</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">array</span><span class="o">.</span><span class="n">to_s</span> <span class="c1">#=&gt; [&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;hoge&quot;</span><span class="p">,</span> <span class="s2">&quot;fuuuga&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># キャッシュが残っているので前の値が使われる</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">array</span><span class="o">.</span><span class="n">to_s</span> <span class="c1">#=&gt; [&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Redis側に格納されたデータは次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli
</span><span class='line'>127.0.0.1:6379&gt; GET xxx
</span><span class='line'><span class="s2">&quot;\x04\bo: ActiveSupport::Cache::Entry\b:\x0b@value[\aI\&quot;\thoge\x06:\x06ETI\&quot;\tfuga\x06;\aT:\x10@created_atf\x171446337812.0613928:\x10@expires_inf\n5.4e3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis側にはActiveSupport::Cache::Entryというオブジェクトとして、値が格納されるようです。</p>

<h2>ActiveRecord::Relation.to_a (一回呼び出して)のキャッシュ</h2>

<p>いよいよ本題です。まずは、<code>ActiveRecord::Relation.to_a</code>ってやるとキャッシュできるか試してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;prefecture&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Prefecture</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli
</span><span class='line'>
</span><span class='line'>&gt; GET prefecture
</span><span class='line'><span class="s2">&quot;\x04\bo: ActiveSupport::Cache::Entry\b:\x0b@value[6o:\x0fPrefecture\x10:\x10@attributeso:\x1fActiveRecord::AttributeSet\x06;\bo:$ActiveRecord::LazyAttributeHash\n:</span>
</span><span class='line'><span class="s2">..(省略)..eated_atf\x161446338581.033632:\x10@expires_inf\n5.4e3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>キャッシュされてた。どうやら、Rails 4.2.1以降は<code>ActiveRecord::LazyAttributeHash</code> というオブジェクトでキャッシュされているっぽい。
Railsすごいな&#8230; (一部の環境でArelまでしかキャッシュされないことがある気がしますが、ライブラリとかのバージョン依存なのか、実装がしょぼいのか&#8230;)</p>

<p>あと、これとは別で状態が変化するオブジェクトをキャッシュするのはいかがなものかという議論もあります。</p>

<p><strong><a href="http://stackoverflow.com/questions/11218917/confusion-caching-active-record-queries-with-rails-cache-fetch?answertab=votes#tab-top">Confusion caching Active Record queries with Rails.cache.fetch - Stack Overflow</a></strong></p>

<p>この方が言っていることは至極最もだと思います。あくまで変化が殆ど無いような、マスタデータに
関するキャッシュを想定しています。</p>

<h2>最近 ActiveRecord / DB周り に対して思うこと</h2>

<ul>
<li>ActiveRecord、まじ洗練されててすごい。でもその分、レコード数、カラム数が多くなるとオブジェクトの生成コストつらい気がする</li>
<li>パフォーマンス保つためにも できるだけ SQL は発行したくないよね</li>
<li>仮に N+1 をさけて、include しても DB側のSQLのコストはそれなりに高い(index次第だけど)

<ul>
<li>SQLの発行コストや発生頻度は常に意識する必要がある</li>
<li>コストを正しく把握した上で、SQLを発行するかどうか選択すべき</li>
</ul>
</li>
<li>ただし、トレードオフとして生産性がある。ActiveRecordの便利な機能使えないってことは生産性が下がる</li>
<li>生産性を犠牲にはし過ぎないようにしたい。生産性を犠牲にしない程度にキャッシュを有効活用したい</li>
</ul>


<h2>ライブラリに依存すべき？</h2>

<p>それっぽいGemがないかなと思って探していたら、shopify謹製のライブラリを発見しました。更新も頻繁に行われているようです。</p>

<p><strong><a href="http://shopify.github.io/identity_cache/">shopify/identity_cache</a></strong></p>

<p>便利そうなGemがあることはあるけど&#8230;</p>

<pre>
- 学習コストが高いライブラリはやっぱり怖い(チーム開発で使いづらい)
- 実装をちゃんと読みきらないとブラックボックス化して怖そう...
</pre>


<h2>models/concern でのキャッシュ実装の提案</h2>

<p>Railsが前提にはなりますが、<code>models/concern/cache_support.rb</code> を実装して、プロジェクトで使いやすい形、
チームメンバーが簡単に使える形で実装していくという提案です。</p>

<p>一応補足で、キャッシュのクリアを1時間に1回にしていますが、これはマスタ系のデータがほぼ更新されない
ような特殊な環境を想定しています。正しくやるのであれば、after_saveとかのcallbackを使って、キャッシュを
クリアして上げる仕組みも一緒に実装してあげると幸せになれると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># キャッシュ制御に関するモジュール</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ 背景・目的</span>
</span><span class='line'><span class="c1"># - ActiveRecord便利なんだけど name とるだけなのに SQLを発行しすぎとか気になるます</span>
</span><span class='line'><span class="c1"># - model自体に大したレコード数がない場合は、この機能を使ってキャッシュしましょう</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ 制約条件</span>
</span><span class='line'><span class="c1"># - id のないテーブルでは使えません</span>
</span><span class='line'><span class="c1"># - キャッシュは1時間でクリアされます</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ お願い</span>
</span><span class='line'><span class="c1"># - 定期的な更新があるようなデータを取り扱う場合は、after_save / after_destroy とかで、</span>
</span><span class='line'><span class="c1">#   キャッシュをクリアする機構を取り付けてください</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ 使い方</span>
</span><span class='line'><span class="c1"># △ 前提</span>
</span><span class='line'><span class="c1"># - Model にこのモジュールを include</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># △ キャッシュから特定のcolumn(xxx)の値を取得する</span>
</span><span class='line'><span class="c1"># - Class.cached_xxx_of(id) って呼び出す</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># △ キャッシュから特定id の ActiveRecord を取得する</span>
</span><span class='line'><span class="c1"># - Class.cached_record_of(id) って呼び出す</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># △ キャッシュから全レコード(ActiveRecord) を取得する</span>
</span><span class='line'><span class="c1"># - Class.cached_all_records って呼び出す</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CacheSupport</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># Public Class Methods</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># キャッシュされた値を取得するメソッド(cached_xxx_of)を必要なタイミングで動的に生成</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cache_method?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">define_singleton_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg_id</span><span class="o">|</span>
</span><span class='line'>          <span class="n">column</span> <span class="o">=</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/^cached_(.*)_of$/</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>          <span class="n">refresh_cache!</span> <span class="k">if</span> <span class="n">need_refresh?</span> <span class="c1"># キャッシュを更新</span>
</span><span class='line'>          <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">cache_key_record</span><span class="p">(</span><span class="n">arg_id</span><span class="p">))</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="n">column</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">public_send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">super</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Logic for this method MUST match that of the detection in method_missing</span>
</span><span class='line'>    <span class="c1"># - http://docs.ruby-lang.org/ja/2.2.0/method/Object/i/respond_to_missing=3f.html</span>
</span><span class='line'>    <span class="c1"># - https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding</span>
</span><span class='line'>    <span class="c1"># @return [Boolean]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">include_private</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cache_method?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャッシュされたレコードを返すメソッド</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cached_record_of</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">refresh_cache!</span> <span class="k">if</span> <span class="n">need_refresh?</span> <span class="c1"># キャッシュを更新</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">cache_key_record</span><span class="p">(</span><span class="nb">id</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 全てのレコードを返すメソッド</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cached_all_records</span>
</span><span class='line'>      <span class="n">refresh_cache!</span> <span class="k">if</span> <span class="n">need_refresh?</span> <span class="c1"># キャッシュを更新</span>
</span><span class='line'>      <span class="n">ids</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">cache_key_ids</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cache_keys</span> <span class="o">=</span> <span class="n">ids</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="n">cache_key_record</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read_multi</span><span class="p">(</span><span class="o">*</span><span class="n">cache_keys</span><span class="p">)</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># Private Class Methods</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># キャッシュを設定</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">refresh_cache!</span>
</span><span class='line'>      <span class="c1"># レコード単位のキャッシュ</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">record</span><span class="o">|</span>
</span><span class='line'>        <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cache_key_record</span><span class="p">(</span><span class="n">record</span><span class="o">.</span><span class="n">id</span><span class="p">),</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># idの配列をキャッシュ</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cache_key_ids</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャッシュすべきなら true、キャッシュすべきでないなら false</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">need_refresh?</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;/models/cache_support/need_refresh?/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャッシュした値を取得するメソッドなら true, 異なれば false</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cache_method?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>      <span class="n">column_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">col</span><span class="o">|</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="s2">&quot;cached_</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">_of&quot;</span> <span class="o">==</span> <span class="nb">method</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># レコード単位のキャッシュ名</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cache_key_record</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;/models/cache_support/cache_key_record/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># id一覧のキャッシュ名</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cache_key_ids</span>
</span><span class='line'>      <span class="s2">&quot;/models/cache_support/cache_key_ids/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span> <span class="c1"># ClassMethods</span>
</span><span class='line'><span class="k">end</span> <span class="c1"># CacheSupport</span>
</span></code></pre></td></tr></table></div></figure>


<p>11/8に少し更新をしました。</p>

<pre>
- カラムを限定する仕組みを取りの時期ました。チームでの使いやすさを重視しました。
- ハッシュではなく、ActiveRecordにしました。ActiveRecordに戻すコストはかかりますが、使いやすさ重視です。
- キャッシュをレコード単位に変更しました。RedisのIOとハッシュに戻す部分のコストが大きかったので減らすのが目的です。
- 全レコードを一括で取得するメソッドを追加しました。Rails.cache.read_multi 便利。
</pre>


<p>この辺りの実装でよりいいプラクティスとかあればぜひ教えてほしいです＞＜</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://redis.shibu.jp/commandreference/">コマンドリファレンス — redis 2.0.3 documentation</a></strong></li>
<li><strong><a href="http://qiita.com/Kta-M/items/b4852c849d408e7445c6">RailsのセッションストアとしてRedisを使う(Mac/EC2:AmazonLinux) - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor.js promise でサーバ処理呼び出して結果を非同期で表示する]]></title>
    <link href="http://morizyun.github.io/blog/meteor-package-promoise-async/"/>
    <updated>2015-11-01T17:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meteor-package-promoise-async</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/487311621X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=487311621X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=487311621X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=487311621X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Meteorでサーバ処理を呼び出しつつ、
処理の結果を非同期でrenderしたくって、パッケージ『<strong><a href="https://github.com/deanius/meteor-promise">deanius/meteor-promise</a></strong>』
を導入したのでそのメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>やりたかったこと</h2>

<pre>
- クライアントのタイムゾーンの日付 => サーバに送付して todo 完了に変更
- todo が完了したら、完了していない todo の件数をサーバで計算
- todo の件数をサーバで計算し終わったら、 ビュー側を更新
</pre>


<h2>Meteor Package promise の導入</h2>

<p>パッケージを導入。(ejsonもいるっぽいです)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor add deanius:promise
</span><span class='line'>meteor add ejson
</span></code></pre></td></tr></table></div></figure>


<p>次にclient側のjsに以下の処理を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">todosItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">checked</span><span class="o">:</span> <span class="nx">ReactivePromise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Meteor</span><span class="p">.</span><span class="nx">callPromise</span><span class="p">(</span><span class="s2">&quot;todoChecked&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">todoId</span><span class="o">:</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="nx">checkedAt</span><span class="o">:</span> <span class="nx">getDate</span><span class="p">()});</span>
</span><span class='line'>  <span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Meteor.call("todoChecked")</code> って書くところを <code>Meteor.callPromise("todoChecked")</code> と書いて、
結果が来たらレンダーしてくれる。</p>

<h2>ライブラリの詳しい使い方</h2>

<p>公式の <strong><a href="http://deanius-promise.meteor.com/">Meteor Async w/ deanius:promise</a></strong> はデモもあって分かりやすかったです！</p>

<h2>所感</h2>

<pre>
- Package「deanius:promise」自体は使いやすいし、感激
- JavaScript/Meteor.js 弱者過ぎて、本当に正しい書き方とは思えない。誰かおしえてください＞＜
- Promiseってもう少し別の概念な気がする。ユースケース間違ってる気がしてならない。
- いちいちサーバサイド呼び出しまくってるけど本当にいいのだろうか...、ユーザーちゃんと来たらさばけなくない？
</pre>


<p>つまりもうちょっとちゃんと勉強しろってことかな。まずは一回JavaScriptちゃんと勉強してみようと思います。</p>

<h2>Healthack.me ちょっとずつ改善中</h2>

<p><a href="http://healthack.morizyun.com"><img src="https://farm1.staticflickr.com/652/22197382029_79ee7dd411_z.jpg" width="640" height="411"></a></p>

<p>自分の健康管理のチェックリストアプリですが、『<strong><a href="http://healthack.morizyun.com">healthack.me</a></strong>』を改善中です。
機能の要望とか、コードのまずい部分の修正とかあれば、『<strong><a href="https://github.com/morizyun/healthack">morizyun/healthack - GitHub</a></strong>』
のISSUEに登録ください。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第2章 オブジェクトモデル[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review/"/>
    <updated>2015-10-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第2章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>メタプログラミングとは</h2>

<p>コードを記述するためのコードを書くことである</p>

<h2>2章</h2>

<h3>オープンクラス</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;monetize&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">standard_price</span> <span class="o">=</span> <span class="mi">100</span><span class="o">.</span><span class="n">to_money</span><span class="p">(</span><span class="s1">&#39;USD&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">standard_price</span><span class="o">.</span><span class="n">format</span> <span class="c1">#=&gt; $100.00</span>
</span></code></pre></td></tr></table></div></figure>


<p>とある場合、 <code>to_money</code> は以下のように <code>Numeric</code> クラスを拡張して実装されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Numeric</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_money</span><span class="p">(</span><span class="n">currency</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Monetize</span><span class="o">.</span><span class="n">from_numeric</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">currency</span> <span class="o">||</span> <span class="no">Money</span><span class="o">.</span><span class="n">default_currency</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rubyは標準クラスでも気軽に拡張できる。これをモンキーパッチと呼ぶ。
しかし例えば拡張したメソッドが標準クラスのメソッドだった場合、その影響範囲が大きくなってしまう。
モンキーパッチの代替案としては、<code>Refinements</code> などを使うことである。</p>

<h3>Classの親クラスは Module</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">superclass</span> <span class="c1">#=&gt; Module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class はオブジェクトの生成やクラスを継承するためのインスタンスメソッド new, allocate superclass を追加したモジュールである。</p>

<h3>load と require の違い</h3>

<pre>
- load => loadはコードを実行するために使う。呼び出す度にファイルを実行する
- require => requireはライブラリをインポートするために使う。ファイルは一度しか読み込まない。
</pre>


<h3>モジュールの継承関係</h3>

<p>継承チェーンはクラスからスーパークラスに向かって進む。
それだけではなく、継承チェーンにはモジュールも含まれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="s1">&#39;M1#my_method()&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">M2</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method_second</span>
</span><span class='line'>    <span class="s1">&#39;M2#my_method_second()&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">M1</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">M2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 継承関係を見るメソッド</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">D</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; [D, M2, C, M1, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにM1やKernelなどのModuleも継承関係に含まれている事がわかる。</p>

<p>ちなみに、モジュールがすでにチェーンに存在していた場合は、2回目の挿入を無視する。
(何度も継承チェーンに同じオブジェクトが含まれることはない)</p>

<h3>Rubyにおける private について</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method_no_self</span>
</span><span class='line'>    <span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method_with_self</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="s1">&#39;called private method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method_no_self</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method_with_self</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Refinementsについて</h3>

<p>module で限定されたスコープの中でのみ、Stringを限定して拡張できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">StringExtensions</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reverse</span>
</span><span class='line'>      <span class="s1">&#39;esrever&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Strings</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">StringExtensions</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;my_string&#39;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1">#=&gt; esrever</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;my_string&#39;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1">#=&gt; gnirts_ym</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、モンキーパッチで発生するようなグローバルな変更を避けることができる。
ただし、<code>Refinements</code>は新しい機能で、将来挙動が変わる可能性がある。
そのことを理解したうえで、プログラムを書くべきである。</p>

<h3>まとめ</h3>

<ul>
<li>オブジェクトは複数のインスタンス変数とクラスへのリンクで構成</li>
<li>インスタンス目ドッドはオブジェクトの Class に住んでいる</li>
<li>クラスは Class クラスのオブジェクトである。クラスは単なる定数である</li>
<li>Class は Module のサブクラスである</li>
<li>Module は基本的にはメソッドをまとめたものである</li>
<li>クラスは new でインスタンス化したり、 superclass で階層構造を作ったりできる</li>
<li>クラスはそれぞれ、BasicObject まで続く継承チェーンを持っている</li>
<li>クラスにモジュールをinclude(prepend)すると、そのクラスの継承チェーンの真上(下)にモジュールが挿入される</li>
<li>メソッドを呼び出すときには、レシーバがselfになる</li>
<li>モジュール(あるいはクラス)を定義するときには、そのモジュールがselfになる</li>
<li>インスタンス変数は常にselfのインスタンス変数とみなされる</li>
</ul>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv を update して最新のRuby バージョンをインストール[Homebrew]]]></title>
    <link href="http://morizyun.github.io/blog/rbenv-update-brew-new-ruby-version/"/>
    <updated>2015-10-25T11:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rbenv-update-brew-new-ruby-version</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774175676/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774175676&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774175676&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774175676" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />MacでRuby/Railsの開発をしていると定期的にローカルのRubyのバージョンアップをする事になります。
Homebrewでrbenv, rbenv-buildをインストールしている環境で最新の Ruby バージョンをインストールするための手順をたまに困るのでメモしておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>rbenv-buildのアップデート手順</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Homebrewをアップデート</span>
</span><span class='line'><span class="n">brew</span> <span class="n">update</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby-buildをアップデート</span>
</span><span class='line'><span class="n">brew</span> <span class="n">upgrade</span> <span class="n">ruby</span><span class="o">-</span><span class="n">build</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># インストール可能なrubyのバージョンを確認</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">install</span> <span class="o">--</span><span class="n">list</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Rubyの指定したバージョン(今回は2.2.3)をインストール</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">install</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 通常使う Rubyを設定</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">global</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 設定結果を確認</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">versions</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rbenvの新規インストール手順</h2>

<p>Macへのrbenvのインストールがまだの場合はこちらをご覧ください。</p>

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac Yosemite Rails 最新環境 詳解 構築手順 </a></strong></li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Speical Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/yujiroarai/items/56f40b0a1fecff2cd11c">brewでインストールしたrbenvをupgradeしてruby2.0.0をインストールする - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSフレームワーク Meteor 入門 & Heroku デプロイまで]]></title>
    <link href="http://morizyun.github.io/blog/meteor-heroku-deployment-tips/"/>
    <updated>2015-10-25T08:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meteor-heroku-deployment-tips</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117194/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117194&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117194&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117194" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
10/10に開催された <a href="http://www.meetup.com/de/Meteor-Tokyo/events/225464906/">JavaScript Framework - Meteor のハッカソン</a>
でいろいろ話を聞いて興味を持ち始めて、<a href="https://www.meteor.com/tutorials/blaze/creating-an-app">Meteorのチュートリアル</a>
を触って Heroku に push した時に少しハマったのでメモです。</p>

<p>Meteor は簡単に言うとクライアントもサーバーも一緒にJSで書ける、リアルタイムWebアプリケーションのためのフレームワークのようです。
チュートリアルを触るとわかりますが、SPA(シングルページアプリケーション)が簡単に作れるのは確かに感動ものです。
その代わりにデメリットとして割り切っている部分も多い印象です。</p>

<p>基本的には Meteor の特徴を理解して、「特徴にマッチする」アプリのアイデアがある時に使うことをオススメします。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Meteor 入門</h2>

<p>Meteor 入門時に参考になりそうなページはこちら。</p>

<ul>
<li><strong><a href="https://www.meteor.com/tutorials/blaze/creating-an-app">公式チュートリアル(英語)</a></strong></li>
<li><strong><a href="http://gihyo.jp/dev/serial/01/meteor">体感！JavaScriptで超速アプリケーション開発 －Meteor完全解説</a></strong></li>
<li><strong><a href="http://docs.meteor.com/#/basic/">公式ドキュメント(英語)</a></strong></li>
</ul>


<h2>Meteor Mac環境構築の手順</h2>

<p>MacのMeteorのインストール手順はこれだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://install.meteor.com/ | sh
</span></code></pre></td></tr></table></div></figure>


<p>(もしかしたら Node.jsとか、MongoDBのセットアップが必要かも知れません&#8230;)</p>

<h2>Heroku への公開</h2>

<p>公式チュートリアルがすごく良く出来ているので今回は、サンプルアプリができた時にHerokuにプッシュする手順を書いておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># サンプルアプリの作成(チュートリアルを作成済の場合は省略)</span>
</span><span class='line'>meteor create --example todos
</span><span class='line'>
</span><span class='line'><span class="c"># アプリのプロジェクトフォルダに移動</span>
</span><span class='line'><span class="nb">cd </span>todos
</span><span class='line'>
</span><span class='line'><span class="c"># git リポジトリの作成</span>
</span><span class='line'>git init
</span><span class='line'>
</span><span class='line'><span class="c"># git first commit!</span>
</span><span class='line'>git add . -A
</span><span class='line'>git commit -m <span class="s2">&quot;Sample todos app!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 一番人気のbuildpackはこちら =&gt; https://devcenter.heroku.com/articles/third-party-buildpacks</span>
</span><span class='line'><span class="c"># 一番人気のbuildpackは、残念ながらnode.jsのバージョンが少し古いので今回はforkしたものを利用</span>
</span><span class='line'><span class="c"># (0.10.40が必要だか、0.10.36が指定されている)</span>
</span><span class='line'>heroku create --buildpack https://github.com/TFarla/heroku-buildpack-meteor.git
</span><span class='line'>
</span><span class='line'><span class="c"># mongolabのアドオンを追加</span>
</span><span class='line'>heroku addons:create mongolab:sandbox
</span><span class='line'>
</span><span class='line'><span class="c"># MongoDBのURLを設定</span>
</span><span class='line'>heroku config:add <span class="nv">MONGO_URL</span><span class="o">=</span>&lt;insert_value_of_MONGOLAB_URI_here&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># MongoDBのルートURLを設定</span>
</span><span class='line'>heroku config:add <span class="nv">ROOT_URL</span><span class="o">=</span>&lt;insert_url_created_above_here&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 1つのdynoで動かすための設定</span>
</span><span class='line'>heroku labs:enable http-session-affinity
</span><span class='line'>
</span><span class='line'><span class="c"># Heroku に deploy</span>
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>これで、2015/10/12時点ではうまくいきました。多分、Meteorは頻繁にアップデートがあると思うので動かなかったら、
<a href="https://twitter.com/zyunnosuke">@zunnosuke</a>に声をかけてください！</p>

<h2>Meteorのサンプルソース</h2>

<p>触り始めたばかりですが、サンプルが結構充実しているので、サンプルを見ながらMeteorの実装を勉強していきたいと思います！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor create --list
</span><span class='line'>Available examples:
</span><span class='line'>  clock
</span><span class='line'>  leaderboard
</span><span class='line'>  localmarket
</span><span class='line'>  simple-todos
</span><span class='line'>  simple-todos-angular
</span><span class='line'>  simple-todos-react
</span><span class='line'>  todos
</span><span class='line'>
</span><span class='line'><span class="c"># こんな感じでサンプルソースを取得できます！</span>
</span><span class='line'>meteor create clock
</span><span class='line'>
</span><span class='line'><span class="c"># github にはここにあります。</span>
</span><span class='line'>https://github.com/meteor/meteor/tree/devel/examples
</span></code></pre></td></tr></table></div></figure>


<p>その他 GitHubで気になったリポジトリです。今度じっくり読んでみます。</p>

<ul>
<li><strong><a href="https://github.com/nate-strauser/wework">wework (Meteor.jsのジョブボード)</a></strong></li>
<li><strong><a href="https://github.com/DiscoverMeteor/Microscope">DiscoverMeteor/Microscope (電子書籍 Discover Meteorのサンプルソース)</a></strong></li>
<li><strong><a href="https://github.com/lpatmo/cb">lpatmo/cb (オンライン勉強会の告知サイト)</a></strong></li>
<li><strong><a href="https://github.com/meteorclub/crater.io">meteorclub/crater.io (Meteor, React, Nodeのソーシャルブックマークサイト)</a></strong></li>
<li><strong><a href="https://github.com/scotch-io/meteor-slack">scotch-io/meteor-slack (Meteor.jsのSlack Clone。英語解説記事あり)</a></strong></li>
</ul>


<h2>リンク集</h2>

<ul>
<li>WebRTCを使ったAndroidチャットアプリの紹介記事

<ul>
<li><strong><a href="http://codezine.jp/article/detail/8872">CrosswalkとMeteor.jsでチャットアプリを作成してみよう</a></strong></li>
</ul>
</li>
<li>電子書籍(Webページあり)

<ul>
<li><strong><a href="http://ja.discovermeteor.com/">Discover Meteor(日本語ですが、翻訳がまばら)</a></strong></li>
</ul>
</li>
<li>リンク集

<ul>
<li><strong><a href="https://github.com/ericdouglas/Meteor-Learning">ericdouglas/Meteor-Learning - GitHub</a></strong></li>
</ul>
</li>
<li>ノウハウ集

<ul>
<li><strong><a href="https://github.com/oortcloud/unofficial-meteor-faq">非公式FAQ (英語、少し情報が古めです)</a></strong></li>
</ul>
</li>
<li>PodCast

<ul>
<li><strong><a href="https://meteorjs.club/">Meteor Club (英語ですが、MeteorのPodcastを配信)</a></strong></li>
</ul>
</li>
<li>パッケージの調査

<ul>
<li><strong><a href="https://atmospherejs.com/">Atmosphere (パッケージの検索サイト)</a></strong></li>
<li><strong><a href="http://qiita.com/n-oshiro/items/580a58d29514c0f6b7a0">個人的にMeteorでよく使うパッケージのチートシート - Qiita</a></strong></li>
</ul>
</li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Speical Thanks</h2>

<ul>
<li><strong><a href="http://d.hatena.ne.jp/naoya/20120422/1335109615">Meteor.js - naoyaのはてなダイアリー</a></strong></li>
<li><strong><a href="http://qiita.com/m0a/items/cf7a57face7a0e264881">リアルタイムWebアプリケーションフレームワークMeteorについて</a></strong></li>
<li><strong><a href="http://qiita.com/tadfmac/items/a63bb85e5cfb12bbbfc8">JavaScript超初心者向け Meteor メモ (1)</a></strong></li>
<li><strong><a href="http://qiita.com/kobarei/items/c2df840bc02391e907a1">MeteorをHerokuにデプロイする</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor.js で 健康管理用のチェックリストアプリ healthack.me 作ってみた]]></title>
    <link href="http://morizyun.github.io/blog/healthack-meteor-sample-application/"/>
    <updated>2015-10-22T22:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/healthack-meteor-sample-application</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/1617292478/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=1617292478&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=1617292478&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=1617292478" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />先週から引き続いて、 <strong><a href="https://www.meteor.com/">Meteor.js</a></strong> を触っています。
今回は主に Meteor.js の勉強を目的に、健康管理用のチェックリストアプリ <strong><a href="http://healthack.morizyun.com">healthack.me</a></strong> を作ってみました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>動機</h2>

<p><a href="http://healthack.morizyun.com"><img src="https://farm1.staticflickr.com/652/22197382029_79ee7dd411_z.jpg" width="640" height="411"></a></p>

<p>最近買ったサプリメントが体に合わなかったみたいで、本当に数日間動けないという出来事がありました。健康の大切さを思い知らされました。
そもそものサプリ買った動機は、年をとっても効率的にコードを書き続けたいという、おっさんプログラマーの切なる願いでした。
ということで作り始めたばかりですが、「<strong><a href="http://healthack.morizyun.com">healthack.me</a></strong>」を宜しくお願いします。</p>

<h2>機能</h2>

<p>基本的には、</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor create --example todos
</span></code></pre></td></tr></table></div></figure>


<p>って言ってできたアプリから、少しずつカスタマイズしていきました。
機能としては次のようなものがあります。</p>

<pre>
* 未ログイン時のトップページ
* 新規ユーザー登録
* メールアドレスでのログイン機能
* 初回ログイン時にデフォルトのリストを登録
* リストのCRUD
* リスト内のタスクのCRUD、
* タスクのチェックは毎日自動でリセット
</pre>


<h2>Meteor.jsの感想</h2>

<p>JavaScript は苦手意識がすごく強かったですが、思ったよりもJavaScriptって素直でいいやつな印象です。
ただnpmライブラリの効率的な利用方法とか、SPAアプリの作り方とか、Meteor.jsっぽい書き方とかまだ勉強すべき点が山積みな印象です。
少しずつ勉強しながら、ブログに残していきたいと思っています。</p>

<h2>Meteor.jsの得意分野を上手く活かせるようになりたい</h2>

<p>Meteor.jsは苦手分野と得意分野がはっきりしているような気がします。
トレードオフを理解してメリットを最大限生かしていくことが大切な気がする。
そのためにもちゃんと最低限使いこなせるようになりたいものです。</p>

<p>あと、NodeやJavaScriptのエコシステムは素晴らしいのでぜひ仲良くしていきたいです。</p>

<pre>
- Electronと上手くつなぎあわせてデスクトップアプリを作る
- Cordva + ionic とつなぎあわせてスマホアプリを作る
- Amazon Lambda もJSつかえるようになったよね
- Chrome extension とかも上手くつなぎ込めないかな
</pre>


<h2>ソースコード</h2>

<p>正直見せるレベルに無いですが、せっかくなので公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/healthack">morizyun/healthack - GitHub</a></strong></p>

<p>勉強中なので、まずいとことかあったら issue で教えてほしいです。</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[読みやすいコーディングの心得[リーダブルコード]]]></title>
    <link href="http://morizyun.github.io/blog/readable-code-good-programing/"/>
    <updated>2015-10-18T09:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/readable-code-good-programing</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873115655&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873115655&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873115655" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />読みやすいコードは、一緒にコーディングするチームのためだけではなく、
自分のためにもとても重要です。今回は「読みやすいコード」を書くための要素をまとめてみました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>一番大切にすべきことは読みやすさ</h2>

<p>プログラミングでは、コードを書く時間よりもコードを読む時間の方が多くなります。
複数人で開発をしていると他人の書いたコードを読むことも増えるでしょう。
だから、コードは理解しやすさはプログラマーが最も大切にすべき指標の一つです。</p>

<p>プログラミングが読みやすければ、こんなメリットがあります。</p>

<pre>
- 他の人がコード読みやすくなって、開発する時間が増える
- コードの読み間違いが減って、バグを生み出しにくくなる
</pre>


<h2>名前で他の人が最短時間で理解できるようにコードを書く</h2>

<ul>
<li>モージュール名・クラス名・変数名を <strong>短いコメントと考えて</strong> 情報を埋め込む</li>
<li>相手に意図を伝えるために名前には、 <strong>明確な単語</strong> を選ぶ</li>
<li>エンティティの <strong>目的や値</strong> が明確になるようにする</li>
<li>変数名に <strong>値の単位や制限、危険・注意を喚起する情報</strong> を載せる</li>
<li>変数の <strong>スコープ(影響範囲)</strong> を意識する。スコープの大きな変数には長い名前をつける</li>
<li>プロジェクトや言語の規約を守る。 <strong>フォーマットをうまく活用する</strong></li>
</ul>


<h2>一貫性のあるやり方で「整形」する</h2>

<p>一貫性のあるやり方でレイアウトを揃えると、他人がソースコードをずっと理解しやすくなる。
例えば次のようなことである。</p>

<pre>
* 縦の線を真っ直ぐにする(列を整列させる)
* 適切な位置で改行する
* 並び順に一貫したルールを持つ(アルファベット順、種類別、重要度など)
* 空行を使ってコードを論理的な段落(似ているグループ)に分ける
</pre>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 例)</span>
</span><span class='line'><span class="nx">TcpConnectionSimulator</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">500</span><span class="p">,</span>  <span class="cm">/* Kbps */</span>
</span><span class='line'>  <span class="mi">80</span><span class="p">,</span>   <span class="cm">/* millisecs latency */</span>
</span><span class='line'>  <span class="mi">200</span><span class="p">,</span>  <span class="cm">/* jitter */</span>
</span><span class='line'>  <span class="mi">1</span>     <span class="cm">/* packet loss */</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コメントは書き手の意図を読み手に知らせるためにある</h2>

<p>コメントは書き手の意図を読み手に伝えるための重要な情報の一つです。
プロジェクトの規模や、言語の特性によってコメントの量は変わりますが、
大切なことは、「<strong>読み手の立場</strong>」に立ってコメントを残すことだと思います。</p>

<ul>
<li>コードからわかることをコメントに書かない</li>
<li>コードを書いている時の <strong>自分の考え</strong> を記録する</li>
<li><strong>コードの欠陥・ハマりそうな罠</strong> を知らせる(TODO/FIXME/HACK/XXXなど)</li>
<li>読む人が <strong>質問</strong> しそうなことを書いておく</li>
<li>全体像を <strong>要約</strong> したコメントを残す</li>
<li>コメントの曖昧さを排除する、動作を明確に記述する( <strong>実例</strong> を残す)</li>
</ul>


<h2>制御フローを読みやすくする</h2>

<ul>
<li>条件式は左側に <strong>変化する</strong> 値、右側にあまり <strong>変化しない</strong> 値を置く</li>
<li>基本は、if/elseを使う。三項演算子は <strong>簡潔</strong> になる時だけ使う</li>
<li>関数からできる限り <strong>早く返す</strong></li>
<li>ネストを <strong>浅くする</strong> ことで、読み手の負荷を減らす</li>
<li>巨大な式は <strong>分割</strong> して、読み手が1つ1つ飲み込めるようにする</li>
</ul>


<h2>変数と読みやすさとの関係</h2>

<ul>
<li>コードの理解を助けない邪魔な変数は作らない</li>
<li>変数の <strong>スコープを小さくする</strong> (変数が見えるコードの行数をできるだけ短くする)</li>
<li>変数を操作する場所をできるだけ減らす(イミュータブルはトラブルになる傾向が少ない)</li>
</ul>


<h2>読みやすさを意識したリファクタリング</h2>

<ul>
<li><strong>ライブラリ</strong> (標準ライブラリ、APIやパッケージ)を有効に活用する</li>
<li>ロジックを <strong>簡単な言葉</strong> で説明できるようなコードにする</li>
<li><strong>一度に1つのことだけ処理する</strong> ように関数(クラス)を分割する</li>
<li>できるだけコードを <strong>小さく保つ</strong> 、必要になるまで作らない(You Ain&#8217;t Gonna Need It./YAGNI)</li>
<li><strong>汎用的なコード</strong> を独立したライブラリにすることで、プロジェクトを小さく保つ</li>
</ul>


<h2>テストを読みやすくする</h2>

<ul>
<li><strong>テストにやさしいコードを設計</strong> する</li>
<li>テストコードもメンテナンスコストがかかる。だから、テストコードは必要なテストだけにする</li>
<li><strong>バグの発見・修正</strong> が容易になるように、エラーメッセージを読みやすくする</li>
<li>コードを効果的にテストする最も<strong>単純</strong>な入力をテストに使う</li>
<li>テストの関数に<strong>名前</strong>をつけて、何をテストしているかわかるようにする</li>
</ul>


<h2>コードを読みやすく保ち続ける</h2>

<p>本書に書いてあることと少し逆行しますが、プロジェクトが将来どんなふうに進むかを
意識してコードが「読みやすくあり続ける」ために設計・実装を行っていきたいです。
そうすることで開発しやすいコードが保ち続けられると思います！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] UIAlertViewController を複数表示できるようにする]]></title>
    <link href="http://morizyun.github.io/blog/ios-swift-uialertview-duplication/"/>
    <updated>2015-09-12T20:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ios-swift-uialertview-duplication</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798043656/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798043656&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798043656&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798043656" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Swiftで、UIAlertViewControllerを複数呼び出すと以下の様なエラーが出ます。</p>

<pre>
Warning: Attempt to present <UIAlertController: 0x155d2cc70>  on <UINavigationController: 0x155e07c50> which is already presenting <UIAlertController: 0x155d0b3a0>
</pre>


<p>これを回避するための方法のメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<p>Swift初心者なので、もう少しいい書き方があれば教えて下さい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// UIAlertController を作成
</span><span class='line'>var alertController = UIAlertController(title: "タイトル", message: "メッセージ", preferredStyle: .Alert)
</span><span class='line'>
</span><span class='line'>// すでにアラートが表示されている場合は、それを親 ViewController にする
</span><span class='line'>var baseView: UIViewController = self.window!.rootViewController!
</span><span class='line'>while baseView.presentedViewController != nil && !baseView.presentedViewController!.isBeingDismissed() {
</span><span class='line'>  baseView = baseView.presentedViewController!
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// アラートを表示
</span><span class='line'>baseView.presentViewController(alertController, animated: true, completion: nil)</span></code></pre></td></tr></table></div></figure>


<p>これでアラートが複数表示されるようになります！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/takabosoft/items/162b6d90e00b79a7e328">Objective-C - iOS8でUIAlertViewからUIAlertControllerへ置き換えるのは大変だ</a></strong></p>
]]></content>
  </entry>
  
</feed>
