<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-09T18:59:59+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dokku プライベートなherokuを作ってRailsアプリをデプロイ[DegitalOclean]]]></title>
    <link href="http://morizyun.github.io/blog/dokku-postgresql-rails-degitalocean/"/>
    <updated>2016-01-08T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/dokku-postgresql-rails-degitalocean</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00C2ONQIU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00C2ONQIU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00C2ONQIU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00C2ONQIU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
herokuライクなプライベートなPaaSを作るためのOSS『<strong><a href="https://github.com/dokku/dokku">dokku/dokku - GitHub</a></strong>』の紹介です。
このDokkuの環境は、「<strong><a href="https://www.digitalocean.com/?refcode=0da417edaeee">DegitalOclean</a></strong>」だと画面から数クリックで作成できるので、
今回は、DegitalOcleanとセットで手順を紹介します。</p>

<p>Dukkuを使うメリットは次の通りです。</p>

<ul>
<li>Heroku ライクにgitにpushしたら、BuildPack的なものを使ってRailsやNode.js, Pythonなどのアプリを展開できる</li>
<li>Dokkuは、PosgreSQLやRedis、ElasticSearchなどのプラグインを数コマンドで使える</li>
</ul>


<p>まだ簡単なアプリをBuildしただけですが、特にハマることもなく安定して使えています！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Dokkuを使うモチベーション</h2>

<p>今回Dokkuを使おうと思ったモチベーションはこちら。</p>

<pre>
- 趣味アプリでは、できるだけアプリだけに集中したい
- PosgreSQLやRedis、ElasticSearchなどのプラグインを数コマンドで使えるようになる
- Herokuの無料版の制約を気にせずにアプリ開発したい
  - 1時間以上アクセスしないとスリープになる
  - 6時間/1日はスリープ状態にしないといけない
  - 一定時間以上連続するプロセスがkillされる(はず)
- VPSやクラウドだとミドルウェアの環境構築や、デプロイのセッティングに時間がかかる
</pre>


<p>Herokuはただ乗りフリーライダーの理論ですので、基本ごめんなさいですm(<em> </em>)m
一方で個人の趣味開発は、限られた時間との勝負なのでより効率的な開発手法を模索していて今回
『<strong><a href="https://github.com/dokku/dokku">dokku/dokku - GitHub</a></strong>』を使った方法をトライすることにしました！</p>

<h2>画面からDokkuのDropletを作成</h2>

<p>「<strong><a href="https://www.digitalocean.com/?refcode=0da417edaeee">DegitalOclean</a></strong>」にログインして、Dropletを作成します。
「One-click App」 => 「Dokku v0.4.10 on 14.04」を選んでDropletを作成してください。</p>

<p><img src="https://farm2.staticflickr.com/1475/24142129302_aebd0c8997_c.jpg" width="800" height="701"></p>

<h2>ドメインの設定です。</h2>

<p>自分のDropletを作成して、IP(例 <code>123.123.123.123</code>) にブラウザでアクセス。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open 123.123.123.123</span></code></pre></td></tr></table></div></figure>


<p>以下を登録してください</p>

<pre>
- 自分のSSHキー
- Custom Domain
- アプリごとのVirtual Host名の利用(onにしていいかも)
</pre>


<p><img src="https://farm2.staticflickr.com/1536/23625078373_5f346892a0.jpg" width="500" height="435" alt="スクリーンショット 2016-01-08 22.43.36"></p>

<p>Custom Domainを登録したら、自分のdomain側の設定を修正して、<code>123.123.123.123</code> を見に行くようにしてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apps.yourdomain.com   A 123.123.123.123
</span><span class='line'>*.apps.yourdomain.com A 123.123.123.123</span></code></pre></td></tr></table></div></figure>


<h2>サーバに入ってpostgresqlのプラグインをインストール</h2>

<p>公式チュートリアルに従って、『<strong><a href="https://github.com/dokku/dokku-postgres">dokku/dokku-postgres - GitHub</a></strong>』をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ssh でサーバにログイン
</span><span class='line'>ssh root@123.123.123.123
</span><span class='line'>
</span><span class='line'># dokku の postgresql プラグインをインストール
</span><span class='line'>$ dokku plugin:install https://github.com/dokku/dokku-postgres.git
</span><span class='line'>
</span><span class='line'># PostgreSQL の 今回のアプリ用のDB を作成
</span><span class='line'>$ dokku postgres:create dokku_sample_db
</span><span class='line'>
</span><span class='line'># dokkuのアプリケーションを作成
</span><span class='line'>$ dokku app:create dokku_sample_app
</span><span class='line'>
</span><span class='line'># DBをアプリケーションとをひも付け
</span><span class='line'>dokku postgres:link dokku_sample_db dokku_sample_app</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Dokkuで使えるPluginの一覧はこちら『<strong><a href="https://github.com/dokku/dokku/blob/master/docs/plugins.md">dokku/plugins.md - Dokku</a></strong>』。</p>

<h2>Rails アプリを作成</h2>

<p>ローカルに戻ってサンプルのRailsアプリを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Railsアプリの作成
</span><span class='line'>rails new dokku_sample_app --database=postgresql --skip-test-unit --skip-bundle -m https://raw.github.com/morizyun/rails4_template/master/app_template.rb
</span><span class='line'>
</span><span class='line'># アプリのフォルダに移動
</span><span class='line'>cd dokku_sample_app
</span><span class='line'>
</span><span class='line'># Bookでscaffold
</span><span class='line'>rails g scaffold book title:string auther:string price:float</span></code></pre></td></tr></table></div></figure>


<p>routesにrootを追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config/routes.rb
</span><span class='line'>Rails.application.routes.draw do
</span><span class='line'>  # ↓ を追加
</span><span class='line'>  root 'books#index'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>.gitignore</code> から <code>config/secrets.yml</code> を削除。そして、git にコミット。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gitに登録
</span><span class='line'>git add . -A && git commit -m 'first commit'
</span><span class='line'>
</span><span class='line'># git のremote サーバを追加
</span><span class='line'>git remote add dokku dokku@apps.yourdomain.com:dokku_sample_app</span></code></pre></td></tr></table></div></figure>


<h2>ローカルからの実行系</h2>

<p>ローカルでのコマンド入力を簡単にしてくれる
「<strong><a href="https://github.com/SebastianSzturo/dokku-cli">SebastianSzturo/dokku-cli</a></strong>」
を使いつつデプロイします！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gitの情報を読んで、herokutoolbelt
</span><span class='line'>gem install dokku-cli
</span><span class='line'>
</span><span class='line'># secret keyをセット
</span><span class='line'>dokku config:set dokku_sample1 SECRET_KEY_BASE=`bundle exec rake secret`
</span><span class='line'>
</span><span class='line'># サーバにdeploy
</span><span class='line'>git push dokku master
</span><span class='line'>
</span><span class='line'># ブラウザで表示
</span><span class='line'>dokku open</span></code></pre></td></tr></table></div></figure>


<p>Railsで作成した画面が表示されれば成功です！</p>

<p><img src="https://farm2.staticflickr.com/1675/24168218261_30651ecd62.jpg" width="500" height="294" alt="スクリーンショット 2016-01-08 22.52.38"></p>

<h2>dokku-cliのコマンド</h2>

<p>以下の様なことができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># アプリ配下でコマンドを実行
</span><span class='line'>dokku run &lt;cmd&gt;   # Run a one-off command in the environment of the app
</span><span class='line'>
</span><span class='line'># よく使いそうなコマンド
</span><span class='line'>dokku ssh                                       # Start an SSH session as root user
</span><span class='line'>dokku logs [-t]                                 # Display logs for the app (-t follows)
</span><span class='line'>dokku help [COMMAND]                            # Describe available commands or one specific command
</span><span class='line'>
</span><span class='line'># 設定変更系のコマンド
</span><span class='line'>dokku config                                    # Display the app's environment variables
</span><span class='line'>dokku config:get KEY                            # Display an environment variable value
</span><span class='line'>dokku config:set KEY1=VALUE1 [KEY2=VALUE2 ...]  # Set one or more environment variables
</span><span class='line'>dokku config:set:file &lt;path/to/file&gt;            # Set one or more environment variables from file
</span><span class='line'>dokku config:unset KEY1 [KEY2 ...]              # Unset one or more environment variables
</span><span class='line'>
</span><span class='line'># プロセス/コンテナ系のコマンド
</span><span class='line'>dokku ps           # List processes running in app container(s)
</span><span class='line'>dokku ps:rebuild   # Rebuild the app
</span><span class='line'>dokku ps:restart   # Restart the app container
</span><span class='line'>dokku ps:start     # Start the app container
</span><span class='line'>
</span><span class='line'># その他便利コマンド
</span><span class='line'>dokku nginx:build                               # (Re)builds nginx config for the app
</span><span class='line'>dokku open                                      # Open the app in your default browser
</span><span class='line'>dokku url                                       # Show the first URL for the app
</span><span class='line'>dokku urls                                      # Show all URLs for the app</span></code></pre></td></tr></table></div></figure>


<h2>DokkuのミドルウェアPlugin</h2>

<p>PostgreSQLだけでなく、RedisやElasticsearch等のPluginも数コマンドで使うことができるようになります。
公式サポートされているものだけでも次のようなものがあります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CouchDB (beta)
</span><span class='line'>Elasticsearch (beta)
</span><span class='line'>MariaDB (beta)
</span><span class='line'>Memcached (beta)
</span><span class='line'>Mongo (beta)
</span><span class='line'>MySQL (beta)
</span><span class='line'>Nats (beta)
</span><span class='line'>Postgres (beta)
</span><span class='line'>RabbitMQ (beta)
</span><span class='line'>Redis (beta)
</span><span class='line'>RethinkDB (beta)
</span><span class='line'>Copy Files to Image
</span><span class='line'>HTTP Auth (beta)
</span><span class='line'>Let's Encrypt (beta)
</span><span class='line'>Maintenance mode (beta)
</span><span class='line'>Redirect (beta)</span></code></pre></td></tr></table></div></figure>


<p>また公式サポートされているPlugin以外にもコミュニティや個人が様々なPluginを提供しています。
詳しくは、『<a href="https://github.com/dokku/dokku/blob/master/docs/plugins.md">dokku/plugins.md - GitHub</a>**』を見てみてください。</p>

<h2>感想</h2>

<p>まだ、簡単なアプリをデプロイしただけなので、もう少し色々試した上でですが、今のところの感触はかなりありな気がします＾＾</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thank</h2>

<ul>
<li><strong><a href="http://dokku.viewdocs.io/dokku/application-deployment/">Dokku - The smallest PaaS implementation you&#8217;ve ever seen</a></strong></li>
<li><strong><a href="http://blog.mochromatic.com/2014/12/17/setting-up-dokku-on-digital-ocean/">Setting up Dokku on Digital Ocean</a></strong></li>
<li><strong><a href="http://donpottinger.net/blog/2014/11/17/bye-bye-heroku-hello-dokku.html">Bye Bye Heroku, Hello Dokku: Migrating a Rails App from Heroku to Dokku (Part 1) | by @donpottinger</a></strong></li>
<li><strong><a href="http://donpottinger.net/blog/2014/11/22/bye-bye-heroku-hello-dokku-part-2.html">Bye Bye Heroku, Hello Dokku: Migrating a Rails App from Heroku to Dokku (Part 2) | by @donpottinger</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scenic RailsでMaterialized Viewを使う]]></title>
    <link href="http://morizyun.github.io/blog/materialized-view-rails-soic/"/>
    <updated>2016-01-06T22:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/materialized-view-rails-soic</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00NM7VROQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00NM7VROQ&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00NM7VROQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00NM7VROQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
RailsでPostgreSQLのビュー(View)やマテリアライズド・ビュー(Materialized View)を使うためのGem「<strong><a href="https://github.com/thoughtbot/scenic">thoughtbot/scenic</a></strong>」の紹介です。
thoughtbot謹製なので、安心して使えそうなのも魅力です！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>PostgreSQLのViewとMaterialized View</h2>

<p>PostgreSQLのViewとMaterialized Viewの大まかかな説明は次の通りです。</p>

<h3>View(ビュー)について</h3>

<ul>
<li>ViewとはSQLで構成された実態のな仮想的なテーブルのこと。Viewの作成時にSQLを定義する</li>
<li>Viewを呼び出すとSQLが即時実行される</li>
<li>最新の情報を常に取得できるが、SQLが複雑だったり、レコードが多いと負荷がかかる</li>
</ul>


<h3>Materialized View(マテリアライズド・ビュー)について</h3>

<ul>
<li>実態を持ったViewのことである。作成するときにSQLの実行結果のテーブルを作る</li>
<li>最新の情報を反映するためにはリフレッシュ処理を行う必要がある</li>
<li>SQLが複雑だったり、レコードが多い処理の負荷を下げるのに有効なアプローチである</li>
</ul>


<h2>PostgreSQLのMaterialized Viewの機能</h2>

<p>『<strong><a href="http://goo.gl/WiA4wK">RailsでPostgreSQLのマテリアライズドビューを使う | 日々雑記</a></strong>』にある通り、
PosgreSQLにはリフレッシュ時にSELECTコマンドを発行した時にロックされて応答が遅延しないように、<code>CONCURRENTLY</code>
というパラメータをつけるといいようです！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REFRESH MATERIALIZED VIEW CONCURRENTLY materialized_view;</span></code></pre></td></tr></table></div></figure>


<h2>Gemのインストール</h2>

<p>ではいよいよ、Viewを扱いやすくするGem「<strong><a href="https://github.com/thoughtbot/scenic">thoughtbot/scenic</a></strong>」の紹介です。</p>

<p><code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># View &amp; Materialized View (GitHubじゃないとちょっと古い気がします)</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;scenic&#39;</span><span class="p">,</span> <span class="n">git</span><span class="p">:</span> <span class="s1">&#39;git@github.com:thoughtbot/scenic.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fake Data(サンプルデータを作るために使います)</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;faker&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Viewを作成するためのModelを作成</h2>

<p>まずは、Viewを作成するための元となるテーブルをScaffoldで作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 新しい Rails プロジェクトを作成</span>
</span><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="kp">new</span> <span class="n">scenic_sample</span>
</span><span class='line'><span class="err">$</span> <span class="n">cd</span> <span class="n">scenic_sample</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># scaffoldで一通り作成</span>
</span><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">scaffold</span> <span class="n">book</span> <span class="n">title</span><span class="ss">:string</span> <span class="n">author</span><span class="ss">:string</span> <span class="n">price</span><span class="ss">:float</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にサンプルデータを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db/seeds.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;faker&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>      <span class="n">title</span><span class="p">:</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>      <span class="n">author</span><span class="p">:</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>      <span class="n">price</span><span class="p">:</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Commerce</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ではテーブルを作って、テストデータを投入します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># テーブルを作成</span>
</span><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># テストデータを投入</span>
</span><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:seed</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでサンプルデータが作成されました。</p>

<h2>いよいよマテリアライズド・ビューを作成</h2>

<p>次にマテリアライズド・ビューを作成します。</p>

<p>今回は$50以上のBookを<code>ExpensiveBook</code>として、それを抽出するテーブルにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ExpensiveBookの作成</span>
</span><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">scenic</span><span class="ss">:model</span> <span class="n">expensive_book</span> <span class="o">--</span><span class="n">materialized</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">active_record</span>
</span><span class='line'>      <span class="n">create</span>    <span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">expensive_book</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">rspec</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">expensive_book_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>      <span class="n">factory_girl</span>
</span><span class='line'>      <span class="n">create</span>        <span class="n">spec</span><span class="o">/</span><span class="n">factories</span><span class="o">/</span><span class="n">expensive_books</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">db</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">expensive_books_v01</span><span class="o">.</span><span class="n">sql</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">db</span><span class="o">/</span><span class="n">migrate</span><span class="o">/</span><span class="mi">20160106124232</span><span class="n">_update_expensive_books</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<h2>マテリアライズド・ビューのSQL</h2>

<p>そんなマテリアライズド・ビューのSQLがこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="n">db</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">expensive_books_v01</span><span class="p">.</span><span class="k">sql</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="n">books</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>  <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">50</span><span class="p">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはリフレッシュ時に<code>CONCURRENTLY</code>を使うために、UNIQ INEXを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db/migrate/20160106123247_create_expensive_books.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateExpensiveBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_view</span> <span class="ss">:expensive_books</span><span class="p">,</span> <span class="n">materialized</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="c1"># 追加</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:expensive_books</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ではマテリアライズド・ビューを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span><span class='line'><span class="o">==</span> <span class="mi">20160106123247</span> <span class="no">CreateExpensiveBooks</span><span class="p">:</span> <span class="n">migrating</span> <span class="o">=============================</span>
</span><span class='line'><span class="o">--</span> <span class="n">create_view</span><span class="p">(</span><span class="ss">:expensive_books</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0272</span><span class="n">s</span>
</span><span class='line'><span class="o">==</span> <span class="mi">20160106123247</span> <span class="no">CreateExpensiveBooks</span><span class="p">:</span> <span class="n">migrated</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mo">0272</span><span class="n">s</span><span class="p">)</span> <span class="o">====================</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じのSQLが実行されたようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">VIEW</span> <span class="k">public</span><span class="p">.</span><span class="n">expensive_books</span> <span class="k">AS</span> <span class="k">SELECT</span> <span class="n">books</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">books</span><span class="p">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>    <span class="n">books</span><span class="p">.</span><span class="n">author</span><span class="p">,</span>
</span><span class='line'>    <span class="n">books</span><span class="p">.</span><span class="n">price</span><span class="p">,</span>
</span><span class='line'>    <span class="n">books</span><span class="p">.</span><span class="n">created_at</span><span class="p">,</span>
</span><span class='line'>    <span class="n">books</span><span class="p">.</span><span class="n">updated_at</span>
</span><span class='line'>   <span class="k">FROM</span> <span class="n">books</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="p">(</span><span class="n">books</span><span class="p">.</span><span class="n">price</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="mi">50</span><span class="p">.</span><span class="mi">0</span><span class="p">)::</span><span class="n">double</span> <span class="k">precision</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>SQLを変更する場合は、<code>rails g scenic:view expensive_book</code> とすれば変更用のSQLのmigrationファイル生成されます。</p>

<h2>マテリアライズド・ビューのModelファイル</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ExpensiveBook</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># find_by!とかを使う場合はprimary_keyが必要なので</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">primary_key</span> <span class="o">=</span> <span class="ss">:id</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># このメソッドを実行するとマテリアライズド・ビューが更新される</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">refresh</span>
</span><span class='line'>    <span class="no">Scenic</span><span class="o">.</span><span class="n">database</span><span class="o">.</span><span class="n">refresh_materialized_view</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">concurrently</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="c1"># マテリアライズド・ビューは書き込みができないので読み込み専用のViewとして作成</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">readonly?</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一点GemのREADMEに書いていた注意点として、リフレッシュ時のパラメータに<code>concurrently: true</code>とした場合
はlockがかからないけど、<code>PostgreSQL 9.4 以上 &amp;&amp; uniq index</code> が必須なので注意してください。</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="https://github.com/stympy/faker">stympy/faker - GitHub</a></strong></li>
<li><strong><a href="http://qiita.com/yaotti/items/510779877e515a1155db">Ruby - Gemfileでのgem指定色々 - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zoho Mail 無料で独自ドメインのメールの送受信をスタートできる [POP/STMP対応]]]></title>
    <link href="http://morizyun.github.io/blog/zoho-mail-original-domain-pop-smtp-free/"/>
    <updated>2016-01-05T21:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/zoho-mail-original-domain-pop-smtp-free</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00T5ZGX0W/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00T5ZGX0W&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00T5ZGX0W&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00T5ZGX0W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
自分で購入した独自ドメインのメールアドレスを無料使えるサービス『<strong><a href="https://www.zoho.com/">Zoho Mail</a></strong>』の紹介です。</p>

<p>Zoho Mail側にもメールの送受信を行うWeb画面があります。また、POPやSTMPがあるのでGmailやクライアントアプリでもメールの送受信を行う事もできます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>目次</h2>

<pre>
1) 独自ドメインの取得
2) Zoho Mailでユーザー登録
3) Zoho Mailでメール受信設定
4) 必要に応じてメールアドレスを追加
5) 必要に応じてPOP/STMPを設定
</pre>


<h2>1) 独自ドメインの取得</h2>

<p><strong><a href="http://muumuu-domain.com/">初心者でも簡単!ドメイン取得は 【ムームードメイン】</a></strong>などでドメインを取得。</p>

<h2>2) Zoho Mailでユーザー登録</h2>

<p><strong><a href="https://www.zoho.com/">Zoho Mail</a></strong>でユーザー登録。料金プラン(liteが無料)を設定します。</p>

<h2>3) Zoho Mailでメール受信設定</h2>

<p>ZohoでMailを受け取れるようになるまでの手順です。</p>

<pre>
A) 右メニューのコントロールパネル => ドメインを選択
B) ドメイン追加を選択
C) Zohoで指定されたTXTレコードをムームードメインに設定して、ドメインの認証
D) メールアカウント(ユーザー)の作成
D) Zohoで指定されたMXレコードをムームドメインに設定
E) Zohoで指定されたSPFレコードをムームドメインに設定
</pre>


<p>もしここで詰まるようなら以下のサイトを参考にしてみてください。</p>

<p><strong><a href="http://appstars.jp/archive/123">無料で独自ドメインのメールを使えるようにする - あぷすた</a></strong></p>

<p><strong><a href="http://www.workabroad.jp/tech/559">独自ドメインをZohoで使う。Google Appsが有料なので（泣） | Workabroad.jp</a></strong></p>

<h2>4) 必要に応じてメールアドレスを追加</h2>

<p>さらにメールアドレスを追加する場合は、POP/STMPの機能もあるのでユーザーを追加していくのがオススメです。</p>

<h2>5) 必要に応じてPOP/STMPを設定</h2>

<p>ちょっとマニアックな話ですが、Zoho MailにはPOP/STMPも完備されています。
設定方法はこちら。</p>

<p><strong><a href="https://www.zoho.com/mail/help/pop-access.html">Zoho Mail - POP configuration</a></strong></p>

<p>こちらをGmail側に設定すると独自ドメインをGmailで受け取って運用できます！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch Sever勉強メモ 基本的な概念や基本API、マッピングについて]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-server-basic-api/"/>
    <updated>2016-01-04T23:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-server-basic-api</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00J4KDYZU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00J4KDYZU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00J4KDYZU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00J4KDYZU&amp;linkCode=as2&amp;tag=morizyun00-22">Elasticsearch Sever</a></strong>』を読んで勉強をしたことの俺得メモです。今回は基本的な概念や基本API、マッピングについてです。</p>

<p>英語ですが、公式ドキュメント『<strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch Reference [2.1]</a></strong>』も充実しているのでななめ読みしています！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>curlを使うときに便利なjq</h2>

<p>コマンドラインでのJSONの整形に「<strong><a href="https://stedolan.github.io/jq/">jq</a></strong>」が便利でした。良かったらぜひ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install jq</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでcurlの結果をパイプで渡すと、結果を見やすく整形してくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XPUT http://localhost:9200/post -d '{ "title" : "manual post title 1", "body" : "manual post body 1" }' | jq</span></code></pre></td></tr></table></div></figure>


<p>詳しい使い方は公式のチュートリアル『<strong><a href="https://stedolan.github.io/jq/tutorial/">Tutorial - jq</a></strong>』あたりがおすすめです</p>

<h2>Elasticsearch の基本概念</h2>

<h3>Elasticsearchの論理的な構成要素</h3>

<p>検索で使うデータの構成要素のイメージ。</p>

<pre>
- インデックス
  - ドキュメントの集合体。リレーショナルDBのテーブルのようなもの。格納された値は、全文検索に最適化される。
- ドキュメントタイプ
  - 1つのインデックス内に複数のオブジェクトを格納できる。その区分のこと。
- ドキュメント
  - リレーショナルDBのレコードのようなもの。型(type)は自動で決まることも、強制することもできる
</pre>


<h3>Elasticsearchの物理的な構成要素</h3>

<p>インデックスを物理的に構成する要素。</p>

<pre>
- クラスタ(cluster)
  - 複数サーバで協調して動かした場合のサーバ群をクラスタと呼ぶ。
- ノード(node)
  Elasticsearchのプロセスをノードと呼ぶ。クラスタの構成要素。
- シャード(shard)
  - 大量のドキュメントを処理するために、小さな部分インデックスに分割して複数のサーバに格納する。これをシャードという。
  - デフォルトでは5つのPrimary Shardと各Primary Shardごとに1つのReplica Shardに分類される
  - Primary Shard
    - インデックスの書き込みと参照処理で利用される
  - Replica Shard
    - クエリのスループットや高可用性を実現するためにシャードを完全にコピーしたレプリカを作ることができる
    - クラスタ内では自動的にプライマリとなるシャードを選定することができる
</pre>


<p><code>Replica Shard</code>は動的に数を変更可能だが、<code>Primary Shard</code>は一度インデックスを作成すると変更できません。</p>

<h2>Elasticsearchの基本的なAPI</h2>

<p>Elasticsearchはいろんな操作を行うためのAPIがそろっています。いくつか触りを紹介します。</p>

<pre>
- インスタンス情報に関するAPI
  - curl -XGET http://localhost:9200/

- インデックス(データの論理的な構造)の操作に関するAPI
  - インデックスの作成
    - curl -XPOST http://localhost:9200/post
  - インデックスの構造取得
    - curl -XGET http://localhost:9200/post
  - インデックスの削除
    - curl -XDELETE http://localhost:9200/post

- ドキュメント(インデックスの中のデータ)の操作に関するAPI
  - ドキュメントの新規作成
    - curl -XPOST http://localhost:9200/post/post -d '{ "id" : 1, "title" : "manual post title 1" }'
  - ドキュメントの更新
    - curl -XPUT http://localhost:9200/post/1 -d '{ "id" : 1, "title" : "manual post title 1" }'
  - ドキュメントの取得
    - curl -XGET http://localhost:9200/post/1
  - ドキュメントの削除
    - curl -XDELETE http://localhost:9200/post/1
</pre>


<h2>マッピングについて</h2>

<p>スキーママッピングとは、インデックスの構造を定義を行うことです。</p>

<p>公式ドキュメント「<strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">Mapping | Elasticsearch</a></strong>」がおすすめ。</p>

<h3>マッピングファイルの作成</h3>

<p>マッピング情報を格納する <code>blog.json</code> を作成します。</p>

<p>構造として配下のようになっています。</p>

<pre>
- ドキュメントタイプ : articles (記事)
- articles のフィールド情報
  - id : 一意の識別子(整数型)
  - title: タイトル(文字列)
</pre>


<p>では実際のファイルです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">#</span> <span class="err">blog.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mappings&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;articles&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;long&quot;</span><span class="p">,</span> <span class="nt">&quot;store&quot;</span> <span class="p">:</span> <span class="s2">&quot;yes&quot;</span> <span class="p">},</span>
</span><span class='line'>                <span class="nt">&quot;title&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="nt">&quot;store&quot;</span> <span class="p">:</span> <span class="s2">&quot;yes&quot;</span><span class="p">,</span> <span class="nt">&quot;index&quot;</span> <span class="p">:</span> <span class="s2">&quot;analyzed&quot;</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ファイルを作ったら以下のコマンドでインデックス作成 &amp; マッピングの定義を実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">-XPOST</span> <span class="err">&#39;http://localhost:</span><span class="mi">9200</span><span class="err">/blog&#39;</span> <span class="err">-d</span> <span class="err">@blog.json</span> <span class="err">|</span> <span class="err">jq</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@blog.json</code> は curl の <code>blog.json</code> を指定するための設定。</p>

<h3>マッピングのフィールドの型定義</h3>

<p>触りだけだけどこんな感じの基本型(Core Type)がある。</p>

<pre>
- String : 文字列。アナライザを細かく指定できる。
- Number : 数値。floatやdoubleなどの方がある。
- Date : 日付。フォーマットはいろいろ指定できる。
- Booelean : 真偽値を扱う。
- Binary : BASE64形式のバイナリデータ。画像などを格納するために使う。
</pre>


<p>それぞれの型情報に対して、更に属性情報を定義できる。</p>

<p>以下は共通的な型情報です。</p>

<pre>
- index
  - "analyzed" => 検索可能なフィールド
  - "no" => 検索できないフィールド
  - "not_analized" => アナライザによって処理されないが、完全一致での検索はできる
- store
  - "yes" フィールドにインデックスの元の値を保存する
  - "no" フィールドにインデックスの元の値を保存しない。_sourceを使うと値を取得できる。
- boost
  - フィールドがドキュメントでどのくらい重要かを表す
- null_value
  - 値がない場合に、デフォルトで登録される値
- include_in_all
  - フィールドが _allに含まれるかどうかを設定するフィールド
</pre>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearchを使ったRailsサンプルアプリの作成]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-rails-tutorial/"/>
    <updated>2016-01-03T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-rails-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00J4KDYZU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00J4KDYZU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00J4KDYZU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
検索機能を実装するときによく使われているElasticsearchをRailsで使うためのサンプルアプリの作成の手順を作りました。入門レベルです！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Elasticsearchの導入</h2>

<p>拙著『<strong><a href="http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac/">Elasticsearch 2.1 + Kibana 4.1 + Marvel のMacへのセットアップ</a></strong>』を良ければご参考ください。</p>

<h2>Rails サンプルアプリ</h2>

<p>Railsのサンプルアプリを作成します。今回は <code>Article</code>(記事) のモデルを持つことにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Railsアプリの作成
</span><span class='line'>rails new elasticsearch_sample --skip-bundle
</span><span class='line'>
</span><span class='line'># フォルダを移動
</span><span class='line'>cd elasticsearch_sample
</span><span class='line'>
</span><span class='line'># DBの作成
</span><span class='line'>rake db:create
</span><span class='line'>
</span><span class='line'># article テーブルの定義を作成
</span><span class='line'>bundle exec rails g scaffold article title:string body:text
</span><span class='line'>
</span><span class='line'># article テーブルを作成
</span><span class='line'>bundle exec rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>GemfileにElasticsearch用のgemを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Elasticsearch</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;elasticsearch-model&#39;</span><span class="p">,</span> <span class="n">git</span><span class="p">:</span> <span class="s1">&#39;git://github.com/elasticsearch/elasticsearch-rails.git&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;elasticsearch-rails&#39;</span><span class="p">,</span> <span class="n">git</span><span class="p">:</span> <span class="s1">&#39;git://github.com/elasticsearch/elasticsearch-rails.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加したらターミナルで以下のコマンドを実行してgemをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">jobs</span><span class="o">=</span><span class="mi">4</span> <span class="o">--</span><span class="n">path</span><span class="o">=</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ModelにElasticsearchを使うための設定</h2>

<p>次に<code>Article</code>モデルにElasticsearchを使うための設定をします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/article.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ArticleSearchable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はconcernにElasticsearchに関する処理を切り出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/concerns/article_searcable.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ArticleSearchable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Elasticsearch</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># インデックスするフィールドの一覧</span>
</span><span class='line'>    <span class="no">INDEX_FIELDS</span> <span class="o">=</span> <span class="sx">%w(title body)</span><span class="o">.</span><span class="n">freeze</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># インデックス名</span>
</span><span class='line'>    <span class="n">index_name</span> <span class="s2">&quot;es_sample_article_</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># マッピング情報</span>
</span><span class='line'>    <span class="n">settings</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">mappings</span> <span class="n">dynamic</span><span class="p">:</span> <span class="s1">&#39;false&#39;</span> <span class="k">do</span> <span class="c1"># 動的にマッピングを生成しない</span>
</span><span class='line'>        <span class="n">indexes</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">analyzer</span><span class="p">:</span> <span class="s1">&#39;kuromoji&#39;</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>        <span class="n">indexes</span> <span class="ss">:body</span><span class="p">,</span>  <span class="n">analyzer</span><span class="p">:</span> <span class="s1">&#39;kuromoji&#39;</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># インデックスするデータを生成</span>
</span><span class='line'>    <span class="c1"># @return [Hash]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">as_indexed_json</span><span class="p">(</span><span class="n">option</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">as_json</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">_</span><span class="o">|</span> <span class="no">INDEX_FIELDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># indexの作成メソッド</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_index!</span>
</span><span class='line'>      <span class="n">client</span> <span class="o">=</span> <span class="n">__elasticsearch__</span><span class="o">.</span><span class="n">client</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="n">indices</span><span class="o">.</span><span class="n">delete</span> <span class="n">index</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">index_name</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="n">indices</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">index</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">index_name</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">body</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                                <span class="n">settings</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">to_hash</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">mappings</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">mappings</span><span class="o">.</span><span class="n">to_hash</span>
</span><span class='line'>                            <span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>インデックス名には環境情報をつけておきます。</p>

<p>理由はlocalでのテストをしやすくするためです。</p>

<h2>index作成のrakeタスクを作成</h2>

<p>続いてindexを作成するrake タスクを作ります。</p>

<p>まずはrakeタスクを作成するために、以下のコマンドをターミナルで実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">task</span> <span class="n">elasticsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>作成されたrakeタスクを以下の様に変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/elasticsearch.rake</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:elasticsearch</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Elasticsearch のindex作成&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:create_index</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Article</span><span class="o">.</span><span class="n">create_index!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Article を Elasticsearch に登録&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:import_article</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Article</span><span class="o">.</span><span class="n">import</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ではインデックスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">elasticsearch</span><span class="ss">:create_index</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:9200/_plugin/head/</code> にアクセスして「es_sample_article_development => info => Metadata」
の中身が以下の様になっていたら成功です！</p>

<p><img src="https://farm2.staticflickr.com/1510/24062169671_9781dc7e17_z.jpg" width="556" height="640"></p>

<p>ちなみに、curlコマンドでもマッピングを確認できます。
ターミナルで以下のコマンドを実行してみてください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="no">XGET</span> <span class="s1">&#39;localhost:9200/es_sample_article_development/_mapping/article?pretty=true&#39;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;es_sample_article_development&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;mappings&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;article&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;dynamic&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;body&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;analyzer&quot;</span> <span class="p">:</span> <span class="s2">&quot;kuromoji&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;title&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;analyzer&quot;</span> <span class="p">:</span> <span class="s2">&quot;kuromoji&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルデータの作成</h2>

<p>サンプルデータを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db/seeds.rb</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ===========================</span>
</span><span class='line'>  <span class="c1"># 記事(Article)</span>
</span><span class='line'>  <span class="c1"># ===========================</span>
</span><span class='line'>  <span class="no">Article</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">idx</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Article</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
</span><span class='line'>        <span class="n">title</span><span class="p">:</span> <span class="s2">&quot;タイトル </span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">body</span><span class="p">:</span> <span class="s2">&quot;本文 </span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elasticsearchにデータを登録します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># サンプルデータの生成</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:seed</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Elasticsearchへの登録</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">elasticsearch</span><span class="ss">:import_article</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:9200/_plugin/head/</code> から「Structured Query」を選択して色々いじるとデータが格納されていることがわかると思います！</p>

<p><img src="https://farm2.staticflickr.com/1607/24037229962_fc29541c95.jpg" width="500" height="346"></p>

<p>ちなみに、<code>rails console</code> からでも色々試せるのでぜひ色々遊んでみてください！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Article</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;9&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="c1">#=&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="no">Article</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;9&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Elasticsearch::Model::Response::Result:0x007fb7ebac0a08 @result=#&lt;Hashie::Mash _id=&quot;10&quot; _index=&quot;es_sample_article_development&quot; _score=1.1972358 _source=#&lt;Hashie::Mash body=&quot;本文 9&quot; created_at=&quot;2016-01-03T11:02:46.578Z&quot; id=10 title=&quot;タイトル 9&quot; updated_at=&quot;2016-01-03T11:02:46.578Z&quot;&gt; _type=&quot;article&quot;&gt;&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Article</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">query</span><span class="p">:</span> <span class="p">{</span><span class="n">term</span><span class="p">:</span> <span class="p">{</span><span class="n">title</span><span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">}</span> <span class="p">})</span><span class="o">.</span><span class="n">records</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="c1">#=&gt; Article Load (0.1ms)  SELECT &quot;articles&quot;.* FROM &quot;articles&quot; WHERE &quot;articles&quot;.&quot;id&quot; = 6</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Article id: 6, title: &quot;タイトル 5&quot;, body: &quot;本文 5&quot;, created_at: &quot;2016-01-03 11:02:46&quot;, updated_at: &quot;2016-01-03 11:02:46&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>とりあえず一覧の検索を実装</h2>

<p><code>articles_controller</code> の <code>index</code> を以下のように変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/articles_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@articles</span> <span class="o">=</span><span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">]</span>
</span><span class='line'>                 <span class="no">Article</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">records</span>
</span><span class='line'>               <span class="k">else</span>
</span><span class='line'>                 <span class="no">Article</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>               <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>viewも以下を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/articles/index.html.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= form_tag articles_path, :method =</span><span class="o">&gt;</span> <span class="ss">:get</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= text_field_tag :search, params[:search] %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= submit_tag &#39;Search&#39;, :name =</span><span class="o">&gt;</span> <span class="kp">nil</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:3000/articles</code> にアクセスすれば検索できると思います！</p>

<p><img src="https://farm6.staticflickr.com/5799/24038700492_75081a1440.jpg" width="500" height="317"></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/k-shogo/items/8657e0a5fdf20a25bba0">Ruby - railsから全文検索エンジンelasticsearchを利用する - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/moriyaman/items/373107a3870c33229bac">既存のRailsアプリの検索にElasticSearchを導入してみる - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/yuku_t/items/d749111f589c88c8315b">Elasticsearch - Qiitaがquery-stringっぽい構文を自前実装した理由 - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rails - Rakeタスクをつくる - Qiita</a></strong></li>
<li><strong><a href="http://ruby-rails.hatenadiary.com/entry/20151018/1445142266">RailsでElasticsearch: 全文検索を実装 - Rails Webook</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 2.1 + Kibana 4.3 + Marvel のMacへのセットアップ]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac/"/>
    <updated>2016-01-02T21:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00MPDUQQI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00MPDUQQI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00MPDUQQI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00MPDUQQI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Mac Yosemiteに以下の環境構築する手順をまとめました！</p>

<ul>
<li>全文検索エンジンの『<strong><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch 2.1</a></strong>』</li>
<li>Elasticsearchのデータ表示のツール『<strong><a href="https://www.elastic.co/products/kibana">Kibana 4.3.1</a></strong>』</li>
<li>Elasticsearchの管理ツール『<strong><a href="https://www.elastic.co/products/marvel">Marvel</a></strong>』</li>
</ul>


<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Elasticsearchとは</h2>

<p>ElasticSearchは、Apache Lucene 上で稼働するオープンソースの全文検索システムのことです。
REST APIを使うことができ、jsonでやり取りを行う事ができる。</p>

<h2>Elasticsearch のインストール</h2>

<p>Macの場合は、まずはJavaのインストールです。
<strong><a href="http://www.amazon.co.jp/gp/bestsellers/computers/2151977051/ref=pd_zg_hrsr_computers_1_3_last">Java SE - Downloads | Oracle</a></strong>
からファイルをダウンロードして、インストールします。</p>

<p>次に『<strong><a href="https://www.elastic.co/downloads/past-releases/">Download Elasticsearch | Elastic</a></strong>』からファイルをダウンロードします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">elasticsearch</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 自動起動の設定</span>
</span><span class='line'><span class="n">ln</span> <span class="o">-</span><span class="n">sfv</span> <span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">elasticsearch</span><span class="o">/*.</span><span class="n">plist</span> <span class="o">~</span><span class="sr">/Library/</span><span class="no">LaunchAgents</span>
</span><span class='line'><span class="n">launchctl</span> <span class="nb">load</span> <span class="o">~</span><span class="sr">/Library/</span><span class="no">LaunchAgents</span><span class="o">/</span><span class="n">homebrew</span><span class="o">.</span><span class="n">mxcl</span><span class="o">.</span><span class="n">elasticsearch</span><span class="o">.</span><span class="n">plist</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:9200/_plugin/head/</code>が見れたら動いていると思います！</p>

<p><img src="https://farm2.staticflickr.com/1600/24036707412_4258a9701a.jpg" width="500" height="376"></p>

<h2>日本語対応で elasticsearch-analysis-kuromoji をインストール</h2>

<p>ターミナルで以下を実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plugin</span> <span class="n">install</span> <span class="n">analysis</span><span class="o">-</span><span class="n">kuromoji</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vi /usr/local/etc/elasticsearch/elasticsearch.yml</code>でファイルを開いて以下を追加。デフォルトで kurmoji を使うようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">################################## Custom ################################</span>
</span><span class='line'><span class="c1"># Using kuromoji in default</span>
</span><span class='line'><span class="n">index</span><span class="o">.</span><span class="n">analysis</span><span class="o">.</span><span class="n">analyzer</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">type</span><span class="p">:</span> <span class="n">custom</span>
</span><span class='line'><span class="n">index</span><span class="o">.</span><span class="n">analysis</span><span class="o">.</span><span class="n">analyzer</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">:</span> <span class="n">kuromoji_tokenizer</span>
</span></code></pre></td></tr></table></div></figure>


<p>ということでElasticsearchを再起動します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">launchctl</span> <span class="n">unload</span> <span class="o">~</span><span class="sr">/Library/</span><span class="no">LaunchAgents</span><span class="o">/</span><span class="n">homebrew</span><span class="o">.</span><span class="n">mxcl</span><span class="o">.</span><span class="n">elasticsearch</span><span class="o">.</span><span class="n">plist</span>
</span><span class='line'><span class="n">launchctl</span> <span class="nb">load</span> <span class="o">~</span><span class="sr">/Library/</span><span class="no">LaunchAgents</span><span class="o">/</span><span class="n">homebrew</span><span class="o">.</span><span class="n">mxcl</span><span class="o">.</span><span class="n">elasticsearch</span><span class="o">.</span><span class="n">plist</span>
</span></code></pre></td></tr></table></div></figure>




<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>データビジュアライゼーション Kibana</h2>

<p>ミーハーなので データのビジュアライゼーションツール『<strong><a href="https://www.elastic.co/products/kibana">Kibana</a></strong>』
もインストールします。後で使うかもくらいですww</p>

<p>まずはnodeとnmpが必要となります。もしまだの場合は、
『<strong><a href="http://qiita.com/tagosaku324/items/bf1fe149c38c99728c72">macでNode.jsの環境設定 - Qiita</a></strong>』
を参考にしながらインストールしてみてください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 最新版のURLに置き換えてください</span>
</span><span class='line'><span class="n">wget</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">download</span><span class="o">.</span><span class="n">elastic</span><span class="o">.</span><span class="n">co</span><span class="o">/</span><span class="n">kibana</span><span class="o">/</span><span class="n">kibana</span><span class="o">/</span><span class="n">kibana</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="n">darwin</span><span class="o">-</span><span class="n">x64</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
</span><span class='line'><span class="n">tar</span> <span class="n">zxvf</span> <span class="n">kibana</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="n">darwin</span><span class="o">-</span><span class="n">x64</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
</span><span class='line'><span class="n">mv</span> <span class="n">kibana</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="n">darwin</span><span class="o">-</span><span class="n">x64</span> <span class="n">kibana</span>
</span><span class='line'><span class="n">cd</span> <span class="n">kibana</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># kibana のサーバを起動</span>
</span><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">kibana</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:5601/</code> にアクセスするとKibanaの画面が見れると思います。</p>

<p><img src="https://farm6.staticflickr.com/5659/23996427772_e8904e5b3a.jpg" width="500" height="340"></p>

<p>こんな感じの画面が見れれば成功だと思います！</p>

<h2>Elasticsearchの管理プラグイン Mervel</h2>

<p>つづいて、Elasticsearchの管理プラグイン「<strong><a href="https://www.elastic.co/products/marvel">Marvel</a></strong>」をインストールします。
クラスタやインデックスのキャッシュヒット、ドキュメント数などを閲覧できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Elasticsearchの plugin をインストール</span>
</span><span class='line'><span class="c1"># インストール手順: https://www.elastic.co/downloads/marvel</span>
</span><span class='line'><span class="n">plugin</span> <span class="n">install</span> <span class="n">license</span>
</span><span class='line'><span class="n">plugin</span> <span class="n">install</span> <span class="n">marvel</span><span class="o">-</span><span class="n">agent</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Kibanaのプラグインとして Marvelをインストール</span>
</span><span class='line'><span class="n">cd</span> <span class="n">kibana</span>
</span><span class='line'><span class="o">.</span><span class="n">/bin</span><span class="o">/</span><span class="n">kibana</span> <span class="n">plugin</span> <span class="o">-</span><span class="n">i</span> <span class="n">elasticsearch</span><span class="o">/</span><span class="n">marvel</span><span class="o">/</span><span class="n">latest</span>
</span></code></pre></td></tr></table></div></figure>


<p>インストールしたら、 ElasticsearchとKibanaを再起動させてください。そして</p>

<p><code>http://localhost:5601/app/marvel</code> にアクセスすると Marvelの画面が見れ得ると思います。</p>

<p><img src="https://farm6.staticflickr.com/5799/24038862862_1fe60fe02e.jpg" width="500" height="365"></p>

<h2>ありがとうございました！</h2>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/zyunnosuke">@zyunnosuke</a> 2.xからはkuromojiのインストールはこのようになっています。1.7を選択した理由はそれ以外にもあるんでしょうか？ <a href="https://t.co/M3DOakc4Um">https://t.co/M3DOakc4Um</a></p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/683263779988082688">2016, 1月 2</a></blockquote>


<script async src="http://morizyun.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ということで、 <a href="https://twitter.com/johtani">@johtani</a> さんのおかげで、無事2.1系で手順をかけました。ありがとうございました＾＾</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/watermint/items/fc04baa184be8cbfb251">Using ELK(ElasticSearch 1.4.2 + Logstash 1.4.2 + Kibana 4 Beta3) - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/atsuya046/items/c53987153487f05e31fd">MacでElasticsearch(1.5.x) + Kuromojiをインストール - Qiita</a></strong></li>
<li><strong><a href="http://ruby-rails.hatenadiary.com/entry/20151018/1445142266">RailsでElasticsearch: 全文検索を実装 - Rails Webook</a></strong></li>
</ul>


<h2>変更来歴</h2>

<p>(2016-01-02 21:40) 新規作成
(2016-01-03 19:40) 記述ミスの修正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails初学者向け】Nokogiriをつかって他のWebサイトから情報を取得しよう]]></title>
    <link href="http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer/"/>
    <updated>2016-01-01T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797376279/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797376279&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797376279&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797376279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ここでは、Rails初学者向けにWebサイトから情報を収集してくるチュートリアルを紹介します。
Nokogiriを使ったサンプルアプリを作ります！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Nokogiriの基本的な説明</h2>

<p><strong><a href="http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/">Nokogiri を使った Rubyスクレイピング</a></strong></p>

<h2>プロジェクトを作成</h2>

<h3>ローカル開発の場合</h3>

<p>ターミナルで以下のコマンドを実行してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 新しいRailsアプリを作成
</span><span class='line'>rails new web_scraping_sample --skip-bundle
</span><span class='line'>
</span><span class='line'># web_scraping_sample のフォルダに移動
</span><span class='line'>cd web_scraping_sample</span></code></pre></td></tr></table></div></figure>


<h3>Cloud 9の場合</h3>

<ul>
<li>『<strong><a href="https://c9.io/">Cloud9</a></strong>』にログインして新しいworkspaceを作成</li>
<li>公開していい場合は public 、公開したくない場合は private のRailsアプリを作成してください</li>
</ul>


<h2>Gemfileに以下を追加</h2>

<p>プロジェクト直下のGemfileを開いて以下を追加して下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Web Scraping</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加したらターミナルで以下のコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">jobs</span><span class="o">=</span><span class="mi">4</span> <span class="o">--</span><span class="n">path</span><span class="o">=</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby Gemライブラリをインターネットから持ってきて、自動でローカルに保存します。</p>

<h2>rake タスクの作成</h2>

<p>Rakeタスクを作成します。ターミナルで以下のコマンドを実行してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># railsコマンドで rake タスク を作成(generate)します</span>
</span><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">task</span> <span class="n">scrape</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、<code>lib/tasks/scrape.rake</code> が作成されます。</p>

<p>ちなみに、<code>Rake</code> とはRubyで記述されたプログラムをコマンドプロンプト(ターミナル)から呼び出し、実行することができる仕組みのことです。</p>

<p>rakeタスクをもう少し知りたい場合は、「<strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rakeタスクをつくる</a></strong>」がオススメです！</p>

<h2>取得スクリプトを書く</h2>

<p>今回は NaverまとめのTechページからタイトルの一覧を取得する手順です。</p>

<p><code>lib/tasks/scrape.rake</code>を開いて以下の内容を追記してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># URLにアクセスするためのライブラリの読み込み</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:scrape</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;NaverまとめのTechページからタイトルを取得&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:naver_title</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># スクレイピング先のURL</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://matome.naver.jp/tech&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">charset</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">charset</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">charset</span> <span class="c1"># 文字種別を取得</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="c1"># htmlを読み込んで変数htmlに渡す</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># htmlをパース(解析)してオブジェクトを作成</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">charset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//li[@class=&quot;mdTopMTMList01Item&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># タイトルの取得</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">node</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">inner_text</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実行すると以下の様になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">scrape</span><span class="ss">:naver_title</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; 写真撮って探しものができるアプリ3選</span>
</span><span class='line'><span class="c1"># =&gt; 洋楽好き必見！！音楽の世界が広がるアプリ７選</span>
</span><span class='line'><span class="c1"># =&gt; スマホやPCの「ブルーライト」の量が破壊的！健康対策は大丈夫？</span>
</span><span class='line'><span class="c1"># =&gt; 趣味はかどるわー！ディープなSNSがこんなにあった(ﾟдﾟ)</span>
</span><span class='line'><span class="c1"># =&gt; ちょっとしたシーンで役立つ１０のショートカットキー</span>
</span><span class='line'><span class="c1"># =&gt; ネイルでスマホを操れる？『爪センサー』が画期的</span>
</span><span class='line'><span class="c1"># =&gt; 壁を有効活用したい・・！お洒落な「壁掛けアイテム」たち</span>
</span><span class='line'><span class="c1"># =&gt; Googleも開始。「パスワードなし」でログインの時代キタ？</span>
</span><span class='line'><span class="c1"># =&gt; イヤホンの音がクリアに…！身近ガジェットの簡単お手入れ法</span>
</span><span class='line'><span class="c1"># =&gt; 日本にもこれ欲しい！海外で発売されている斬新な便利グッズ</span>
</span><span class='line'><span class="c1"># =&gt; 次々と数億円を集めるスタートアップが魅力的だった</span>
</span><span class='line'><span class="c1"># =&gt; ３Dじゃない方のプリンターも面白いのがたくさんあった</span>
</span><span class='line'><span class="c1"># =&gt; なにこれスゴい！自転車を盗んだヤツを見つける最新グッズ</span>
</span><span class='line'><span class="c1"># =&gt; トラックボールで作業効率UP！もうマウスなんて使わない！</span>
</span><span class='line'><span class="c1"># =&gt; 可視化でわかりやすく！医療の見える化が思った以上に見えている！</span>
</span><span class='line'><span class="c1"># =&gt; 眠れない夜にさよなら「本当に熟睡出来る」評判の快眠アプリ5選</span>
</span><span class='line'><span class="c1"># =&gt; エネループの代わりになる「おしゃれな」充電池たち</span>
</span><span class='line'><span class="c1"># =&gt; なにこれすごい…アメリカ軍の開発が未来を先取りしてる</span>
</span><span class='line'><span class="c1"># =&gt; 手に着けるだけのリストバンド型ガジェットで健康を記録する</span>
</span><span class='line'><span class="c1"># =&gt; AppleWatchピンチ？進化したスマートウォッチのいま</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Nokogiriで参考になりそうなサイト</h2>

<p>実際にNokogiriのコードを書くときに役に立ちそうなチートシート的なサイトを紹介しておきます。</p>

<ul>
<li><strong><a href="http://d.hatena.ne.jp/otn/20090509/p1">スクレイピングのためのNokogiri利用メモ</a></strong></li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://www.u-ziq.com/blog/2007/12/ruby_on_rails.html">初心者向けのRuby on Railsの用語説明</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hard Things 成長する組織で大切なことを知ることができる [書評]]]></title>
    <link href="http://morizyun.github.io/blog/hard-things-ben-horowitz-book-review/"/>
    <updated>2015-12-31T21:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/hard-things-ben-horowitz-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00W535LOU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W535LOU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00W535LOU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00W535LOU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ベンチャーキャピタル「アンドリーセン・ホロウィッツ」の共同創業者ベン・ホロウィッツが書いた
『<strong><a href="http://www.amazon.co.jp/gp/product/B00W535LOU/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W535LOU&amp;linkCode=as2&amp;tag=morizyun00-22">Hard Things</a></strong>』
を読んだのでその感想です。</p>

<p>題名の「Hard Things(困難)」通り、ベン・ホロウィッツが経験した様々な苦難が切実に語られている書籍。
華々しく語られるスタートアップ業界は、実は本当はそんなに素晴らしいことばかりではなく、様々な困難を切り開いてきたのだと知ることができます。</p>

<p>この本の中から特に面白かった点を中心に書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>組織運営で重要なこと</h2>

<pre>
- 組織が何をこれからすべきかを知ること
- 組織がすべきことを実行していくこと
</pre>


<p>「組織が何をこれからすべきかを見つけられる」タイプのマネージャーは、たくさんの情報を収集し、大きな決断を躊躇なくこなすことができる。</p>

<p>「組織がすべきことを実行していくのが特異」なタイプのマネージャーは、実行・改善することに価値を置く。一方で不完全な状態で判断をしないと
いけないため、大きな決断をするときに、躊躇しやすい傾向にある</p>

<h2>リーダーの属性</h2>

<pre>
- スティーブ・ジョブズのようにビジョンを語り、優秀な人を惹きつけ続ける力
- 心の底から部下を気遣って行動することで、組織に属することに誇りを持って行動させられる力
- 素晴らしいアイデアを選りすぐり、実現にこぎつける純然たる経営能力
</pre>


<h2>正しい動機からフィードバックを与える</h2>

<pre>
- 相手の成功を助けるための、フィードバックを与えよう
- 相手に味方だと伝え、感情を伝える努力をしよう
- フィードバックは迅速に、頻繁に行おう
</pre>


<h2>社員が直面する問題解決に貢献しやすい環境を提供出来ているか？</h2>

<pre>
- 仕事をやり遂げれば、良いことが訪れると確信できる(動機付け)
- コミュニケーションが活発化され、大量の知識が共有されることでコンテキストが明確になっていること
- 社員が新たなスキルを身につけるために、組織は出来る限りの投資を行う
</pre>


<h2>苦闘を愛せ</h2>

<p>個々人独自の性格を愛し、自分の生い立ちを愛し、自分の直感を信じよう。
困難に直面した時、何をすべきかは自らが判断するしかないのだから。
この言葉はスタートアップのCEOに当てたメッセージだが、本質的にはどんな仕事の人にも当てはまると思う。</p>

<h2>プロダクト・マネージャーのあるべき姿</h2>

<pre>
- 何をすべきかを明確にして、実現するまでを管理する
- ドキュメントと口頭の両方で明確なコミュニケーションを取る
- 他のメンバーに役立つドキュメントの整備を徹底する
- 製品の欠陥を予測して、真の解決策を準備する
- 計画をたてる段階では「優れた価値を届けること」に注力し、リリース後は売上を基準に考える
- マスコミに書いてもらいたいストーリーを考える
- 規律を重んじて、毎週時間通りに状況報告を行う
</pre>


<h2>経営の品質は社員のライフサイクルにある</h2>

<p>社員のモチベーションが、経営の品質を図る上で特に重要な指標となる。</p>

<pre>
- 社員は胸を躍らせて出社しているか？
- 社員は会社のミッションを信じているか？
- 会社に出社することを、心から楽しみにしているか？
- 社員は自分が期待されていることを明確に理解しているか？
</pre>


<p>人事責任者はプロセスを正確に設計し、マネージャーの改善に心から貢献する。</p>

<h2>目の前で行われていることを理解する</h2>

<p>目に見える成果だけを追ってはダメだ。ソフトウェアの開発責任者が欠陥のあるプラットフォームを放置して、
無理やり幾つもの新機能を追加すれば、その場では目標が達成できるように見えるかもしれないが、次の
バージョンアップが不可能になる。目の前で何が行われているかを正確に理解すべきだ。</p>

<h2>個人面談で役立つ質問の例</h2>

<pre>
- やり方を改善するとしたら、どんな点をどうすればいいと思う？
- 組織で最大の問題点は何だと思う？ その理由は？
- この職場で働く、一番不愉快な点は何？
- 一番頑張って貢献しているのは誰だと思う？誰を尊敬する？
- キミがCEOだとしたら、どんな改革をしたい？
- 我々の製品で一番気に入らない点はどこ？
- われわれがチャンスを逃している点があるとしたらどこだろう？
- 本来やらなければならないのに、今やっていないことは何だろう？
- この会社で働くのは楽しい？
</pre>


<h2>企業文化の重要性</h2>

<p>企業文化は、「働くのに楽しい場所」という根本的な価値を維持するのに大きな意味を持つ。
そして、顧客に価値を届け、美しい製品を作り続けられるような仕事のやり方を根付かせる。
長時間にわたって、大勢の社員の行動に影響を与えられるような重要な点に絞って企業文化を考えるべきだ。</p>

<h2>組織が大きくなることによる課題</h2>

<p>組織が大きくなることによる課題は以下の様なことだ。</p>

<pre>
- 組織内のコミュニケーション
- 共通認識
- 意思決定
</pre>


<p>専門性を担保するための組織構造が必要となる。だが、すべての組織デザインは悪だという原則を忘れるな。
会社のある部分のコミュニケーションを犠牲にする事によって、他の部分のコミュニケーションを改善していることが重要だ。</p>

<h2>組織のデザイン</h2>

<p>組織デザインのフローは次の通り。</p>

<pre>
(1) どの部分に最も強いコミュニケーション経路が必要かを考える
(2) どんな意思決定が必要なのかを検討する
(3) 重要度の高い意思決定・コミュニケーション経路を優先する
(4) それぞれの部門が誰を管理するのかを決める
(5) 優先しなかったコミュニケーション経路を認識する
(6) 優先しなかったコミュニケーション経路から出る問題を最小限にする
</pre>


<h2>ワークフローのデザイン</h2>

<p>ワークフローのデザインにおける重要な点は次の通り。</p>

<pre>
- 成果に集中すること。プロセス化によって何を得られるのか？
- プロセスのそれぞれのステップごとに、何が必要か？それが正しく得られているかを確認すること
- 責任の所在を明確にする。社員のパフォーマンスを可視化する
</pre>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/rails-learning-start-dash-slide/"/>
    <updated>2015-12-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-learning-start-dash-slide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774178020/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774178020&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774178020&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774178020" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
2015/12/22に社内勉強会で「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表をしてきました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>発表スライド</h2>

<p>まずは発表スライドはこちら！</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/h23sQZZPbyzwK6" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2>特に伝えたかったこと</h2>

<ul>
<li>Web開発は、git/javascript/css/ruby/CI等々覚えることたくさんで大変</li>
<li>新しい技術もどんどん生まれていくので、学び続けることが大切</li>
<li>学び続けるためには、「楽しむこと」。楽しめるものを見つけよう</li>
<li>Railsは日本語ドキュメント充実してるから、Web 開発を始めたいなという人におすすめ</li>
</ul>


<h2>オススメリンク</h2>

<ul>
<li>(開発環境)

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac / Rails開発環境構築手順</a></strong></li>
<li><strong><a href="https://c9.io/">Windows / Cloud9</a></strong></li>
</ul>
</li>
<li>(最初) <strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファーストガイド</a></strong></li>
<li>(脱初心者) <strong><a href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/">Ruby on Rails を仕事にしていくための第一歩(Rails Tutorialの巻末掲載)</a></strong></li>
<li>(神ポスト) <strong><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに 使えそうなイディオムとか便利メソッドとか</a></strong></li>
<li>(オススメ書籍) <strong><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873115655&amp;linkCode=as2&amp;tag=morizyun00-22">リーダブルコード</a></strong></li>
<li>(オススメ書籍) <strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecに よるRailsテスト入門</a></strong></li>
<li>(Gemの検索) <strong><a href="https://www.ruby-toolbox.com/">The Ruby toolbox</a></strong></li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「個人開発のススメ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/individual-development-slide-gunosy-beer-bash/"/>
    <updated>2015-12-28T20:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/individual-development-slide-gunosy-beer-bash</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4883379930/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4883379930&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4883379930&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4883379930" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
2015/12/05に『<strong><a href="http://gunosy-beer.connpass.com/event/22825/">エムスリー x Gunosy Beer bash！</a></strong>』で、
「<strong><a href="http://www.slideshare.net/morizyun/ss-55929702">個人開発のススメ</a></strong>」というタイトルで発表しました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>発表スライド</h2>

<p>まずは発表スライドはこちら！</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/dZM4S2V9aL3js" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2>特に伝えたかったこと</h2>

<ul>
<li>今回伝えたいこと 個人開発は「夢」がある！ (๑•̀ㅁ•́๑)✧</li>
<li>企業はスケールして利益の出るものしか作れない</li>
<li>個人エンジニアなら自分で作れるので思う存分、自分の満足を追求できるよ！</li>
<li>アイデアは質より量。思いつきをメモにまとめて、簡単なものから作ってみよう！</li>
<li>もくもく会に出て、仲間を見つけたり、ブログやQiitaで記事を書こう</li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AH-GC20 音楽がもっと好きになった！ノイズキャンセリング & Bluetooth ヘッドホン【ガジェットレポート】]]></title>
    <link href="http://morizyun.github.io/blog/ah-gc20-denon-headphone/"/>
    <updated>2015-12-27T11:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ah-gc20-denon-headphone</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W8PWZKS&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00W8PWZKS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00W8PWZKS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Bluetoothとノイズキャンセリングがセットになったヘッドホン『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』を購入したので、そのガジェットレポートです。</p>

<p>結論としては、デスクワークで落ち着いて音楽を聞くときには、音が優しいので一日中聞いていても疲れない、本当にオススメのヘッドホンです！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>主な機能</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W8PWZKS&linkCode=as2&tag=morizyun00-22"><img src="https://farm6.staticflickr.com/5803/23625553989_c4ef2dbb3c.jpg" width="375" height="500" alt="Evernote Snapshot 20151226 204441"></a></p>

<p>『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』の主な機能はこちら。</p>

<pre>
- Bluetooth : ワイヤレスでiPhone/Androidなどに接続できるので、ケーブルが邪魔にならない
- ノイズキャンセリング : 人の声以外の雑音だとを上手く消してくれるので、音楽がクリアに聞こえる
- 遮音性が高い : ヘッドホン自体の遮音性がとても高いので、小さな音でも音楽が聴きやすい
- 耳への付け心地のいい : 耳を圧迫しないので、長時間ヘッドホンをつけていても疲れない
- 20時間連続再生 : バッテリーの持ちがいい。ノイズキャンセリング、Bluetoothを同時に使用して20時間対応
- aptX / AACに対応 : Bluetoothでのデータ転送のタイムラグが少なく、高音質の音楽データを送信できる
</pre>


<h2>ヘッドホンのつけ心地</h2>

<p>今までインナーイヤホンを使ってきた最大の理由はヘッドホンのつけ心地が苦手だったからでした。</p>

<p>でも『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』
は他のサイトのレビューでもつけ心地の良さの評価がすごく高かったです。</p>

<p>実際にヘッドホンを数日試した時に一番感動したのがココでした。耳を優しく覆いかぶさるような形で、
遮音性が高いのに、圧迫感が少なく、つけ心地が良い点でした。</p>

<p>今までヘッドホンの利用を避けてきた人に、ぜひ一度店頭でつけ心地を試して欲しいです＾＾</p>

<h2>ノイズキャンセリング</h2>

<p>ノイズキャンセリングで一番有名なのは「<strong><a href="http://www.amazon.co.jp/gp/product/B00N2OJ9VC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00N2OJ9VC&amp;linkCode=as2&amp;tag=morizyun00-22">BoseのQuietComfort</a></strong>」です。このヘッドホンのノイズキャンセリングは本当に強力で、一度だけ飛行機で使ったことがありますが、
本当にびっくりするくらい周りを静かにしてくれます。ほんの少しのホワイトノイズ(ノイズキャンセリングの音)以外は無音と言っても過言じゃなかったです。</p>

<p>ただ2015年12月時点では、ノイズキャンセリングとBluetoothが両方あるヘッドホンはBose販売されていないと思います。
また以前使っていた時には、耳への圧迫感が強すぎて、長時間つけるのが辛かった記憶があります。このあたりは好みが別れるところだと思います。</p>

<p>このあたりが、今回『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』を選択した理由です。</p>

<p>何日かノイズキャンセリングを試してみた感想ですが、確かにBoseのノイズキャンセリングに比べると少し、ノイズキャンセリングの機能は少し弱いと感じます。</p>

<p>でも、ヘッドセット自体の遮音性が高いので正直それだけでも十二分に満足できるし、ノイズキャンセリング自体が音楽を聴きやすくすることを
手助けしているとのをすごく感じます。むしろ、音楽を楽しむということが本来の目的にマッチしています。DENONの「音楽で感動を伝える」というこだわりを感じさせてくれます。</p>

<p>また、『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』はBluetooth と ノイズキャンセリングが ONの状態をメインに設計されているので、Bluetoothや、ノイズキャンセリングを使っているときの音がきれいだと感じました。</p>

<h2>音質</h2>

<p>正直言って僕は音楽を集中して効くというよりは、作業をやっているときについでにながらで音楽を流すタイプなので、
音質については中々評価できない気がします。ただそんな僕が購入するときに参考にしたレビューがこちらです。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/1gvN0T2YN2k" frameborder="0" allowfullscreen></iframe>


<p>音楽の聞き方、シチュエーションや、好みの音によって変わりますが、購入するときに参考になったし、
購入した後にもこのレビューは結構的を得ているなと感じました＾＾</p>

<h2>オススメのシチュエーション</h2>

<p><a data-flickr-embed="true"  href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W8PWZKS&linkCode=as2&tag=morizyun00-22"><img src="https://farm2.staticflickr.com/1494/23968052196_02dfc044de.jpg" width="375" height="500"></a></p>

<pre>
- アウトドア
  - インナーイヤータイプのイヤホンと比べると重量を感じる
  - 走ったりするときにはインナーイヤータイプのイヤホンのほうがオススメ
- インドア・デスクワーク
  - デスクワークでコードを書きながら、音楽を流し聴きするのにオススメです
  - 耳への圧迫感も感じないので、1日中使っていても特に気にならない
  - 音もすごく優しいので、本当に音楽聞いてて楽しいと感じる
</pre>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails初学者向け】Twitterへ投稿するRailsアプリを作ってみよう]]></title>
    <link href="http://morizyun.github.io/blog/ruby-rails-beginner-twitter-post-app/"/>
    <updated>2015-12-26T19:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-rails-beginner-twitter-post-app</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797380357/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797380357&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797380357&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797380357" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
最近初心者の人向けにRuby/Railsのアプリの開発についてレクチャーしたので、その時作った手順をブログ記事にしました。</p>

<p>もし、やってみてわからないところとか、ハマりやすいところとかあれば <strong><a href="https://twitter.com/zyunnosuke">@zyunnosuke</a></strong> にメッセージください！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プロジェクトを作成</h2>

<h3>ローカル開発の場合</h3>

<p>ターミナルで以下のコマンドを実行してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 新しいRailsアプリを作成
</span><span class='line'>rails new twitter_post_sample --skip-bundle
</span><span class='line'>
</span><span class='line'># twitter_post_sample のフォルダに移動
</span><span class='line'>cd twitter_post_sample</span></code></pre></td></tr></table></div></figure>


<h3>Cloud 9の場合</h3>

<ul>
<li>『<strong><a href="https://c9.io/">Cloud9</a></strong>』にログインして新しいworkspaceを作成</li>
<li>privateのRailsアプリを作成してください</li>
</ul>


<h2>Gemfileに以下を追加</h2>

<p>プロジェクト直下のGemfileを開いて以下を追加して下さい。
(minimum-omniauth-scaffold は最後に補足を書いています)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;minimum-omniauth-scaffold&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加したらターミナルで以下のコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">jobs</span><span class="o">=</span><span class="mi">4</span> <span class="o">--</span><span class="n">path</span><span class="o">=</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby Gemライブラリをインターネットから持ってきて、自動でローカルに保存します。</p>

<h2>Twitter認証用のScaffold</h2>

<p>以下のコマンドを実行して、OmniAuth用のScaffoldを作成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">minimum</span><span class="ss">:omniauth:scaffold</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テーブルの作成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TwitterのAPI keyを取得</h2>

<p><a href="https://apps.twitter.com/">Twitter Application Management</a>に新しいアプリを登録して下さい。
手順がわからない場合は、『<a href="http://blogs.zealot.co.jp/archives/810">Rails環境でTwitterとFacebookを使ってサイトの拡散をするため自動投稿させるアプリを作成してみた</a>』
を参考にしてみてください。</p>

<p>最初にユーザー登録とか必要かもしれません。</p>

<p>ちなみに設定は以下の様ようにしました。</p>

<pre>
Name : (ユニークな名前にしてください。クライアント名としてtwitter上で表示されるのでいい名前にしてください)
Description : (適当に書いてください)
Website : http://www.example.com (公開するときはそのURLを。今回はローカルテスト用の設定です)
Callback URL : http://www.example.com/callback (公開するときはコールバックのURLを書いてください。今回はローカルテスト用の設定です)
</pre>


<p>「Keys and Access Tokens」に Consumer Key と Consumer Secret があるので、次のファイルに書いてください。</p>

<h2>Twitter API keyをRailsに設定</h2>

<p><code>config/settings.local.yml</code> を開いて以下の内容を追記して下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Twitter OAuth Local Setting</span>
</span><span class='line'><span class="c1"># - 可能なら環境変数にしてしまったほうがいいと思います</span>
</span><span class='line'><span class="n">twitter_key</span><span class="p">:</span>    <span class="s2">&quot;xxxxxxxxxxxxxxxxxxxxxxx&quot;</span>
</span><span class='line'><span class="n">twitter_secret</span><span class="p">:</span> <span class="s2">&quot;yyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>controllerの処理を追加</h2>

<p>新しい処理を行うcontrollerのactionを追加します。</p>

<p><code>app/controller/top_controller.rb</code>に以下の内容を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TopController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># ↓ ここを追加</span>
</span><span class='line'>  <span class="c1"># tweet</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tweet</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">::</span><span class="no">REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># applicationの設定</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span>         <span class="o">=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">twitter_key</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span>      <span class="o">=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">twitter_secret</span>
</span><span class='line'>      <span class="c1"># ユーザー情報の設定</span>
</span><span class='line'>      <span class="n">user_auth</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">authentications</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">access_token</span>         <span class="o">=</span> <span class="n">user_auth</span><span class="o">.</span><span class="n">token</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">access_token_secret</span>  <span class="o">=</span> <span class="n">user_auth</span><span class="o">.</span><span class="n">secret</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Twitter投稿</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:text</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span><span class="p">,</span> <span class="n">notice</span><span class="p">:</span> <span class="s1">&#39;ツイートしました！&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>viewを作成</h2>

<p><code>app/views/top/index.html.haml</code> にフォームを設置します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_tag</span> <span class="n">tweet_path</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">text_area_tag</span> <span class="ss">:text</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">submit_tag</span> <span class="s1">&#39;ツイートする&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>あと念のため、今回は facebook / githubのログインは削除します。</p>

<p><code>app/views/layouts/application.html.haml</code> の以下を削除してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">,</span> <span class="s1">&#39;/auth/facebook&#39;</span>
</span><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;GitHub&#39;</span><span class="p">,</span>   <span class="s1">&#39;/auth/github&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>routesに以下を追加</h2>

<p>ルーティング情報を追加します。</p>

<p><code>config/routes.rb</code>に以下の内容を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># tweet</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/top/tweet&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;top#tweet&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="ss">:tweet</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実行確認</h2>

<p>ターミナルで以下のコマンドを実行して rails サーバーを起動してください。
(Cloud9の場合は、startボタンでrailsサーバーを起動)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、ブラウザで <code>http://localhost:3000</code> を開いてください。</p>

<p><img src="https://farm6.staticflickr.com/5704/23980458535_2e8e6a5495.jpg" width="500" height="173"></p>

<p>左上の「<strong>Login: Twitter</strong>」をクリックしてログイン。そしてツイートボタンをおすと</p>

<p><img src="https://farm6.staticflickr.com/5669/23980479635_befe85ce67.jpg" width="500" height="162"></p>

<p>とツイートできました。(※ 実話です！)</p>

<h2>(補足) minimum-omniauth-scaffold について</h2>

<p>今回使ったRubyGemの <strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">shu0115/minimum-omniauth-scaffold</a></strong>
は、Facebook/Twitter/GitHubのアカウントを使ったログイン機能のscaffoldを提供してくれるGemです。</p>

<p>すごく便利なのでFacebook/Twitter/GitHubのアカウントを使ったログイン機能を実装したいときは、是非試してみてください。</p>

<p>ちなみに、拙著の紹介記事は、『<strong><a href="http://morizyun.github.io/blog/minimum-omniauth-scaffold/">「minimum-omniauth-scaffold」 Facebook/Twitter/GitHubログインを高速実装！</a></strong>』もおすすめです！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://blogs.zealot.co.jp/archives/810">Rails環境でTwitterとFacebookを使ってサイトの拡散をするため自動投稿させるアプリを作成してみた</a></strong></li>
<li><strong><a href="http://d.hatena.ne.jp/Nunocky/20110127/p1">Railsアプリから twitterにつぶやいてみた - Nunockyの日記</a></strong></li>
<li><strong><a href="http://qiita.com/ykyk1218/items/2541a313aac0f0e5d81a">Ruby - Railsのフォーム基本的な作成方法まとめ（form_forとかform_tag）</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「minimum-omniauth-scaffold」　Facebook/Twitter/GitHubログインを高速実装！]]></title>
    <link href="http://morizyun.github.io/blog/minimum-omniauth-scaffold/"/>
    <updated>2015-12-26T19:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/minimum-omniauth-scaffold</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4839926689/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839926689&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4839926689&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4839926689" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プロダクトを作る時にFacebookやTwitter、GitHubのログイン機能を組み込むのはかなり普通に必要になってきました。そんな時にすごく便利なのが、この「<strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">minimum-omniauth-scaffold</a></strong>」です。</p>

<p>実際にハッカソンの中で初めて使いましたが、10〜20分で簡単に実装できてしました。
以下の環境で実行できました！</p>

<pre>
Rails 4.2.5
Ruby 2.3.0
</pre>




<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Facebook/Twitter/GitHubログイン機能</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;minimum-omniauth-scaffold&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにこちらのgemは、Ruby2.0+、Rails4.0+環境用とのことです。</p>

<h2>OmniAuth用のScaffold</h2>

<p>以下のコマンドを実行して、OmniAuth用のScaffoldを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g minimum:omniauth:scaffold
</span></code></pre></td></tr></table></div></figure>


<h2>Facebook/Twitter/GitHubでアプリを作成してキーを登録</h2>

<h3>Facebook</h3>

<p><strong><a href="https://developers.facebook.com/apps">Facebook Developers - App</a></strong>でアプリを作成して、App IDとアプリのシークレットキーを取得。<br/>
※ 必須マークが無いが 「Callback URL」も入力必要</p>

<h3>Twitter</h3>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong>でアプリを作成して、キーを取得。<br/>
※　「新しいアプリを作成」作成後「Facebookでログインするウェブサイト」に「http://0.0.0.0:3000/」を入力</p>

<h3>GitHub</h3>

<p><strong><a href="https://github.com/settings/applications/new">GitHub Register a new OAuth application</a></strong>でアプリを登録してキーを取得。
※ Main URL／Callback URL：「http://0.0.0.0:3000/」</p>

<h3>config/settings.local.yml</h3>

<p><code>config/settings.local.yml</code>に上で取得した情報を登録。</p>

<h3>本番用の環境変数の設定</h3>

<p>キー情報などはgitリポジトリに含めないほうがいいです。ということでHerokuを使って環境変数にキー情報を登録するのはこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Twitter</span>
</span><span class='line'>heroku config:set <span class="nv">TWITTER_KEY</span><span class="o">=</span>xxxxxxxxxx <span class="nv">TWITTER_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># Facebook</span>
</span><span class='line'>heroku config:set <span class="nv">FACEBOOK_APP_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">FACEBOOK_APP_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># GitHub</span>
</span><span class='line'>heroku config:set <span class="nv">GITHUB_CLIENT_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">GITHUB_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<h3>認証用のテーブルを作成</h3>

<p>マイグレーションコマンドを実行して、認証に必要なテーブルを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>と、たったこれだけのコマンドでログイン認証に必要な機能をひと通り実装できてしまいます！</p>

<p>継続的に開発を続けてこられている作者の<strong><a href="https://twitter.com/shu_0115">@shu0115</a></strong>さんには感謝感謝です＾＾</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">shu0115/minimum-omniauth-scaffold</a></strong></p>

<p><strong><a href="http://qiita.com/shu_0115/items/6f5f0c210e9999da66be">Ruby 2.0.0-p247 + Rails 4.0.0 + minimum-omniauth-scaffold - Qiita [キータ]</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015のMatzのキーノート・メモ]]></title>
    <link href="http://morizyun.github.io/blog/rubykaigi2015-matz-keynote/"/>
    <updated>2015-12-23T17:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rubykaigi2015-matz-keynote</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873113946/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873113946&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873113946&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873113946" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />2015/12/11-13に開催された『<strong><a href="http://rubykaigi.org/2015">RubyKaigi 2015</a></strong>』に出席してきたので、その時のメモです。</p>

<p>とは言っても1日目から風邪でセッション中殆ど寝てて、２・３日目には熱がでて会場にすら行けなかったという
体たらくぶりでした。来年はマスクとか、うがい・手洗いとか万難を排して臨みたいと思っています&#8230;orz&#8230;</p>

<p>今回はまともに聞けてたMatzのKeynoteを中心にメモを書いていきます。</p>

<p>あとこの記事は、<strong><a href="http://qiita.com/advent-calendar/2015/m3">エムスリー Advent Calendar 2015 - Qiita</a></strong>の23日目です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プログラマーの三大美徳</h2>

<p>Perlの作者 Lally Wallの言葉。考えれば考える程いい言葉。</p>

<pre>
- 怠惰: プログラムを書いて、苦労を減らしたり、ドキュメントを書いて不要な質問を避ける
- 短気: 将来起こる問題を想定した設計、ロジックの無駄を排除した実装を行う
- 傲慢: 周りから文句が出ないような、自分が自信を持てるプログラムを書こう
</pre>


<h2>怒りに通じている</h2>

<p>「<strong>怒り</strong>」とは、制御されている限り有益なモチベーションの源泉となる。
ただし、怒りは他の人にネガティブな気持ちを伝染させてしまうので注意しよう。</p>

<h2>ナイスも人に移る</h2>

<ul>
<li>「<strong>ナイスさ</strong>」こそはRubyコミュニティの良さ => MINASWAN(Matz is Nice And So We Are Nice)</li>
<li>内心で怒っていても、外っつらは愛想よく、ナイスであろう</li>
</ul>


<h2>Ruby 2.3.0</h2>

<p>preview2が出た。クリスマスに合わせてリリース予定。新機能は次のようなもの。</p>

<pre>
- Did-you-mean
  - Gooogleのもしかして機能
- Enuerable#grep_v(inverseのv)
  - マッチしていないものを返す
- Hash#fetch_value
- Numeric$positive?, negative?
- Hwash comparisons(<=, <, >=, >) - No Comparable(<=>はない)
- Hash#to_proc
- Array,Hash,Struct$dig
- Indented here document(インデントの一番浅いところでとってくれる)
- froze-string-literal: true
- safe navigation operation => &.
  - u&.name&.first
</pre>


<p>Rubyの改善は、コミュニティの成果であう。</p>

<h2>OCaaS</h2>

<ul>
<li>OCaaS(OSS community as a Shark)、つまりオープンソースコミュニティは、動き続けなければ死ぬ。</li>
<li>変化を生み出し続ける必要があるが、変化を受け入れるのは、決して簡単なことではない。</li>
</ul>


<h2>変化</h2>

<ul>
<li>ユーザーのwantsを聞くべきではない。大切なのは隠れたneedsを見つけることだ</li>
<li>未来のことはわからないが「<strong>未来の変化</strong>」を生み出さないといけない</li>
</ul>


<h2>環境の変化</h2>

<p>Rubyの置かれている環境の変化として次の3つがある。</p>

<pre>
- Multi Core
- Code Scalability
- Data Scalability
</pre>


<h3>マルチコア</h3>

<pre>
- コンカレンシー
- 抽象度の高さがRubyの売り
- 候補
  - Ownership Model => 排他制御
  - STM => 現実的ではに
  - Streem model
</pre>


<p>この辺りで時間なくなったはず。。
Ruby3を2020年までにだして、Ruby 2.0より3倍早くするのが目標とのこと。
すごい！</p>

<h2>RubyKaigi で参考になりそうなサイト</h2>

<ul>
<li><strong><a href="https://www.youtube.com/channel/UCBSg5zH-VFJ42BGQFk4VH2A">RubyKaigi - YouTube</a></strong></li>
<li><strong><a href="http://togetter.com/li/911396">Ruby準国際カンファレンス #rubykaigi 2015 - Togetterまとめ</a></strong></li>
</ul>


<h2>RubyKaigiで個人的に面白かった発表</h2>

<p>テンプレートエンジンの高速化、FamlとHamlitの話はすごい面白かったです！</p>

<script async class="speakerdeck-embed" data-id="acd0c621607045aa8218049ae613747a" data-ratio="1.33333333333333" src="http://morizyun.github.io//speakerdeck.com/assets/embed.js"></script>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSの IAM & STS の基礎知識]]></title>
    <link href="http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service/"/>
    <updated>2015-12-20T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774176737/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774176737&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774176737&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774176737" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />ちょっとマニアックですが、AWSのIAMやSTSについてどういうものかを調べたので、完全俺得メモです。
理解が間違ってそうなところがあればぜひ twitterとかで突っ込んでくださいw</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>IAM とは？</h2>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/introduction.html">IAM とは - AWS Identity and Access Management</a></strong></p>

<p>IAMとは「<strong>AWS Identity and Access Management</strong>」の略で、AWSのアカウントが持つ権限を一部他人に付与できる仕組み。</p>

<h2>IAM の機能</h2>

<p>機能としては次のようなものがある。</p>

<pre>
- AWS アカウントへのアクセスの共有できる
  - 他の人に「自分のAWS」のリソース管理や利用のための権限を付与
- アクセス権限を詳細に設定できる
  - どのリソースをどこまで利用できるかといったことを細く設定できる
- 多要素認証（MFA）
  - パスワード/アクセスキー以外にも、特別に設定されたデバイスからのコードの入力も必要にすることができる
- ID フェデレーション
  - 他の認証に基づいたユーザーに対して、自分のAWSアカウントに対して一時的なアクセス権を付与できる
- 保証のための ID 情報
  - IAM IDに基づいたログを AWS CloudTrail で残すことができる
- 多くの AWS サービスと連携
  - 数多くの AWS サービスがIAMと連携している
</pre>


<h2>IAM へのアクセス</h2>

<p>次のいずれかの方法でIAMを使うことができます。</p>

<pre>
- AWS マネジメントコンソール
- AWS コマンドラインツール
  - AWS Command Line Interface (AWS CLI)
    - AWS サービスを管理するための統合ツール
    - **[aws/aws-cli - GitHub](https://github.com/aws/aws-cli)**
  - AWS Tools for Windows PowerShell
    - Windows PowerShell スクリプト環境でAWSサービスを管理できる
- AWS SDK
  - Java、Python、Ruby、.NET、iOS、Android などのライブラリとサンプルコードで構成された ソフトウェア開発キット(SDK)
- IAM HTTPS API
  - サービスに HTTPS リクエストを直接発行できる IAM HTTPS API
</pre>


<h2>IAMの ユースケース</h2>

<ul>
<li>AWS マネジメントコンソールを使用し、AWS アカウントの下でユーザーを作成して、そのアクセス許可

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/getting-started.html">使用を開始する - AWS Identity and Access Management</a></strong></li>
</ul>
</li>
<li>使用している認証システと AWS の間での ID フェデレーション。ユーザーに対して、アクセストークンを発行

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html</a></strong></li>
<li>AWS Security Token Service(STS) API の詳細 => <strong><a href="http://docs.aws.amazon.com/STS/latest/APIReference/">Welcome - AWS Security Token Service</a></strong></li>
</ul>
</li>
<li>IAM を使用して、他の AWS アカウントにアクセス許可を付与する方法</li>
</ul>


<h2>Security Token Service(STS)</h2>

<p>STSとは、AWS Security Token Serviceの略。AWSリソースへのアクセスを制御できる一時的な セキュリティ認証情報を持つ、信頼されたユーザーを作成・提供するための仕組みです。</p>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">一時的セキュリティ認証情報 - AWS Identity and Access Management</a></strong></p>

<p>IAMユーザーが使用できる長期的なアクセス情報と似ているが違いは次の点。</p>

<pre>
- 使用期限が短い (数分〜数時間で設定できる)
- 一時的セキュリティ認証情報はユーザーとともに保存されることはなく、ユーザーのリクエストに応じて動的に生成される
</pre>


<p>このSTSを使うメリットは次の通り。</p>

<pre>
- 一時的に使うアプリに対して、長期のセキュリティ情報を配布しなくていい
- AWS の ID を定義せずに AWS リソースへのアクセスを提供できる
</pre>


<h2>フェデレーションとは</h2>

<p>フェデレーションは「組織間の結合という意味」。フェデレーションとは、イントラネットを超えて
他社のシステムやアプリケーション、サービスとの間でシングルサインオン(SSO)やWebサービスの
処理結果をほかのサービスに受け渡す技術、もしくはそれを実現する考えのことである。</p>

<p><strong><a href="http://www.itmedia.co.jp/enterprise/articles/0708/31/news010_3.html">ID管理をスッキリさせるIAMのお役立ち度：“フェデレーション”が企業間連携の今後を変える</a></strong></p>

<h2>認証フェデレーション</h2>

<p>ウェブ ID フェデレーションとは、Facebook、Googleアカウントを利用して、ユーザーにサインインしてもらうことができる。
その認証情報をSTSによってAWSアカウントのリソースを使うための一時的なアクセス権に変換できる。</p>

<p>ウェブ ID フェデレーションを使用すると、アプリケーションで IAM ユーザーアクセスキーのような長期的なセキュリティ認証情報を配布する必要がないので、AWS アカウントの安全性の維持に役立ちます。</p>

<h2>あとがき</h2>

<p>ちなみに、興味をもったキッカケの記事。これは確かにすごい便利そう。</p>

<p><strong><a href="http://qiita.com/seratch@github/items/53b53f143d64f16486bb">Rails - AWS 管理コンソールを社内認証と SSO 化させる #m3dev - Qiita</a></strong></p>

<h2>次読む記事</h2>

<p><strong><a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL that Enables Federated Users to Access the AWS Management Console (Custom Federation Broker) - AWS Identity and Access Management</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kaminariをBootstrap3、Rails4環境で使う！]]></title>
    <link href="http://morizyun.github.io/blog/kaminari-gem-paginator-rails/"/>
    <updated>2015-12-20T18:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/kaminari-gem-paginator-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048916599/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048916599&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048916599&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048916599" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails 4でも不動の人気を誇るページネーター「<strong><a href="https://github.com/amatsuda/kaminari#customizing-the-pagination-helper">amatsuda/kaminari</a></strong>」をBootstrap3、Rails4環境で使うための導入手順です。びっくりするくらい簡単に導入できちゃいますよ！</p>

<!-- more -->


<br style="clear:both;"/>


<h2>まえおき</h2>

<p>この記事は、Bootstrap環境を構築済の前提で話を進めます。もし、Bootstrap環境の構築からスタートしたい場合は、拙著『<strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの最短手順</a></strong>』をご参照頂ければ幸甚です！</p>

<h2>Gemのインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Pagenation</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;kaminari&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>kaminari configの設定</h2>

<p>kaminariのconfig(設定)ファイルを生成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g kaminari:config
</span></code></pre></td></tr></table></div></figure>


<p><code>config/initializers/kaminari_config.rb</code>を構築するサイトに合わせて各種パラメータを調整。<br/>
パラメータの詳細は『 <strong><a href="https://github.com/amatsuda/kaminari#general-configuration-options">amatsuda/kaminari | GitHub</a></strong>』を参照。</p>

<h2>Controller/Viewへの設置</h2>

<p>Controllerでページネーションをするための変数を追加。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">page</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Viewでページネーションを表示したい場所に以下のコードを追加。<br/></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">paginate</span> <span class="vi">@users</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ベージネーションViewのテンプレート取得</h2>

<p>次のコマンドを実行すると<code>/app/view/kaminari/</code>フォルダにBootstrap用のViewを生成してくれます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g kaminari:views  bootstrap3
</span></code></pre></td></tr></table></div></figure>


<p>ただしこちらは、Bootstrap2用のテンプレートっぽいです。ということで、<code>/app/view/kaminari/_paginator.html.haml</code>を次の様に編集します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">render</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">.pagination</span>
</span><span class='line'>    <span class="cp">-# ↓ ここに.pagenationを追加</span>
</span><span class='line'>    <span class="nt">%ul</span><span class="nc">.pagination</span>
</span><span class='line'>      ...(ゴニョゴニョ)
</span></code></pre></td></tr></table></div></figure>


<h2>ページネーターの表示カスタマイズ</h2>

<p>ページネーションの文言(prevやnextなど)の変更程度であれば、<code>conifg/locales/ja.yml</code>に以下の内容を追加するだけで解決します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ja:
</span><span class='line'>  views:
</span><span class='line'>    pagination:
</span><span class='line'>      first: <span class="s2">&quot;&amp;laquo;&quot;</span>
</span><span class='line'>      last: <span class="s2">&quot;&amp;raquo;&quot;</span>
</span><span class='line'>      previous: <span class="s2">&quot;&amp;lsaquo;&quot;</span>
</span><span class='line'>      next: <span class="s2">&quot;&amp;rsaquo;&quot;</span>
</span><span class='line'>      truncate: <span class="s2">&quot;...&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上は英語部分を外して、記号を残した場合の例です。
これだけでもシンプルでわかりやすいですよ！</p>

<p><img src="http://farm9.staticflickr.com/8477/8250145044_9193f27280_n.jpg" width="320" height="42" alt="fpu_tmp_1354804296.8519_d61bda"></p>

<h2>ルーティングの設定</h2>

<p><code>config/routes.rb</code>のルーティングを以下の様に変更します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resources :my_resources <span class="k">do</span>
</span><span class='line'><span class="k">  </span>get <span class="s1">&#39;page/:page&#39;</span>, :action <span class="o">=</span>&gt; :index, :on <span class="o">=</span>&gt; :collection
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>このルーティングのメリットは次の通り。</p>

<pre>
* SEO的に良い、ユーザーフレンドリーである
* params pageがURLセグメントの一部 => RailsのPageキャシュが有効に
</pre>


<h2>表示確認</h2>

<p>ブラウザで表示を確認します。以下は今回作ったサンプルページネーションです。</p>

<p><img src="http://farm9.staticflickr.com/8340/8244955784_4b2ae33c4a_n.jpg" width="320" height="44" alt="fpu_tmp_1354636719.4462_910632"></p>

<h2>補足: プレゼンターDraperと共存させる場合</h2>

<p>kaminariとプレゼンターのDraperを使う場合は、Draperがうまくkaminariのメソッドを呼び出せない場合があります。<br/></p>

<p>その場合は、<code>config/initializers/draper.rb</code>を作成して以下を記入しておくとエラーを回避できます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Draper</span><span class="o">::</span><span class="no">CollectionDecorator</span><span class="o">.</span><span class="n">delegate</span> <span class="ss">:current_page</span><span class="p">,</span> <span class="ss">:total_pages</span><span class="p">,</span> <span class="ss">:limit_value</span><span class="p">,</span> <span class="ss">:total_count</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><a href="https://github.com/drapergem/draper/issues/401">Kaminari vs Draper · Issue #401 · drapergem/draper</a></strong></p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/amatsuda/kaminari#customizing-the-pagination-helper">amatsuda/kaminari | GitHub</a></strong></p>

<p><strong><a href="https://github.com/amatsuda/kaminari/wiki/Kaminari-recipes">Kaminari recipes | amatsuda/kaminari | GitHub wiki</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/CortYuming/20131027/p1">ささっと Rails4 + Bootstrap3 + kaminari でゲストブック作成してみるメモ - 牌語備忘録 - pygo</a></strong></p>

<h2>変更来歴</h2>

<p>13/04/18 23:35 補足: プレゼンターDraperと共存させる場合を追加<br/>
13/12/23 20:15 Bootstrap3、Rails4に対応<br/>
15/12/20 18:30 コマンドを修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsエンジニアのためのSQLチューニング速習会@wantedlyに行ってきた！]]></title>
    <link href="http://morizyun.github.io/blog/sql-speedup-explain-rails/"/>
    <updated>2015-12-13T10:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/sql-speedup-explain-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1RU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1RU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1RU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://wantedly.connpass.com/event/23794/">RailsエンジニアのためのSQLチューニング速習会 - connpass</a></strong>』に参加してきました。すごく勉強になったので、
その時のメモです。<strong><a href="https://twitter.com/minami7o">@minami7o</a></strong> さんありがとうございました！</p>

<p>あとこの記事は、<strong><a href="http://qiita.com/advent-calendar/2015/m3">エムスリー Advent Calendar 2015 - Qiita</a></strong>の13日目です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>スライド</h2>

<p>Wantedlyの <strong><a href="https://twitter.com/minami7o">@minami7o</a></strong> さんの発表スライドです。</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/hzRuN7dqFFk2nj" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe>


<h2>説明用のブランチ</h2>

<p>勉強会で共有されたテストデータを使えるGitHubのブランチです。</p>

<p><strong><a href="https://github.com/south37/sql-tuning">south37/sql-tuning - GitHub</a></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="nb">clone</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:south37</span><span class="o">/</span><span class="n">sql</span><span class="o">-</span><span class="n">tuning</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'><span class="n">cd</span> <span class="n">sql</span><span class="o">-</span><span class="n">tuning</span>
</span><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="n">db</span><span class="ss">:create</span>
</span><span class='line'><span class="n">pg_restore</span> <span class="o">-</span><span class="n">j</span> <span class="mi">4</span> <span class="o">--</span><span class="n">verbose</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">acl</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">owner</span> <span class="o">-</span><span class="n">d</span> <span class="n">sql</span><span class="o">-</span><span class="n">tuning</span><span class="o">-</span><span class="n">dev</span> <span class="n">db</span><span class="o">.</span><span class="n">dump</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecord::Base.explain</h2>

<p>ActiveRecord::Baseに<code>#explain</code>があることを知らなかったです。<code>#explain</code>超便利！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Job</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:company</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;companies.country&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;companies.id &lt; 1000&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;companies.country&#39;</span><span class="p">,</span> <span class="s1">&#39;COUNT(jobs.id)&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">explain</span>
</span><span class='line'>  <span class="no">Job</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span><span class="p">,</span> <span class="no">COUNT</span><span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;jobs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;companies&quot;</span> <span class="no">ON</span> <span class="s2">&quot;companies&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;jobs&quot;</span><span class="o">.</span><span class="s2">&quot;company_id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">companies</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">EXPLAIN</span> <span class="k">for</span><span class="p">:</span> <span class="no">SELECT</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span><span class="p">,</span> <span class="no">COUNT</span><span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;jobs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;companies&quot;</span> <span class="no">ON</span> <span class="s2">&quot;companies&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;jobs&quot;</span><span class="o">.</span><span class="s2">&quot;company_id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">companies</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>                                              <span class="no">QUERY</span> <span class="no">PLAN</span>
</span><span class='line'><span class="o">-------------------------------------------------------------------------------------------------------</span>
</span><span class='line'> <span class="no">HashAggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">1184</span><span class="o">.</span><span class="mi">79</span><span class="o">.</span><span class="n">.</span><span class="mi">1191</span><span class="o">.</span><span class="mi">12</span> <span class="n">rows</span><span class="o">=</span><span class="mi">634</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="no">Group</span> <span class="no">Key</span><span class="p">:</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>   <span class="o">-&gt;</span>  <span class="no">Hash</span> <span class="no">Join</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">54</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="n">.</span><span class="mi">1159</span><span class="o">.</span><span class="mi">79</span> <span class="n">rows</span><span class="o">=</span><span class="mi">5000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>         <span class="no">Hash</span> <span class="no">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">company_id</span> <span class="o">=</span> <span class="n">companies</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span>  <span class="no">Seq</span> <span class="no">Scan</span> <span class="n">on</span> <span class="n">jobs</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mo">00</span><span class="o">.</span><span class="n">.</span><span class="mi">868</span><span class="o">.</span><span class="mo">00</span> <span class="n">rows</span><span class="o">=</span><span class="mi">50000</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span>  <span class="no">Hash</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span> <span class="n">rows</span><span class="o">=</span><span class="mi">1000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>               <span class="o">-&gt;</span>  <span class="no">Index</span> <span class="no">Scan</span> <span class="n">using</span> <span class="n">companies_pkey</span> <span class="n">on</span> <span class="n">companies</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">29</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span> <span class="n">rows</span><span class="o">=</span><span class="mi">1000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                     <span class="no">Index</span> <span class="no">Cond</span><span class="p">:</span> <span class="p">(</span><span class="nb">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">8</span> <span class="n">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにEXPLAINとは、与えられた文に対して、PostgreSQLプランナが生成する実行計画を表示するための命令です。</p>

<p>実行計画とは、問い合わせ文が参照するテーブル（複数の場合もある）をスキャンする方法（単純なシーケンススキャン、インデックススキャンなど）複数のテーブルを参照する場合に、各テーブルから取り出した行を結合するために使用されます。</p>

<h2>実行計画のコストの見方</h2>

<p>Explainでのコストの見方はこちら。</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/hzRuN7dqFFk2nj?startSlide=11" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe>


<h2>indexの仕組み</h2>

<p>「B-tree index」とは、バランスド・ツリーインデックスの略です。
ソートアルゴリズムや二分木の進化版的なアルゴリズムだそうです。
一部のブランチが成長しすぎて、計算量が増えないように再編成(バランシング)する仕組みをもっています。
これにより、常に高い検索性能を保つことができるそうです。</p>

<h2>indexが効かないパターン</h2>

<pre>
- indexを貼ったカラムに演算(`lower`と演算子を使う場合、ただし後述の方法なら貼れる)
- 絞り込み条件のゆるいwhere (デフォルトだと4/1以下に絞り込まれる必要がある)
  - HDDへのランダムアクセスとシーケンシャルアクセスの速度差が原因
</pre>


<h2>index利用のデメリット</h2>

<pre>
- indexの更新に時間がかかる
- PostgreSQLのカラム更新を高速化するための仕組みの「HOT」が効かない
</pre>


<p>ちなみに「HOT(Heap Only Tuple)」とは、「インデックスを持たない、ヒープのみのタプル」だそうです。
(1)不要なインデックスの更新を行なわないことによる更新処理コストの削減や、(2)ガベージの自動回収
といったことをサポートしてくれます。</p>

<h2>インデックスの種類</h2>

<pre>
- Unique Indexes : 重複した値を許可しないようなインデックス
- Multicolumn Indexes : 2つ以上のカラムに対するインデックス
- Indexes on Expressions
  - 関数などの返り値を key として index を作る事ができる
</pre>


<h2>JOIN のアルゴリズム</h2>

<pre>
- Nested Loop Join (遅い)
  - テーブル1とテーブル2に対してすべての組み合わせを試す
  - テーブル2にindexがあれば早くなる
- Hash Join
  - テーブル2に対して、1度フルスキャンしてHashMapを作る
  - テーブル2の全レコードをメモリにのせる必要がある
- Merge Join (早い)
  - ソート済のテーブル1とテーブル2に対して一度だけフルスキャン
  - JOINに使うカラムにはindexを貼る
</pre>


<h2>データ集約</h2>

<pre>
- Group Aggregate
  - 入力されたデータをグループキーでソート後、各グループを順に処理
- Hash Aggregate
  - グループキーをkeyとする、一時的なHash Tableを作成する
</pre>


<h2>sortもindexをはるべき</h2>

<ul>
<li>予めindexを貼っておくとソートされた状態でデータが保持されている</li>
<li><code>ORDER BY</code>でsortを実施するときにはindexされたカラムを使おう</li>
</ul>


<h2>その他 PostgreSQLの特徴的機能</h2>

<pre>
- JSON型
  - json型とjsonb型がある
  - jsonb型を基本で使うべきだが、すごいきたないデータの場合json型になる
- Hstore型
  - key, valueのペアを一つのカラムに保存可能
- Materialized View
  - キャッシュされたView。高速化は期待できるが手動でRefreshする必要がある
- Stored Procedure (PL/pgSQL)
  - PostgreSQLで実行可能なfunctionを定義可能。
</pre>


<h2>その他勉強になったこと</h2>

<ul>
<li>データの分布 = 「統計情報」が大事</li>
<li>SerializeよりはJSONのほうがいいかも</li>
<li>PostgreSQL - indexの利用状況を閲覧できる - pg_stat_user_indexes</li>
<li>Gem <strong><a href="https://github.com/grosser/bitfields">grosser/bitfields</a></strong> 便利そう</li>
</ul>


<h2>まとめ</h2>

<pre>
- SQLの実行児に選ばれる実行計画は、indexの有無や統計情報(データの量・分布)に依存
- 適切なschema, index, queryの選択によって、高速化しよう
- WHERE, JOIN,ORDER BY, GROUP BYのkeyにはindex
- JOINの前に絞り込めるだけ絞り込む
- JSON Typeなどもケースバイケースで
</pre>


<h2>最後に</h2>

<p>懇親会で、ピザやビールを大量あってお腹いっぱいになれました。
めっちゃ有りがたかったです！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第6章 コードを記述するコード[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code/"/>
    <updated>2015-12-05T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>6章 クラス定義</h2>

<h3>オブジェクトの汚染</h3>

<p>外部から来た安全ではないをブジェクを「オブジェクトの汚染」という。
この汚染を判定するメソッドが<code>#tainted?</code>である。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_input</span> <span class="o">=</span> <span class="s2">&quot;User input: </span><span class="si">#{</span><span class="nb">gets</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;user_input.tainted? =&gt; </span><span class="si">#{</span> <span class="n">user_input</span><span class="o">.</span><span class="n">tainted?</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">only_code_object</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;only_code_object.tainted? =&gt; </span><span class="si">#{</span> <span class="n">only_code_object</span><span class="o">.</span><span class="n">tainted?</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby 6.2.4.tainted_code.rb</span>
</span><span class='line'><span class="c1"># &lt;= 1</span>
</span><span class='line'><span class="c1"># user_input.tainted? =&gt; true</span>
</span><span class='line'><span class="c1"># only_code_object.tainted? =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ERB内のRubyコードの評価メソッド</h3>

<p>ERBの中でRubyのコードを書くとそのコードが<code>eval</code>で評価される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ERB</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">new_toplevel</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@safe_level</span>
</span><span class='line'>      <span class="nb">proc</span> <span class="p">{</span>
</span><span class='line'>        <span class="vg">$SAFE</span> <span class="o">=</span> <span class="vi">@safe_level</span>
</span><span class='line'>        <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">eval</span><span class="p">(</span><span class="vi">@scr</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ユーザーが<code>@safe_level</code>を設定していれば、サンドボックスの中で、コードを評価する。
また、<code>$SAFE</code>はprocの中だけで有効になっており、全体の設定を変更しないようにしている。</p>

<h2>フックメソッド</h2>

<p>Rubyにはいくつかのイベントが発生した時にフックするメソッドが存在する。</p>

<h3>継承にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inherited</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">subclass</span><span class="si">}</span><span class="s2"> に継承されたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyString</span> <span class="o">&lt;</span> <span class="nb">String</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; &quot;String は MyString に継承されたよ！&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>include にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2"> にincludeされたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">M1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; M1 は C にincludeされたよ！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>prepend にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M2</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prepended</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2"> にprependされたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">M2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; M2 は C にprependされたよ！</span>
</span></code></pre></td></tr></table></div></figure>


<p>その他以下のようなメソッドもある。</p>

<pre>
Module#method_added - メソッドを追加した時に呼ばれる
Module#method_removed - メソッドがModule#remove_method により削除された時に呼ばれる
Module#method_undefined - メソッドがModule#undef_method によって削除されるか、 undef 文により未定義になったら呼ばれる

# 特異メソッドのイベントをキャッチする
Kernel#singleton_method_added - 特異メソッドが追加された時に呼ばれる
Karnel#singleton_method_removed - 特異メソッドが削除された時に呼ばれる
Karnel#singleton_method_undefined - 特異メソッドがundefinedになった時に呼ばれる
</pre>


<h2>アトリビュートのチェック</h2>

<h3>全Classで <code>attr_checked</code> を使えるようにする</h3>

<p>classやmoduleのアトリビュートをチェックするようなDSL <code>attr_checked</code>を追加する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attr_checked</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">validation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span> <span class="o">||</span> <span class="o">!</span><span class="n">validation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">attribute</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">attr_checked</span> <span class="ss">:age</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestCheckedAttribute</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_accepts_valid_values</span>
</span><span class='line'>    <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">18</span><span class="p">,</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_invalid_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_nil_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_false_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>なるほど、これでできるのかとちょっと感激！</p>

<h3>include した時だけ使えるようにする</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">CheckedAttributes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">attr_checked</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">validation</span><span class="p">)</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="k">raise</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span> <span class="o">||</span> <span class="o">!</span><span class="n">validation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">define_method</span> <span class="n">attribute</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CheckedAttributes</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_checked</span> <span class="ss">:age</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestCheckedAttribute</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_accepts_valid_values</span>
</span><span class='line'>    <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">18</span><span class="p">,</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_invalid_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_nil_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_false_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第5章 クラス定義[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition/"/>
    <updated>2015-11-29T19:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>5章 クラス定義</h2>

<h3>カレントクラスとは？</h3>

<pre>
- プログラムのトップレベルでは「カレントクラス」はmainクラスのObjectになる
- classキーワードでクラスをオープンするとそのクラスが「カレントクラス」となる
- メソッドの中では、カレントオブジェクトのクラスがカレントクラスとなる
</pre>


<h3>class_evalを使ったメソッドの定義</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_method_to</span><span class="p">(</span><span class="n">a_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a_class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">greet</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_method_to</span> <span class="nb">String</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;bcd&#39;</span><span class="o">.</span><span class="n">greet</span> <span class="c1">#=&gt; Hello</span>
</span></code></pre></td></tr></table></div></figure>


<h3>カレントクラスのまとめ</h3>

<pre>
- Rubyのインタプリタはカレントクラスの参照を追跡する。defで定義されたメソッドはカレントクラスのインスタンスメソッドとなる
- クラス定義内では、カレントオブジェクト self と カレントクラスは同義である
- クラスへの参照を持っていれば、クラスはclass_eval(module_eval)でオープンできる
</pre>


<h3>クラスインスタンス変数</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vi">@my_var</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># クラスインスタンス変数</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">read</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="c1"># クラスインスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">arg_num</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="o">=</span> <span class="p">(</span><span class="n">arg_num</span><span class="p">)</span> <span class="c1"># インスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="c1"># インスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クラス変数の癖</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vc">@@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vc">@@v</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="vc">@@v</span> <span class="c1">#=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="n">xxx</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">xxx</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="k">class</span> <span class="n">variable</span> <span class="n">access</span> <span class="n">from</span> <span class="n">toplevel</span>
</span><span class='line'><span class="n">xxx</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">7</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="k">class</span> <span class="n">variable</span> <span class="n">access</span> <span class="n">from</span> <span class="n">toplevel</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>警告は出ているが、<code>@@v</code>の内容が書き換えられている事がわかる。</p>

<h3>クラスメソッド</h3>

<p>クラス・メソッドは『<strong>クラスの特異メソッド</strong>』。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method</span>
</span><span class='line'>    <span class="c1"># メソッドの中身</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>確かに言われてみれば、特異メソッドと言えるかも。</p>

<h2>クラス拡張</h2>

<p>以下の実装をクラス拡張という。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s1">&#39;good evening&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1">#=&gt; &quot;good evening&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このクラス拡張のためのメソッドが、<code>extend</code>。(<code>extend</code>がなくても自分で実装できる)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s1">&#39;good morning&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">MyModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1">#=&gt; &quot;good morning&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでSSHポートフォワーディング管理 Coccinellida & ローカルでrails console実行してサーバDBに接続]]></title>
    <link href="http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel/"/>
    <updated>2015-11-20T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117313/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117313&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117313&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117313" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近借りているサーバーのDBに安全につなぐ方法はないものかと
物色している家庭でSSHポートフォワーディングの便利さをようやく理解しました(恥ずかしながら)。</p>

<p>この便利さを自作アプリとかでも応用できるようにMacの起動時に自動で接続して、それを維持し続けるようにしてくれる無料アプリ
『<strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a></strong>』
(正確にはそのためのterminalコマンドを設定できる)を見つけたので紹介です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>ターミナルコマンド</h2>

<p>まずはターミナルからSSHのポートフォワーディングをするためのコマンドがこちら。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh ログイン名@経由サーバ -L 自分のポート:目的サーバ:目的サーバのポート</span></code></pre></td></tr></table></div></figure>


<h2>Coccinellida を使った設定方法</h2>

<p>基本的には次のことをすればいいです。</p>

<ul>
<li><strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a> からアプリをダウンロード</strong></li>
<li>ターミナルと同様の設定をアプリで行う

<ul>
<li>不明な点がある場合 => <strong><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする</a></strong></li>
</ul>
</li>
<li>System preference => ユーザーとグループ => ログイン時に自動起動するアプリに追加</li>
</ul>


<p>これでlocalhostのポートをサーバー内のDBのポートと同じように扱う事ができるようになります。
(SSHを使っているので安全に接続、データをやり取りできるはず)</p>

<h2>RailsコンソールからサーバーDBに接続する場合</h2>

<p>これを応用すると、ローカルでRailsコンソールするとリモートのDBに接続するといったことも可能になります。</p>

<p>今回はリモートの環境(remote)を作ります。<code>config/environments/remote.rb</code>をdevelopmentあたりをコピーして作成。
次に<code>config/database.yml</code>に以下を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>remote:
</span><span class='line'>  adapter: postgresql
</span><span class='line'>  encoding: unicode
</span><span class='line'>  database: &lt;DB名&gt;
</span><span class='line'>  pool: 5
</span><span class='line'>  username: &lt;ユーザー名&gt;
</span><span class='line'>  password: &lt;パスワード&gt;
</span><span class='line'>  port: ＜ポートフォワーディングしているport番号＞
</span><span class='line'>  host: localhost</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけ、あとは普通にローカルで以下のコマンドを実行するとリモートのDBにつないで好き勝手できます。
(<code>host</code>がなかった場合、localのsocketを探しに行ってしまうので、必ずhostは設定してください)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=remote bundle exec rails console</span></code></pre></td></tr></table></div></figure>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする | eye4brain</a></li>
<li><a href="http://qiita.com/ron214_ron/items/aa273baff030e253ae96">rails consoleにて、dbをproductionに接続する。 - Qiita</a></li>
<li><a href="http://nob-on-the-boat.blogspot.jp/2010/03/ssh.html">No One Better: SSHポートフォワーディング</a></li>
<li><a href="http://qiita.com/YusukeHigaki/items/9bd0c21fbcc47e12b5c1">postgresqlを他ホストからもつなげるようにする - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
