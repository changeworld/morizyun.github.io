<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-11-08T14:13:35+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Railsを仕事にしていくための第一歩]]></title>
    <link href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/"/>
    <updated>2015-11-08T12:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近仕事でRailsのコードレビューをする時間が長くって、いろいろ指摘するんですが、
Railsって「Railsチュートリアル」には書いてないのに覚えないと仕事にならないこと多すぎだなと気付かされます。
どこでどんなふうにすれば、プロになろうとしている人が最短距離で知識を獲得できるかはわからないですが、
今思っている特に大事だなと思うことつらつらと書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プログラミングの重要な要素</h2>

<p>まず、Railsの前にプログラミングで全般的に特に重要と思っている要素を紹介します。</p>

<pre>
- リーダブルなコード
  - ネーミングルールについて
  - 言語・フレームワークのルール
  - 変数のスコープについて
  - プロジェクトの設計思想
  - オブジェクト指向・コードの再利用性
- 正しいテストケースを作る
</pre>


<p>プロジェクトによって変わるので、全ては書きませんが、ぜひ意識してどこを学ぶべきかを考えてみてください。</p>

<h2>ネーミングルールについて</h2>

<ul>
<li>動詞・名詞を正しく使い分けて下さい(英語離れるまで大変ですが、頑張ってください＞＜)</li>
<li>名前は「他のチームメンバーにも意味がわかる英語の名前」にして下さい</li>
<li>プロジェクト内の周りのメソッド・変数うがどんな意味を持っているか考えて見てください</li>
</ul>


<h2>コーディングガイドライン</h2>

<p>Ruby/Railsの有名なコーディングガイドラインは世の中に沢山あるので、ぜひ読んでください。</p>

<ul>
<li><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide">The Rails Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/cookpad/styleguide/blob/master/ruby.ja.md">CookPad Ruby コーディング規準</a></li>
<li><a href="https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md">The Ruby Style Guide (fortissimo1997)</a></li>
<li><a href="https://github.com/satour/rails-style-guide/blob/master/README-jaJA.md">The Rails Style Guide (satour)</a></li>
</ul>


<h2>変数のスコープについて</h2>

<p>変数のスコープにおいてプログラムの読みやすさはすごく大切です。
ローカル変数、インスタンス変数、クラス変数のスコープを理解して使い分けて下さい。
スコープの広い変数をむやみに使うとほかの人がコードを読みにくくなり、バグの温床になります。</p>

<h2>オブジェクト指向について</h2>

<ul>
<li><a href="http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1">オブジェクト指向を手に入れるまでの奇跡</a></li>
<li><a href="http://tdak.hateblo.jp/entry/20140406/1396773476">オブジェクト指向について</a></li>
<li><a href="http://www.itmedia.co.jp/im/articles/0703/06/news125.html">5分で分るオブジェクト指向</a></li>
</ul>


<h2>その他必須で読んで欲しい本・記事</h2>

<h3>書籍</h3>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4873115655">リーダブルコード</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873113679">初めてのRuby</a></li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">EveryDay Rails(RSpec)</a></li>
</ul>


<h3>記事</h3>

<ul>
<li><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに使えそうなイディオムとか便利メソッドとか</a></li>
<li><a href="http://at-grandpa.hatenablog.jp/entry/2013/11/01/072636">MVCの勘所</a></li>
<li><a href="http://betterspecs.org/jp/">RSpecの書き方</a></li>
</ul>


<h2>Rails/Ruby Tips</h2>

<p>ここからは、細かめのTipsです。よく指摘するところを中心に書きます。</p>

<h3>Active Record</h3>

<ul>
<li>pluck を上手に活用して下さい(ARのオブジェクトを作らないのでSQLのコストが減ります)

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51847390.html">Rails3.2から導入されたpluckメソッドのパフォーマンスが素晴らしい件 - (ﾟ∀ﾟ)o彡 sasata299&#8217;s blog</a></li>
</ul>
</li>
<li>ログを見て、無駄なSQLがないかを常に考えてください</li>
<li>indexが適切に効かないと、パフォーマンスが悪くなります。常にパフォーマンスを意識してください</li>
</ul>


<h3>Rails - View</h3>

<ul>
<li>共通的に使う可能性のあるは Decorator(ActiveDecorator等を利用) 側に書いて下さい</li>
<li>Viewのロジックは出来る限り減らして下さい</li>
<li>haml/slimは構造化しやすいという点で便利！</li>
</ul>


<h3>Rails - i18n</h3>

<p>適材適所でi18nを活用してください。</p>

<ul>
<li><a href="http://railsguides.jp/i18n.html">Rails国際化(I18n) API | Rails ガイド</a></li>
<li><a href="http://morizyun.github.io/blog/i18n-english-rails-ruby-many-languages/">Railsの多言語化対応 i18nのやり方を整理してみた！</a></li>
<li><a href="http://ruby-rails.hatenadiary.com/entry/20150226/1424937175">Railsのi18nの基本的な使い方まとめ - Rails Webook</a></li>
</ul>


<h3>Profiler</h3>

<p>Viewが遅い時にボトルネックを探すためのツールです。
速度改善をする場合はプロファイラーか、ログを取ってボトルネックを計測して実施して下さい。</p>

<ul>
<li><a href="https://github.com/MiniProfiler/rack-mini-profiler">MiniProfiler/rack-mini-profiler - GitHub</a></li>
<li><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化 - CubicLouve</a></li>
</ul>


<h3>Ruby/Railsの細かいTips</h3>

<ul>
<li>Ruby の定数は 書き換え可能です。immutable な場合はかならず、最後に .freeze をつけて下さい

<ul>
<li><a href="http://qiita.com/yukiyan/items/39f945c55b6dc5e11ed7">Rubyで定数を扱う場合はfreezeするべき</a></li>
</ul>
</li>
<li>Timezoneもしっかり意識して実装すると後々はまらないと思います

<ul>
<li><a href="http://qiita.com/jnchito/items/cae89ee43c30f5d6fa2c">RubyとRailsにおけるTime, Date, DateTime, TimeWithZoneの違い</a></li>
</ul>
</li>
<li>ActiveSupport::StringInquirerを使うとコードが読みやすくなります。適材適所で利用を検討してください。

<ul>
<li><a href="http://d.hatena.ne.jp/holysugar/20110513/p1">今更ながらシリーズ(2) StringInquirer - HWPS別館</a></li>
</ul>
</li>
</ul>


<h2>参考書籍</h2>

<p>その他読んでおくといいよって本です。</p>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4774145963">良いコードを書く技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873114799">プログラマが知るべき97のこと</a></li>
<li><a href="http://www.amazon.co.jp/dp/4822284654">オブジェクト指向でなぜ作るのか</a></li>
<li><a href="http://www.amazon.co.jp/dp/4774142042">Webを支える技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4048869558">プログラマの考え方が面白いほど身につく本</a></li>
</ul>


<h2>本当に初心者な人向けに</h2>

<p>ちょっと上の内容がハードだなと思う人向けには拙著
『<strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファースト・ガイド - 酒と泪とRubyとRailsと</a></strong>』
をよかったら読んでみてください。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://goo.gl/0HPyuh">pull-request-のフォーマットを決めるとレビューの効率が3倍よくなる</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのマスタ的なModelのキャッシュについて[Redis]]]></title>
    <link href="http://morizyun.github.io/blog/model-master-cache-rails-redis/"/>
    <updated>2015-11-08T10:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/model-master-cache-rails-redis</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4K/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4K&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4K&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4K" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsで中規模なサイトを作っていく上で
避けて通れないのが、増えてきたモデルを適切にキャッシュする仕組みのように思えます。</p>

<p>特に変更が少ないマスタ的なテーブルに対して、『多対多』で<code>関連付け(アソシエーション: association)</code>がある場合などは、
それなりのSQLの発行コストになる事があります。そこを適切にキャッシュすることでDBへの負荷が減り、
ユーザーへのレスポンスが改善されると思います。</p>

<p>今回は、最近実装しているキャッシュの方法について、紹介したいと思います。
(というか偉い人、ぜひいい方法教えて下さい＞＜)</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>前提条件: RailsからRedisにキャッシュ</h2>

<p>今回は前提条件として、Railsのアプリ から『<strong><a href="https://github.com/redis-store/redis-rails">redis-store/redis-rails - GitHub</a></strong>』
のGemを使って、Redisにキャッシュをされているとします。
セットアップ方法は『<strong><a href="https://github.com/redis-store/redis-rails">redis-store/redis-rails - GitHub</a></strong>』
のREADMEを御覧ください。</p>

<p>またRedis自体のインストールについては拙著
「<strong><a href="http://morizyun.github.io/blog/redis-mac-centos-rails/">CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB</a></strong>」
をよかったら御覧ください。</p>

<h2>Railsでのキャッシュ(ActiveSupport::Cache)</h2>

<p>Rails内では次のように書くことでRedisに<code>xxx</code>というキーでキャッシュ済の場合は、Redisのキャッシュを取得します。
Redisに<code>xxx</code>というキーがない場合は中の処理を実行してキャッシュにセットした上で値を取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;hoge&quot;</span><span class="p">,</span> <span class="s2">&quot;fuga&quot;</span><span class="o">]</span> <span class="c1"># 実際には重い処理</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">array</span><span class="o">.</span><span class="n">to_s</span> <span class="c1">#=&gt; [&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;hoge&quot;</span><span class="p">,</span> <span class="s2">&quot;fuuuga&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># キャッシュが残っているので前の値が使われる</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">array</span><span class="o">.</span><span class="n">to_s</span> <span class="c1">#=&gt; [&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Redis側に格納されたデータは次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli
</span><span class='line'>127.0.0.1:6379&gt; GET xxx
</span><span class='line'><span class="s2">&quot;\x04\bo: ActiveSupport::Cache::Entry\b:\x0b@value[\aI\&quot;\thoge\x06:\x06ETI\&quot;\tfuga\x06;\aT:\x10@created_atf\x171446337812.0613928:\x10@expires_inf\n5.4e3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis側にはActiveSupport::Cache::Entryというオブジェクトとして、値が格納されるようです。</p>

<h2>ActiveRecord::Relation.to_a (一回呼び出して)のキャッシュ</h2>

<p>いよいよ本題です。まずは、<code>ActiveRecord::Relation.to_a</code>ってやるとキャッシュできるか試してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;prefecture&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Prefecture</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli
</span><span class='line'>
</span><span class='line'>&gt; GET prefecture
</span><span class='line'><span class="s2">&quot;\x04\bo: ActiveSupport::Cache::Entry\b:\x0b@value[6o:\x0fPrefecture\x10:\x10@attributeso:\x1fActiveRecord::AttributeSet\x06;\bo:$ActiveRecord::LazyAttributeHash\n:</span>
</span><span class='line'><span class="s2">..(省略)..eated_atf\x161446338581.033632:\x10@expires_inf\n5.4e3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>キャッシュされてた。どうやら、Rails 4.2.1以降は<code>ActiveRecord::LazyAttributeHash</code> というオブジェクトでキャッシュされているっぽい。
Railsすごいな&#8230; (一部の環境でArelまでしかキャッシュされないことがある気がしますが、ライブラリとかのバージョン依存なのか、実装がしょぼいのか&#8230;)</p>

<p>あと、これとは別で状態が変化するオブジェクトをキャッシュするのはいかがなものかという議論もあります。</p>

<p><strong><a href="http://stackoverflow.com/questions/11218917/confusion-caching-active-record-queries-with-rails-cache-fetch?answertab=votes#tab-top">Confusion caching Active Record queries with Rails.cache.fetch - Stack Overflow</a></strong></p>

<p>この方が言っていることは至極最もだと思います。あくまで変化が殆ど無いような、マスタデータに
関するキャッシュを想定しています。</p>

<h2>最近 ActiveRecord / DB周り に対して思うこと</h2>

<ul>
<li>ActiveRecord、まじ洗練されててすごい。でもその分、レコード数、カラム数が多くなるとオブジェクトの生成コストつらい気がする</li>
<li>パフォーマンス保つためにも できるだけ SQL は発行したくないよね</li>
<li>仮に N+1 をさけて、include しても DB側のSQLのコストはそれなりに高い(index次第だけど)

<ul>
<li>SQLの発行コストや発生頻度は常に意識する必要がある</li>
<li>コストを正しく把握した上で、SQLを発行するかどうか選択すべき</li>
</ul>
</li>
<li>ただし、トレードオフとして生産性がある。ActiveRecordの便利な機能使えないってことは生産性が下がる</li>
<li>生産性を犠牲にはし過ぎないようにしたい。生産性を犠牲にしない程度にキャッシュを有効活用したい</li>
</ul>


<h2>ライブラリに依存すべき？</h2>

<p>それっぽいGemがないかなと思って探していたら、shopify謹製のライブラリを発見しました。更新も頻繁に行われているようです。</p>

<p><strong><a href="http://shopify.github.io/identity_cache/">shopify/identity_cache</a></strong></p>

<p>便利そうなGemがあることはあるけど&#8230;</p>

<pre>
- 学習コストが高いライブラリはやっぱり怖い(チーム開発で使いづらい)
- 実装をちゃんと読みきらないとブラックボックス化して怖そう...
</pre>


<h2>models/concern でのキャッシュ実装の提案</h2>

<p>Railsが前提にはなりますが、<code>models/concern/cache_support.rb</code> を実装して、プロジェクトで使いやすい形、
チームメンバーが簡単に使える形で実装していくという提案です。</p>

<p>一応補足で、キャッシュのクリアを1時間に1回にしていますが、これはマスタ系のデータがほぼ更新されない
ような特殊な環境を想定しています。正しくやるのであれば、after_saveとかのcallbackを使って、キャッシュを
クリアして上げる仕組みも一緒に実装してあげると幸せになれると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># キャッシュ制御に関するモジュール</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ 背景・目的</span>
</span><span class='line'><span class="c1"># - ActiveRecord便利なんだけど name とるだけなのに SQLを発行しすぎとか気になるます</span>
</span><span class='line'><span class="c1"># - model自体に大したレコード数がない場合は、この機能を使ってキャッシュしましょう</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ 制約条件</span>
</span><span class='line'><span class="c1"># - id のないテーブルでは使えません</span>
</span><span class='line'><span class="c1"># - キャッシュは1時間でクリアされます</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ お願い</span>
</span><span class='line'><span class="c1"># - 定期的な更新があるようなデータを取り扱う場合は、after_save / after_destroy とかで、</span>
</span><span class='line'><span class="c1">#   キャッシュをクリアする機構を取り付けてください</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ■ 使い方</span>
</span><span class='line'><span class="c1"># △ 前提</span>
</span><span class='line'><span class="c1"># - Model にこのモジュールを include</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># △ キャッシュから特定のcolumn(xxx)の値を取得する</span>
</span><span class='line'><span class="c1"># - Class.cached_xxx_of(id) って呼び出す</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># △ キャッシュから特定id の ActiveRecord を取得する</span>
</span><span class='line'><span class="c1"># - Class.cached_record_of(id) って呼び出す</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># △ キャッシュから全レコード(ActiveRecord) を取得する</span>
</span><span class='line'><span class="c1"># - Class.cached_all_records って呼び出す</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CacheSupport</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># Public Class Methods</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># キャッシュされた値を取得するメソッド(cached_xxx_of)を必要なタイミングで動的に生成</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cache_method?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">define_singleton_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg_id</span><span class="o">|</span>
</span><span class='line'>          <span class="n">column</span> <span class="o">=</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/^cached_(.*)_of$/</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>          <span class="n">refresh_cache!</span> <span class="k">if</span> <span class="n">need_refresh?</span> <span class="c1"># キャッシュを更新</span>
</span><span class='line'>          <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">cache_key_record</span><span class="p">(</span><span class="n">arg_id</span><span class="p">))</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="n">column</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">public_send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">super</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Logic for this method MUST match that of the detection in method_missing</span>
</span><span class='line'>    <span class="c1"># - http://docs.ruby-lang.org/ja/2.2.0/method/Object/i/respond_to_missing=3f.html</span>
</span><span class='line'>    <span class="c1"># - https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding</span>
</span><span class='line'>    <span class="c1"># @return [Boolean]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">include_private</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cache_method?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャッシュされたレコードを返すメソッド</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cached_record_of</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">refresh_cache!</span> <span class="k">if</span> <span class="n">need_refresh?</span> <span class="c1"># キャッシュを更新</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">cache_key_record</span><span class="p">(</span><span class="nb">id</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 全てのレコードを返すメソッド</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cached_all_records</span>
</span><span class='line'>      <span class="n">refresh_cache!</span> <span class="k">if</span> <span class="n">need_refresh?</span> <span class="c1"># キャッシュを更新</span>
</span><span class='line'>      <span class="n">ids</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">cache_key_ids</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cache_keys</span> <span class="o">=</span> <span class="n">ids</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="n">cache_key_record</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read_multi</span><span class="p">(</span><span class="o">*</span><span class="n">cache_keys</span><span class="p">)</span><span class="o">.</span><span class="n">values</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># Private Class Methods</span>
</span><span class='line'>    <span class="c1"># ------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1"># キャッシュを設定</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">refresh_cache!</span>
</span><span class='line'>      <span class="c1"># レコード単位のキャッシュ</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">record</span><span class="o">|</span>
</span><span class='line'>        <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cache_key_record</span><span class="p">(</span><span class="n">record</span><span class="o">.</span><span class="n">id</span><span class="p">),</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># idの配列をキャッシュ</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cache_key_ids</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャッシュすべきなら true、キャッシュすべきでないなら false</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">need_refresh?</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;/models/cache_support/need_refresh?/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">hour</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャッシュした値を取得するメソッドなら true, 異なれば false</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cache_method?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>      <span class="n">column_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">col</span><span class="o">|</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="s2">&quot;cached_</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">_of&quot;</span> <span class="o">==</span> <span class="nb">method</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># レコード単位のキャッシュ名</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cache_key_record</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;/models/cache_support/cache_key_record/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># id一覧のキャッシュ名</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cache_key_ids</span>
</span><span class='line'>      <span class="s2">&quot;/models/cache_support/cache_key_ids/</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span> <span class="c1"># ClassMethods</span>
</span><span class='line'><span class="k">end</span> <span class="c1"># CacheSupport</span>
</span></code></pre></td></tr></table></div></figure>


<p>11/8に少し更新をしました。</p>

<pre>
- カラムを限定する仕組みを取りの時期ました。チームでの使いやすさを重視しました。
- ハッシュではなく、ActiveRecordにしました。ActiveRecordに戻すコストはかかりますが、使いやすさ重視です。
- キャッシュをレコード単位に変更しました。RedisのIOとハッシュに戻す部分のコストが大きかったので減らすのが目的です。
- 全レコードを一括で取得するメソッドを追加しました。Rails.cache.read_multi 便利。
</pre>


<p>この辺りの実装でよりいいプラクティスとかあればぜひ教えてほしいです＞＜</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://redis.shibu.jp/commandreference/">コマンドリファレンス — redis 2.0.3 documentation</a></strong></li>
<li><strong><a href="http://qiita.com/Kta-M/items/b4852c849d408e7445c6">RailsのセッションストアとしてRedisを使う(Mac/EC2:AmazonLinux) - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor.js promise でサーバ処理呼び出して結果を非同期で表示する]]></title>
    <link href="http://morizyun.github.io/blog/meteor-package-promoise-async/"/>
    <updated>2015-11-01T17:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meteor-package-promoise-async</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/487311621X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=487311621X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=487311621X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=487311621X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Meteorでサーバ処理を呼び出しつつ、
処理の結果を非同期でrenderしたくって、パッケージ『<strong><a href="https://github.com/deanius/meteor-promise">deanius/meteor-promise</a></strong>』
を導入したのでそのメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>やりたかったこと</h2>

<pre>
- クライアントのタイムゾーンの日付 => サーバに送付して todo 完了に変更
- todo が完了したら、完了していない todo の件数をサーバで計算
- todo の件数をサーバで計算し終わったら、 ビュー側を更新
</pre>


<h2>Meteor Package promise の導入</h2>

<p>パッケージを導入。(ejsonもいるっぽいです)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor add deanius:promise
</span><span class='line'>meteor add ejson
</span></code></pre></td></tr></table></div></figure>


<p>次にclient側のjsに以下の処理を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">todosItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">checked</span><span class="o">:</span> <span class="nx">ReactivePromise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Meteor</span><span class="p">.</span><span class="nx">callPromise</span><span class="p">(</span><span class="s2">&quot;todoChecked&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">todoId</span><span class="o">:</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="nx">checkedAt</span><span class="o">:</span> <span class="nx">getDate</span><span class="p">()});</span>
</span><span class='line'>  <span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Meteor.call("todoChecked")</code> って書くところを <code>Meteor.callPromise("todoChecked")</code> と書いて、
結果が来たらレンダーしてくれる。</p>

<h2>ライブラリの詳しい使い方</h2>

<p>公式の <strong><a href="http://deanius-promise.meteor.com/">Meteor Async w/ deanius:promise</a></strong> はデモもあって分かりやすかったです！</p>

<h2>所感</h2>

<pre>
- Package「deanius:promise」自体は使いやすいし、感激
- JavaScript/Meteor.js 弱者過ぎて、本当に正しい書き方とは思えない。誰かおしえてください＞＜
- Promiseってもう少し別の概念な気がする。ユースケース間違ってる気がしてならない。
- いちいちサーバサイド呼び出しまくってるけど本当にいいのだろうか...、ユーザーちゃんと来たらさばけなくない？
</pre>


<p>つまりもうちょっとちゃんと勉強しろってことかな。まずは一回JavaScriptちゃんと勉強してみようと思います。</p>

<h2>Healthack.me ちょっとずつ改善中</h2>

<p><a href="http://healthack.morizyun.com"><img src="https://farm1.staticflickr.com/652/22197382029_79ee7dd411_z.jpg" width="640" height="411"></a></p>

<p>自分の健康管理のチェックリストアプリですが、『<strong><a href="http://healthack.morizyun.com">healthack.me</a></strong>』を改善中です。
機能の要望とか、コードのまずい部分の修正とかあれば、『<strong><a href="https://github.com/morizyun/healthack">morizyun/healthack - GitHub</a></strong>』
のISSUEに登録ください。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第2章 オブジェクトモデル[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review/"/>
    <updated>2015-10-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第2章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>メタプログラミングとは</h2>

<p>コードを記述するためのコードを書くことである</p>

<h2>2章</h2>

<h3>オープンクラス</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;monetize&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">standard_price</span> <span class="o">=</span> <span class="mi">100</span><span class="o">.</span><span class="n">to_money</span><span class="p">(</span><span class="s1">&#39;USD&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">standard_price</span><span class="o">.</span><span class="n">format</span> <span class="c1">#=&gt; $100.00</span>
</span></code></pre></td></tr></table></div></figure>


<p>とある場合、 <code>to_money</code> は以下のように <code>Numeric</code> クラスを拡張して実装されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Numeric</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_money</span><span class="p">(</span><span class="n">currency</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Monetize</span><span class="o">.</span><span class="n">from_numeric</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">currency</span> <span class="o">||</span> <span class="no">Money</span><span class="o">.</span><span class="n">default_currency</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rubyは標準クラスでも気軽に拡張できる。これをモンキーパッチと呼ぶ。
しかし例えば拡張したメソッドが標準クラスのメソッドだった場合、その影響範囲が大きくなってしまう。
モンキーパッチの代替案としては、<code>Refinements</code> などを使うことである。</p>

<h3>Classの親クラスは Module</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">superclass</span> <span class="c1">#=&gt; Module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class はオブジェクトの生成やクラスを継承するためのインスタンスメソッド new, allocate superclass を追加したモジュールである。</p>

<h3>load と require の違い</h3>

<pre>
- load => loadはコードを実行するために使う。呼び出す度にファイルを実行する
- require => requireはライブラリをインポートするために使う。ファイルは一度しか読み込まない。
</pre>


<h3>モジュールの継承関係</h3>

<p>継承チェーンはクラスからスーパークラスに向かって進む。
それだけではなく、継承チェーンにはモジュールも含まれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="s1">&#39;M1#my_method()&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">M2</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method_second</span>
</span><span class='line'>    <span class="s1">&#39;M2#my_method_second()&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">M1</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">M2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 継承関係を見るメソッド</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">D</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; [D, M2, C, M1, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにM1やKernelなどのModuleも継承関係に含まれている事がわかる。</p>

<p>ちなみに、モジュールがすでにチェーンに存在していた場合は、2回目の挿入を無視する。
(何度も継承チェーンに同じオブジェクトが含まれることはない)</p>

<h3>Rubyにおける private について</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method_no_self</span>
</span><span class='line'>    <span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method_with_self</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="s1">&#39;called private method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method_no_self</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method_with_self</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Refinementsについて</h3>

<p>module で限定されたスコープの中でのみ、Stringを限定して拡張できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">StringExtensions</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">reverse</span>
</span><span class='line'>      <span class="s1">&#39;esrever&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Strings</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">StringExtensions</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;my_string&#39;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1">#=&gt; esrever</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;my_string&#39;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1">#=&gt; gnirts_ym</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、モンキーパッチで発生するようなグローバルな変更を避けることができる。
ただし、<code>Refinements</code>は新しい機能で、将来挙動が変わる可能性がある。
そのことを理解したうえで、プログラムを書くべきである。</p>

<h3>まとめ</h3>

<ul>
<li>オブジェクトは複数のインスタンス変数とクラスへのリンクで構成</li>
<li>インスタンス目ドッドはオブジェクトの Class に住んでいる</li>
<li>クラスは Class クラスのオブジェクトである。クラスは単なる定数である</li>
<li>Class は Module のサブクラスである</li>
<li>Module は基本的にはメソッドをまとめたものである</li>
<li>クラスは new でインスタンス化したり、 superclass で階層構造を作ったりできる</li>
<li>クラスはそれぞれ、BasicObject まで続く継承チェーンを持っている</li>
<li>クラスにモジュールをinclude(prepend)すると、そのクラスの継承チェーンの真上(下)にモジュールが挿入される</li>
<li>メソッドを呼び出すときには、レシーバがselfになる</li>
<li>モジュール(あるいはクラス)を定義するときには、そのモジュールがselfになる</li>
<li>インスタンス変数は常にselfのインスタンス変数とみなされる</li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv を update して最新のRuby バージョンをインストール[Homebrew]]]></title>
    <link href="http://morizyun.github.io/blog/rbenv-update-brew-new-ruby-version/"/>
    <updated>2015-10-25T11:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rbenv-update-brew-new-ruby-version</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774175676/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774175676&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774175676&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774175676" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />MacでRuby/Railsの開発をしていると定期的にローカルのRubyのバージョンアップをする事になります。
Homebrewでrbenv, rbenv-buildをインストールしている環境で最新の Ruby バージョンをインストールするための手順をたまに困るのでメモしておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>rbenv-buildのアップデート手順</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Homebrewをアップデート</span>
</span><span class='line'><span class="n">brew</span> <span class="n">update</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby-buildをアップデート</span>
</span><span class='line'><span class="n">brew</span> <span class="n">upgrade</span> <span class="n">ruby</span><span class="o">-</span><span class="n">build</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># インストール可能なrubyのバージョンを確認</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">install</span> <span class="o">--</span><span class="n">list</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Rubyの指定したバージョン(今回は2.2.3)をインストール</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">install</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 通常使う Rubyを設定</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">global</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 設定結果を確認</span>
</span><span class='line'><span class="n">rbenv</span> <span class="n">versions</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rbenvの新規インストール手順</h2>

<p>Macへのrbenvのインストールがまだの場合はこちらをご覧ください。</p>

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac Yosemite Rails 最新環境 詳解 構築手順 </a></strong></li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Speical Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/yujiroarai/items/56f40b0a1fecff2cd11c">brewでインストールしたrbenvをupgradeしてruby2.0.0をインストールする - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSフレームワーク Meteor 入門 & Heroku デプロイまで]]></title>
    <link href="http://morizyun.github.io/blog/meteor-heroku-deployment-tips/"/>
    <updated>2015-10-25T08:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meteor-heroku-deployment-tips</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117194/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117194&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117194&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117194" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
10/10に開催された <a href="http://www.meetup.com/de/Meteor-Tokyo/events/225464906/">JavaScript Framework - Meteor のハッカソン</a>
でいろいろ話を聞いて興味を持ち始めて、<a href="https://www.meteor.com/tutorials/blaze/creating-an-app">Meteorのチュートリアル</a>
を触って Heroku に push した時に少しハマったのでメモです。</p>

<p>Meteor は簡単に言うとクライアントもサーバーも一緒にJSで書ける、リアルタイムWebアプリケーションのためのフレームワークのようです。
チュートリアルを触るとわかりますが、SPA(シングルページアプリケーション)が簡単に作れるのは確かに感動ものです。
その代わりにデメリットとして割り切っている部分も多い印象です。</p>

<p>基本的には Meteor の特徴を理解して、「特徴にマッチする」アプリのアイデアがある時に使うことをオススメします。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Meteor 入門</h2>

<p>Meteor 入門時に参考になりそうなページはこちら。</p>

<ul>
<li><strong><a href="https://www.meteor.com/tutorials/blaze/creating-an-app">公式チュートリアル(英語)</a></strong></li>
<li><strong><a href="http://gihyo.jp/dev/serial/01/meteor">体感！JavaScriptで超速アプリケーション開発 －Meteor完全解説</a></strong></li>
<li><strong><a href="http://docs.meteor.com/#/basic/">公式ドキュメント(英語)</a></strong></li>
</ul>


<h2>Meteor Mac環境構築の手順</h2>

<p>MacのMeteorのインストール手順はこれだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://install.meteor.com/ | sh
</span></code></pre></td></tr></table></div></figure>


<p>(もしかしたら Node.jsとか、MongoDBのセットアップが必要かも知れません&#8230;)</p>

<h2>Heroku への公開</h2>

<p>公式チュートリアルがすごく良く出来ているので今回は、サンプルアプリができた時にHerokuにプッシュする手順を書いておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># サンプルアプリの作成(チュートリアルを作成済の場合は省略)</span>
</span><span class='line'>meteor create --example todos
</span><span class='line'>
</span><span class='line'><span class="c"># アプリのプロジェクトフォルダに移動</span>
</span><span class='line'><span class="nb">cd </span>todos
</span><span class='line'>
</span><span class='line'><span class="c"># git リポジトリの作成</span>
</span><span class='line'>git init
</span><span class='line'>
</span><span class='line'><span class="c"># git first commit!</span>
</span><span class='line'>git add . -A
</span><span class='line'>git commit -m <span class="s2">&quot;Sample todos app!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 一番人気のbuildpackはこちら =&gt; https://devcenter.heroku.com/articles/third-party-buildpacks</span>
</span><span class='line'><span class="c"># 一番人気のbuildpackは、残念ながらnode.jsのバージョンが少し古いので今回はforkしたものを利用</span>
</span><span class='line'><span class="c"># (0.10.40が必要だか、0.10.36が指定されている)</span>
</span><span class='line'>heroku create --buildpack https://github.com/TFarla/heroku-buildpack-meteor.git
</span><span class='line'>
</span><span class='line'><span class="c"># mongolabのアドオンを追加</span>
</span><span class='line'>heroku addons:create mongolab:sandbox
</span><span class='line'>
</span><span class='line'><span class="c"># MongoDBのURLを設定</span>
</span><span class='line'>heroku config:add <span class="nv">MONGO_URL</span><span class="o">=</span>&lt;insert_value_of_MONGOLAB_URI_here&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># MongoDBのルートURLを設定</span>
</span><span class='line'>heroku config:add <span class="nv">ROOT_URL</span><span class="o">=</span>&lt;insert_url_created_above_here&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 1つのdynoで動かすための設定</span>
</span><span class='line'>heroku labs:enable http-session-affinity
</span><span class='line'>
</span><span class='line'><span class="c"># Heroku に deploy</span>
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>これで、2015/10/12時点ではうまくいきました。多分、Meteorは頻繁にアップデートがあると思うので動かなかったら、
<a href="https://twitter.com/zyunnosuke">@zunnosuke</a>に声をかけてください！</p>

<h2>Meteorのサンプルソース</h2>

<p>触り始めたばかりですが、サンプルが結構充実しているので、サンプルを見ながらMeteorの実装を勉強していきたいと思います！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor create --list
</span><span class='line'>Available examples:
</span><span class='line'>  clock
</span><span class='line'>  leaderboard
</span><span class='line'>  localmarket
</span><span class='line'>  simple-todos
</span><span class='line'>  simple-todos-angular
</span><span class='line'>  simple-todos-react
</span><span class='line'>  todos
</span><span class='line'>
</span><span class='line'><span class="c"># こんな感じでサンプルソースを取得できます！</span>
</span><span class='line'>meteor create clock
</span><span class='line'>
</span><span class='line'><span class="c"># github にはここにあります。</span>
</span><span class='line'>https://github.com/meteor/meteor/tree/devel/examples
</span></code></pre></td></tr></table></div></figure>


<p>その他 GitHubで気になったリポジトリです。今度じっくり読んでみます。</p>

<ul>
<li><strong><a href="https://github.com/nate-strauser/wework">wework (Meteor.jsのジョブボード)</a></strong></li>
<li><strong><a href="https://github.com/DiscoverMeteor/Microscope">DiscoverMeteor/Microscope (電子書籍 Discover Meteorのサンプルソース)</a></strong></li>
<li><strong><a href="https://github.com/lpatmo/cb">lpatmo/cb (オンライン勉強会の告知サイト)</a></strong></li>
<li><strong><a href="https://github.com/meteorclub/crater.io">meteorclub/crater.io (Meteor, React, Nodeのソーシャルブックマークサイト)</a></strong></li>
<li><strong><a href="https://github.com/scotch-io/meteor-slack">scotch-io/meteor-slack (Meteor.jsのSlack Clone。英語解説記事あり)</a></strong></li>
</ul>


<h2>リンク集</h2>

<ul>
<li>WebRTCを使ったAndroidチャットアプリの紹介記事

<ul>
<li><strong><a href="http://codezine.jp/article/detail/8872">CrosswalkとMeteor.jsでチャットアプリを作成してみよう</a></strong></li>
</ul>
</li>
<li>電子書籍(Webページあり)

<ul>
<li><strong><a href="http://ja.discovermeteor.com/">Discover Meteor(日本語ですが、翻訳がまばら)</a></strong></li>
</ul>
</li>
<li>リンク集

<ul>
<li><strong><a href="https://github.com/ericdouglas/Meteor-Learning">ericdouglas/Meteor-Learning - GitHub</a></strong></li>
</ul>
</li>
<li>ノウハウ集

<ul>
<li><strong><a href="https://github.com/oortcloud/unofficial-meteor-faq">非公式FAQ (英語、少し情報が古めです)</a></strong></li>
</ul>
</li>
<li>PodCast

<ul>
<li><strong><a href="https://meteorjs.club/">Meteor Club (英語ですが、MeteorのPodcastを配信)</a></strong></li>
</ul>
</li>
<li>パッケージの調査

<ul>
<li><strong><a href="https://atmospherejs.com/">Atmosphere (パッケージの検索サイト)</a></strong></li>
<li><strong><a href="http://qiita.com/n-oshiro/items/580a58d29514c0f6b7a0">個人的にMeteorでよく使うパッケージのチートシート - Qiita</a></strong></li>
</ul>
</li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Speical Thanks</h2>

<ul>
<li><strong><a href="http://d.hatena.ne.jp/naoya/20120422/1335109615">Meteor.js - naoyaのはてなダイアリー</a></strong></li>
<li><strong><a href="http://qiita.com/m0a/items/cf7a57face7a0e264881">リアルタイムWebアプリケーションフレームワークMeteorについて</a></strong></li>
<li><strong><a href="http://qiita.com/tadfmac/items/a63bb85e5cfb12bbbfc8">JavaScript超初心者向け Meteor メモ (1)</a></strong></li>
<li><strong><a href="http://qiita.com/kobarei/items/c2df840bc02391e907a1">MeteorをHerokuにデプロイする</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor.js で 健康管理用のチェックリストアプリ healthack.me 作ってみた]]></title>
    <link href="http://morizyun.github.io/blog/healthack-meteor-sample-application/"/>
    <updated>2015-10-22T22:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/healthack-meteor-sample-application</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/1617292478/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=1617292478&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=1617292478&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=1617292478" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />先週から引き続いて、 <strong><a href="https://www.meteor.com/">Meteor.js</a></strong> を触っています。
今回は主に Meteor.js の勉強を目的に、健康管理用のチェックリストアプリ <strong><a href="http://healthack.morizyun.com">healthack.me</a></strong> を作ってみました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>動機</h2>

<p><a href="http://healthack.morizyun.com"><img src="https://farm1.staticflickr.com/652/22197382029_79ee7dd411_z.jpg" width="640" height="411"></a></p>

<p>最近買ったサプリメントが体に合わなかったみたいで、本当に数日間動けないという出来事がありました。健康の大切さを思い知らされました。
そもそものサプリ買った動機は、年をとっても効率的にコードを書き続けたいという、おっさんプログラマーの切なる願いでした。
ということで作り始めたばかりですが、「<strong><a href="http://healthack.morizyun.com">healthack.me</a></strong>」を宜しくお願いします。</p>

<h2>機能</h2>

<p>基本的には、</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor create --example todos
</span></code></pre></td></tr></table></div></figure>


<p>って言ってできたアプリから、少しずつカスタマイズしていきました。
機能としては次のようなものがあります。</p>

<pre>
* 未ログイン時のトップページ
* 新規ユーザー登録
* メールアドレスでのログイン機能
* 初回ログイン時にデフォルトのリストを登録
* リストのCRUD
* リスト内のタスクのCRUD、
* タスクのチェックは毎日自動でリセット
</pre>


<h2>Meteor.jsの感想</h2>

<p>JavaScript は苦手意識がすごく強かったですが、思ったよりもJavaScriptって素直でいいやつな印象です。
ただnpmライブラリの効率的な利用方法とか、SPAアプリの作り方とか、Meteor.jsっぽい書き方とかまだ勉強すべき点が山積みな印象です。
少しずつ勉強しながら、ブログに残していきたいと思っています。</p>

<h2>Meteor.jsの得意分野を上手く活かせるようになりたい</h2>

<p>Meteor.jsは苦手分野と得意分野がはっきりしているような気がします。
トレードオフを理解してメリットを最大限生かしていくことが大切な気がする。
そのためにもちゃんと最低限使いこなせるようになりたいものです。</p>

<p>あと、NodeやJavaScriptのエコシステムは素晴らしいのでぜひ仲良くしていきたいです。</p>

<pre>
- Electronと上手くつなぎあわせてデスクトップアプリを作る
- Cordva + ionic とつなぎあわせてスマホアプリを作る
- Amazon Lambda もJSつかえるようになったよね
- Chrome extension とかも上手くつなぎ込めないかな
</pre>


<h2>ソースコード</h2>

<p>正直見せるレベルに無いですが、せっかくなので公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/healthack">morizyun/healthack - GitHub</a></strong></p>

<p>勉強中なので、まずいとことかあったら issue で教えてほしいです。</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[読みやすいコーディングの心得[リーダブルコード]]]></title>
    <link href="http://morizyun.github.io/blog/readable-code-good-programing/"/>
    <updated>2015-10-18T09:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/readable-code-good-programing</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873115655&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873115655&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873115655" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />読みやすいコードは、一緒にコーディングするチームのためだけではなく、
自分のためにもとても重要です。今回は「読みやすいコード」を書くための要素をまとめてみました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>一番大切にすべきことは読みやすさ</h2>

<p>プログラミングでは、コードを書く時間よりもコードを読む時間の方が多くなります。
複数人で開発をしていると他人の書いたコードを読むことも増えるでしょう。
だから、コードは理解しやすさはプログラマーが最も大切にすべき指標の一つです。</p>

<p>プログラミングが読みやすければ、こんなメリットがあります。</p>

<pre>
- 他の人がコード読みやすくなって、開発する時間が増える
- コードの読み間違いが減って、バグを生み出しにくくなる
</pre>


<h2>名前で他の人が最短時間で理解できるようにコードを書く</h2>

<ul>
<li>モージュール名・クラス名・変数名を <strong>短いコメントと考えて</strong> 情報を埋め込む</li>
<li>相手に意図を伝えるために名前には、 <strong>明確な単語</strong> を選ぶ</li>
<li>エンティティの <strong>目的や値</strong> が明確になるようにする</li>
<li>変数名に <strong>値の単位や制限、危険・注意を喚起する情報</strong> を載せる</li>
<li>変数の <strong>スコープ(影響範囲)</strong> を意識する。スコープの大きな変数には長い名前をつける</li>
<li>プロジェクトや言語の規約を守る。 <strong>フォーマットをうまく活用する</strong></li>
</ul>


<h2>一貫性のあるやり方で「整形」する</h2>

<p>一貫性のあるやり方でレイアウトを揃えると、他人がソースコードをずっと理解しやすくなる。
例えば次のようなことである。</p>

<pre>
* 縦の線を真っ直ぐにする(列を整列させる)
* 適切な位置で改行する
* 並び順に一貫したルールを持つ(アルファベット順、種類別、重要度など)
* 空行を使ってコードを論理的な段落(似ているグループ)に分ける
</pre>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 例)</span>
</span><span class='line'><span class="nx">TcpConnectionSimulator</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">500</span><span class="p">,</span>  <span class="cm">/* Kbps */</span>
</span><span class='line'>  <span class="mi">80</span><span class="p">,</span>   <span class="cm">/* millisecs latency */</span>
</span><span class='line'>  <span class="mi">200</span><span class="p">,</span>  <span class="cm">/* jitter */</span>
</span><span class='line'>  <span class="mi">1</span>     <span class="cm">/* packet loss */</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コメントは書き手の意図を読み手に知らせるためにある</h2>

<p>コメントは書き手の意図を読み手に伝えるための重要な情報の一つです。
プロジェクトの規模や、言語の特性によってコメントの量は変わりますが、
大切なことは、「<strong>読み手の立場</strong>」に立ってコメントを残すことだと思います。</p>

<ul>
<li>コードからわかることをコメントに書かない</li>
<li>コードを書いている時の <strong>自分の考え</strong> を記録する</li>
<li><strong>コードの欠陥・ハマりそうな罠</strong> を知らせる(TODO/FIXME/HACK/XXXなど)</li>
<li>読む人が <strong>質問</strong> しそうなことを書いておく</li>
<li>全体像を <strong>要約</strong> したコメントを残す</li>
<li>コメントの曖昧さを排除する、動作を明確に記述する( <strong>実例</strong> を残す)</li>
</ul>


<h2>制御フローを読みやすくする</h2>

<ul>
<li>条件式は左側に <strong>変化する</strong> 値、右側にあまり <strong>変化しない</strong> 値を置く</li>
<li>基本は、if/elseを使う。三項演算子は <strong>簡潔</strong> になる時だけ使う</li>
<li>関数からできる限り <strong>早く返す</strong></li>
<li>ネストを <strong>浅くする</strong> ことで、読み手の負荷を減らす</li>
<li>巨大な式は <strong>分割</strong> して、読み手が1つ1つ飲み込めるようにする</li>
</ul>


<h2>変数と読みやすさとの関係</h2>

<ul>
<li>コードの理解を助けない邪魔な変数は作らない</li>
<li>変数の <strong>スコープを小さくする</strong> (変数が見えるコードの行数をできるだけ短くする)</li>
<li>変数を操作する場所をできるだけ減らす(イミュータブルはトラブルになる傾向が少ない)</li>
</ul>


<h2>読みやすさを意識したリファクタリング</h2>

<ul>
<li><strong>ライブラリ</strong> (標準ライブラリ、APIやパッケージ)を有効に活用する</li>
<li>ロジックを <strong>簡単な言葉</strong> で説明できるようなコードにする</li>
<li><strong>一度に1つのことだけ処理する</strong> ように関数(クラス)を分割する</li>
<li>できるだけコードを <strong>小さく保つ</strong> 、必要になるまで作らない(You Ain&#8217;t Gonna Need It./YAGNI)</li>
<li><strong>汎用的なコード</strong> を独立したライブラリにすることで、プロジェクトを小さく保つ</li>
</ul>


<h2>テストを読みやすくする</h2>

<ul>
<li><strong>テストにやさしいコードを設計</strong> する</li>
<li>テストコードもメンテナンスコストがかかる。だから、テストコードは必要なテストだけにする</li>
<li><strong>バグの発見・修正</strong> が容易になるように、エラーメッセージを読みやすくする</li>
<li>コードを効果的にテストする最も<strong>単純</strong>な入力をテストに使う</li>
<li>テストの関数に<strong>名前</strong>をつけて、何をテストしているかわかるようにする</li>
</ul>


<h2>コードを読みやすく保ち続ける</h2>

<p>本書に書いてあることと少し逆行しますが、プロジェクトが将来どんなふうに進むかを
意識してコードが「読みやすくあり続ける」ために設計・実装を行っていきたいです。
そうすることで開発しやすいコードが保ち続けられると思います！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] UIAlertViewController を複数表示できるようにする]]></title>
    <link href="http://morizyun.github.io/blog/ios-swift-uialertview-duplication/"/>
    <updated>2015-09-12T20:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ios-swift-uialertview-duplication</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798043656/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798043656&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798043656&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798043656" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Swiftで、UIAlertViewControllerを複数呼び出すと以下の様なエラーが出ます。</p>

<pre>
Warning: Attempt to present <UIAlertController: 0x155d2cc70>  on <UINavigationController: 0x155e07c50> which is already presenting <UIAlertController: 0x155d0b3a0>
</pre>


<p>これを回避するための方法のメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<p>Swift初心者なので、もう少しいい書き方があれば教えて下さい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// UIAlertController を作成
</span><span class='line'>var alertController = UIAlertController(title: "タイトル", message: "メッセージ", preferredStyle: .Alert)
</span><span class='line'>
</span><span class='line'>// すでにアラートが表示されている場合は、それを親 ViewController にする
</span><span class='line'>var baseView: UIViewController = self.window!.rootViewController!
</span><span class='line'>while baseView.presentedViewController != nil && !baseView.presentedViewController!.isBeingDismissed() {
</span><span class='line'>  baseView = baseView.presentedViewController!
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// アラートを表示
</span><span class='line'>baseView.presentViewController(alertController, animated: true, completion: nil)</span></code></pre></td></tr></table></div></figure>


<p>これでアラートが複数表示されるようになります！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/takabosoft/items/162b6d90e00b79a7e328">Objective-C - iOS8でUIAlertViewからUIAlertControllerへ置き換えるのは大変だ</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.js x Rails 4.2 入門ガイド]]></title>
    <link href="http://morizyun.github.io/blog/knockout-js-rails-introduction/"/>
    <updated>2015-08-15T15:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/knockout-js-rails-introduction</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774156116/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774156116&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774156116&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774156116" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近仕事の関係で「<strong><a href="http://knockoutjs.com/">Knockout.js</a></strong>」
について勉強をしています。knockout.jsを選定した理由はレビューしてくれる経験者がチームに居たからです。
JSは不得手なので、アドバイスをくれる同僚がいるのはほんとうに有難い限りです。</p>

<p>Knockout.jsのメリットは次の2つだと考えています。</p>

<pre>
- 機能が絞りこまれているので、学習コストが低い
- IE6+などの古いブラウザに対応しているので導入しやすい
</pre>


<p>今回はRailsに「<strong><a href="http://knockoutjs.com/">Knockout.js</a></strong>」を組み込んだサンプルを幾つか紹介していきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>サンプルソース</h2>

<p>今回説明するサンプルのソースコードはGitHubで公開しています。</p>

<p><strong><a href="https://github.com/morizyun/knockout_rails_sample">morizyun/knockout_rails_sample</a></strong></p>

<h2>Rails プロジェクトの作成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails new app_name --skip-turbolinks --skip-bundle
</span></code></pre></td></tr></table></div></figure>


<h2>Gemfileへの追加</h2>

<p>Gemfileに以下を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># knockout.js</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;knockoutjs-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gemをインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --path<span class="o">=</span>vendor/bundle
</span></code></pre></td></tr></table></div></figure>


<h2>Knockout.jsの読み込み設定</h2>

<p><code>app/assets/javascripts/application.js</code>に以下を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require knockout</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソースの導入</h2>

<p>ここからは<code>Knockout.js</code>のサンプルソースです。
簡単にこんなことができるんだなぁくらいの紹介です。</p>

<h2>Text の監視・出力</h2>

<p>Textを監視して、出力するスクリプト。まずは<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">textViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.message = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">textViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;value&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: message, valueUpdate: &#39;afterkeydown&#39;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;text: message&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/fzag5Oay79.gif" /></p>

<h2>HTML の監視・出力</h2>

<p>HTMLを監視して、出力するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">htmlViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.message = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">self.messageHtml = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">((</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="s">&quot;&lt;em&gt;&quot;</span> <span class="o">+</span> <span class="nx">self</span><span class="p">.</span><span class="nx">message</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot;&lt;/em&gt;&quot;</span>
</span><span class='line'>  <span class="p">),</span> <span class="nx">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">htmlViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;value&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: message, valueUpdate: &#39;afterkeydown&#39;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;html: messageHtml&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/Id0f8lTlCf.gif" /></p>

<h2>表示&amp;非表示 の制御</h2>

<p>表示&amp;非表示を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">visibleViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.isTrue = </span><span class="kc">true</span>
</span><span class='line'>  <span class="nv">self.isFalse = </span><span class="kc">false</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">visibleViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;visible: isTrue&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Visible Sample Text for isTrue
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;visible: isFalse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Visible Sample Text for isFalse
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/visible_sample.png" width="300" /></p>

<h2>CSS の制御</h2>

<p>CSSを制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">cssViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.isError = </span><span class="kc">true</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">cssViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="nt">--</span>
</span><span class='line'><span class="nc">.error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">--</span><span class="o">&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;css: {error: isError}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    CSS Sample Text
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/css_sample.png" width="200" /></p>

<h2>attr (htmlタグの属性) の制御</h2>

<p>htmlタグの属性を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">attrViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.hrefAttr = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">href: </span><span class="s">&#39;http://www.google.co.jp&#39;</span>
</span><span class='line'>    <span class="nv">title: </span><span class="s">&#39;Google&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">attrViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href</span> <span class="na">data-bind=</span><span class="s">&quot;attr: hrefAttr&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Attr Sample Text
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/attr_sample.png" width="200" /></p>

<h2>checkbox (htmlタグ) の制御</h2>

<p>checkboxを制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">checkboxViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.items = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([</span>
</span><span class='line'>    <span class="s">&#39;hoge&#39;</span>
</span><span class='line'>    <span class="s">&#39;piyo&#39;</span>
</span><span class='line'>  <span class="p">])</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">checkboxViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;hoge&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;checked: items&quot;</span> <span class="nt">/&gt;</span> : hoge
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;fuga&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;checked: items&quot;</span> <span class="nt">/&gt;</span> : fuga
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">value=</span><span class="s">&quot;piyo&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;checked: items&quot;</span> <span class="nt">/&gt;</span> : piyo
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/checkbox_sample.png" width="300" /></p>

<h2>foreach (繰り返し) の制御</h2>

<p>foreach(繰り返し)を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">foreachViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.items = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([</span>
</span><span class='line'>    <span class="s">&#39;hoge&#39;</span>
</span><span class='line'>    <span class="s">&#39;fuga&#39;</span>
</span><span class='line'>    <span class="s">&#39;piyo&#39;</span>
</span><span class='line'>  <span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">self.addItem = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s">&#39;add&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">self.removeItem = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">foreachViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">data-bind=</span><span class="s">&quot;foreach: { data: items, as: &#39;item&#39; }&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;text: $index&quot;</span><span class="nt">&gt;&lt;/span&gt;</span> : <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;text: item&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: addItem&quot;</span><span class="nt">&gt;</span>Add Item<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">data-bind=</span><span class="s">&quot;click: removeItem&quot;</span><span class="nt">&gt;</span>Remove Item<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/foreach_sample.gif" width="300" /></p>

<h2>select (htmlタグ) の制御</h2>

<p>select (htmlタグ)を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">selectViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.items = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([{</span>
</span><span class='line'>    <span class="nv">id: </span><span class="mi">11</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;HOGE&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">id: </span><span class="mi">22</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;FUGA&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">id: </span><span class="mi">33</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;PIYO&#39;</span>
</span><span class='line'>  <span class="p">}])</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">self.toId = </span><span class="nf">(item) -&gt;</span>
</span><span class='line'>    <span class="s">&quot;id_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">self.toLabel = </span> <span class="nf">(item) -&gt;</span>
</span><span class='line'>    <span class="s">&quot;label_&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">selectViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;select</span> <span class="na">data-bind=</span><span class="s">&quot;options: items, optionsValue: toId, optionsText: toLabel&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/select_sample.png" width="300" /></p>

<h2>template の管理</h2>

<p>template の管理に関するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">templateViewModel = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>  <span class="nv">self.templateModel = </span><span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">({</span> <span class="nv">message: </span><span class="s">&#39;Hello Template!!&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span> <span class="nx">templateViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;template: {name: &#39;sampleTemplate&#39;, data: templateModel}&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/html&quot;</span> <span class="na">id=</span><span class="s">&quot;sampleTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">i</span> <span class="nx">data</span><span class="o">-</span><span class="nx">bind</span><span class="o">=</span><span class="s2">&quot;text: message&quot;</span><span class="o">&gt;&lt;</span><span class="err">/i&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/template_sample.png" width="200" /></p>

<h2>カスタムバインディング(custombinding) の制御</h2>

<p>カスタムバインディング(custombinding) の制御に関するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ko.bindingHandlers.myBinding = init: </span><span class="nf">(element, valueAccessor, allBindings) -&gt;</span>
</span><span class='line'>  <span class="nv">param = </span><span class="nx">valueAccessor</span><span class="p">()</span>
</span><span class='line'>  <span class="nv">element.innerText = </span><span class="s">&#39;Custom Binding param = &#39;</span> <span class="o">+</span> <span class="nx">param</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてView側。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;myBinding: 101&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/custombinding_sample.png" width="300" /></p>

<h2>本格的に勉強していくのに役立ちそうな資料</h2>

<p>ここから、Knockout.jsを勉強していくのにあたって役に立ちそうな資料のリンクを書いておきます。</p>

<ul>
<li><strong><a href="http://learn.knockoutjs.com/#/?tutorial=intro">learn.knockoutjs.com</a></strong></li>
<li><strong><a href="http://kojs.sukobuto.com/docs/">ドキュメント | Knockout.js 日本語ドキュメント</a></strong></li>
<li><strong><a href="http://qiita.com/advent-calendar/2014/knockoutjs">KnockoutJS Advent Calendar 2014 - Qiita</a></strong></li>
</ul>


<h2>あとがき</h2>

<p>全体としては、確かに学習コストが少なくて簡単に使い始められそうな印象です。
特定のことをやろうとした時にjQueryよりもわかりやすくコードを書けると思います。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DI(Dependency Injection)の概念入門[Java]]]></title>
    <link href="http://morizyun.github.io/blog/dependency-injection-java-basic/"/>
    <updated>2015-07-26T12:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/dependency-injection-java-basic</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00MIM1KFC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00MIM1KFC&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00MIM1KFC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00MIM1KFC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Javaで「DI(Dependency Injection) / 依存性の注入」という概念があります。
これは簡単にいうと、「コンポーネント間の依存関係を外部の設定ファイルから設定(注入)できるようにすること」とのことです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>やりたいこと</h2>

<p>あるクラス内の定数や変数、インスタンスを排除して、外部ファイルなどに設定したものを
受け取れるようにすることで、動的に動作を変えられるようにする。</p>

<h2>メリット</h2>

<h3>依存性を排除することによる問題解決</h3>

<ul>
<li>中に別のクラスが入っているとテストがしづらい => テストが容易になる</li>
<li>テストに時間のかかるメソッドがある => 時間のかかるテストを排除できる</li>
</ul>


<h3>設計の容易性と変化に強くなる</h3>

<ul>
<li>ソフトウェアの階層構造を綺麗に分離した設計が容易となる</li>
<li>特定のフレームワークへの依存度が極小になり、変化に強いソフトウェアを作る事ができる</li>
</ul>


<h2>デメリット</h2>

<ul>
<li>クラスを大量に作る必要があり、初期コストがかさむ</li>
<li>プログラムの実行速度が遅くなる可能性がある</li>
</ul>


<h2>サンプルソース</h2>

<p>Wikipedia からのコピペですが、サンプルは以下の様なソースです。</p>

<h3>各コンポーネントのインターフェース</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IOnlineBrokerageService</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="nf">getStockSymbols</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">getBidPrice</span><span class="o">(</span><span class="n">String</span> <span class="n">stockSymbol</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">getAskPrice</span><span class="o">(</span><span class="n">String</span> <span class="n">stockSymbol</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">putBuyOrder</span><span class="o">(</span><span class="n">String</span> <span class="n">stockSymbol</span><span class="o">,</span> <span class="kt">int</span> <span class="n">shares</span><span class="o">,</span> <span class="kt">double</span> <span class="n">buyPrice</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">putSellOrder</span><span class="o">(</span><span class="n">String</span> <span class="n">stockSymbol</span><span class="o">,</span> <span class="kt">int</span> <span class="n">shares</span><span class="o">,</span> <span class="kt">double</span> <span class="n">sellPrice</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IStockAnalysisService</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">getEstimatedValue</span><span class="o">(</span><span class="n">String</span> <span class="n">stockSymbol</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IAutomatedStockTrader</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">executeTrades</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>DIを使わない場合のソース</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VerySimpleStockTraderImpl</span> <span class="kd">implements</span> <span class="n">IAutomatedStockTrader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IStockAnalysisService</span> <span class="n">analysisService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StockAnalysisServiceImpl</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IOnlineBrokerageService</span> <span class="n">brokerageService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NewYorkStockExchangeBrokerageServiceImpl</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">executeTrades</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="err">…</span><span class="o">.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">IAutomatedStockTrader</span> <span class="n">stockTrader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VerySimpleStockTraderImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="n">stockTrader</span><span class="o">.</span><span class="na">executeTrades</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>DIを使ったリファクタリング</h3>

<p><code>MyApplication.main()</code>で依存度するクラスを設定している。これにより、<code>VerySimpleStockTraderImpl</code>
自体は特定の実装に依存をしなくなっている。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VerySimpleStockTraderImpl</span> <span class="kd">implements</span> <span class="n">IAutomatedStockTrader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IStockAnalysisService</span> <span class="n">analysisService</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IOnlineBrokerageService</span> <span class="n">brokerageService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">VerySimpleStockTraderImpl</span><span class="o">(</span>
</span><span class='line'>            <span class="n">IStockAnalysisService</span> <span class="n">analysisService</span><span class="o">,</span>
</span><span class='line'>            <span class="n">IOnlineBrokerageService</span> <span class="n">brokerageService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">analysisService</span> <span class="o">=</span> <span class="n">analysisService</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">brokerageService</span> <span class="o">=</span> <span class="n">brokerageService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">executeTrades</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="err">…</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">IStockAnalysisService</span> <span class="n">analysisService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StockAnalysisServiceImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="n">IOnlineBrokerageService</span> <span class="n">brokerageService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NewYorkStockExchangeBrokerageServiceImpl</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IAutomatedStockTrader</span> <span class="n">stockTrader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VerySimpleStockTraderImpl</span><span class="o">(</span>
</span><span class='line'>            <span class="n">analysisService</span><span class="o">,</span>
</span><span class='line'>            <span class="n">brokerageService</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stockTrader</span><span class="o">.</span><span class="na">executeTrades</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>あとがき</h2>

<p>サンプルソースがwikipediaのコピペになってしまったのは申し訳ないですが、
プログラムを書くときに参考になりそうな概念で面白かったです！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/hshimo/items/1136087e1c6e5c5b0d9f">DI - 猿でも分かる! Dependency Injection: 依存性の注入</a></strong></li>
<li><strong><a href="https://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5">依存性の注入 - Wikipedia</a></strong></li>
<li><strong><a href="http://itpro.nikkeibp.co.jp/free/ITPro/OPINION/20050216/156274/?ST=develop&amp;P=2">Java開発を変える最新の設計思想「Dependency Injection（DI）」とは：ITpro</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ぼくのかんがえたさいきょうのRailsファースト・ガイド]]></title>
    <link href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/"/>
    <updated>2015-07-20T14:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-beginner-first-step-guide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873113679/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873113679&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873113679&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873113679" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />すみません、タイトルは釣りです。
Webプログラマの実務経験ないけど、Railsの勉強始めました的な人にお会いする機会が何度かあって、
僕ができることって無いかなぁと思って考えた文章です。教えることは下手なので、「もっといい方法があるよ」
といった方がもしいらっしゃったら、ぜひアドバイスもらえるとめっちゃ嬉しかったりします。</p>

<p>これからしばらくは「初めてのプログラムはRailsです」といった方が増えるのかもと思います。
そういった人たちがプログラムを楽しいと思ってもらえるようになると嬉しいっす。</p>

<p><strong>(2015-07-20 14:00) 質問を頂けたので書籍リストを追加</strong></p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>＜セクション１＞ 1日目-11日目 まずは触ってみる</h2>

<p>プログラミングに触ったことがない人や、大学の授業しかプログラムやったことがない人向けのセクションです。
すでに別の言語をやったことがある人はスキップしてください。</p>

<h3>大切なこと</h3>

<p>「プログラミングを楽しむこと」多分、これより大切なことなんて無いと思います。
この段階では、わからないこと、ハマったことは無視していいと思います。
とにかくちょっとさわってみて、こんなのもあるんだなぁくらいで</p>

<h3>基本的な流れ</h3>

<ul>
<li>dotinstallを見て、見たことを元にRailsアプリを変更して、使ってみる。</li>
<li>その日に覚えたことをブログやQiitaにアップする。</li>
</ul>


<h3>やること</h3>

<h4>(1日目) 環境構築</h4>

<h5>1日分の目標をたてることの大切さを知る</h5>

<p><strong><a href="http://gigazine.net/news/20130911-180-websites/">プログラミング経験ゼロだが180日で180個のウェブサイトを作るプロジェクトがゴールまであとわずかに</a></strong></p>

<p>まさに継続は力なりという素敵なお話。プログラム初心者の人はぜひ真似して欲しいっす。</p>

<h5>環境構築</h5>

<p><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac Yosemite Rails 最新環境 詳解 構築手順</a></strong></p>

<p>環境構築に躓いたり、windowsの人はCloud9を使ってください。
ニーズあれば、Cloud9の使い方も記事にしますんで、<strong><a href="https://twitter.com/zyunnosuke">Twitter - @zyunnosuke</a></strong>に教えてください。</p>

<h5>RubyMine をインストール(全部入りでとにかく楽)</h5>

<p><strong><a href="https://www.jetbrains.com/ruby/">Ruby on Rails IDE :: JetBrains RubyMine</a></strong></p>

<p>ちょっとお高いエディタですが、めっちゃ便利です。
1ヶ月間は無料で利用できるので、まずは触ってみてください。</p>

<h5>Kobitoで自分が覚えたメモを書く</h5>

<p><strong><a href="http://kobito.qiita.com/">Kobito - Qiita</a></strong></p>

<p>無料で、超簡単にQiitaに記事をアップできるようになります！</p>

<h4>(2日目) herokuでアプリを作ってみる</h4>

<p><strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの詳細手順</a></strong></p>

<h4>(3日目)  HTMLの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_html_v3">HTML入門 (全24回) - プログラミングならドットインストール</a></strong></p>

<h4>(4日目) CSSの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_css_v3">CSS入門 (全22回) - プログラミングならドットインストール</a></strong></p>

<h4>(5日目) Rubyの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_ruby_v2">Ruby入門 (全23回) - プログラミングならドットインストール</a></strong></p>

<h4>(6日目) Railsの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_rails_v2">Ruby on Rails 4入門 (全28回) - プログラミングならドットインストール</a></strong></p>

<h4>(7日目) Unixコマンドの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_unix">UNIXコマンド入門 (一般ユーザー編) (全16回) - プログラミングならドットインストール</a></strong></p>

<h4>(8日目) Gitの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_git">git入門 (全22回) - プログラミングならドットインストール</a></strong></p>

<h4>(9日目) Herokuを知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_heroku">Heroku入門 (全12回) - プログラミングならドットインストール</a></strong></p>

<h4>(10日目) ActiveRecordを知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_activerecord">ActiveRecord入門 (全14回) - プログラミングならドットインストール</a></strong></p>

<h4>(11日目) JavaScriptの基礎を知る</h4>

<p><strong><a href="http://dotinstall.com/lessons/basic_javascript_v2">JavaScript入門 (全24回) - プログラミングならドットインストール</a></strong></p>

<h2>＜セクション２＞ 12日目以降で大切なこと</h2>

<p>Railsの雰囲気がふわっとわかったくらいの人向けのセクションです。</p>

<h3>大切なこと</h3>

<h4>実現できる小さな目標と報酬を得る</h4>

<p>1日の単位で実現できる小さな目標を立てて、それを達成すること。
1日で目標を達成したら、しっかり自分を褒めてあげてください。
可能なら小さな報酬を与えて、喜びを感じるサイクルを作ってください。</p>

<h4>Web開発の基礎知識を埋めていくこと</h4>

<p>Web開発の基礎知識を埋めていくと、詰まる確率が圧倒的に減ります。
ただし、無理して全部理解しようとしないこと。わからない部分は
必要になって覚えれば十分です。斜め読みしながら進めてください。</p>

<h3>やること</h3>

<p>以下のことにチャレンジしてみてください。</p>

<ul>
<li>自分の作りたいものを決めて、1日で作れるものを作る</li>
<li>斜め読みでいいのでRailsチュートリアルを読む

<ul>
<li><strong><a href="http://railstutorial.jp/">Ruby on Rails チュートリアル：実例を使って Rails を学ぼう</a></strong></li>
</ul>
</li>
<li>以下の本を斜め読みながら少しずつ知識を埋めていく

<ul>
<li><strong><a href="http://www.amazon.co.jp/gp/product/4873113679/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873113679&amp;linkCode=as2&amp;tag=morizyun00-22">初めてのRuby</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00P0UR1CA&amp;linkCode=as2&amp;tag=morizyun00-22">パーフェクトRuby</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/4774164100/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774164100&amp;linkCode=as2&amp;tag=morizyun00-22">Ruby on Rails 4 アプリケーションプログラミング</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/4798109339/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798109339&amp;linkCode=as2&amp;tag=morizyun00-22">UNIXの絵本</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/4774142042/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774142042&amp;linkCode=as2&amp;tag=morizyun00-22">Webを支える技術 -HTTP、URI、HTML、そしてREST</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/B00ENEGXUU/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00ENEGXUU&amp;linkCode=as2&amp;tag=morizyun00-22">Linuxシステム実践入門</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/4798120340/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798120340&amp;linkCode=as2&amp;tag=morizyun00-22">インターネット技術の絵本</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/4798105163/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798105163&amp;linkCode=as2&amp;tag=morizyun00-22">TCP/IPの絵本 ネットワークっておもしろい!</a></strong></li>
<li><strong><a href="http://www.amazon.co.jp/gp/product/B00EESW7K0/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00EESW7K0&amp;linkCode=as2&amp;tag=morizyun00-22">HTTPの教科書</a></strong></li>
</ul>
</li>
<li>このあたりの記事を見ながら、リンクを斜め読みしてみてください。

<ul>
<li><strong><a href="http://morizyun.github.io/blog/html-css-javascript-biginner/">HTML/CSS/JavaScript 初歩の初歩</a></strong></li>
<li><strong><a href="http://morizyun.github.io/blog/git-biginner-web-develop/">git 初心者のための資料まとめ</a></strong></li>
<li><strong><a href="http://morizyun.github.io/blog/javascript-learning-tech-yourself_01/">JavaScript 徹底入門のための資料＆書籍まとめ</a></strong></li>
<li><strong><a href="http://morizyun.github.io/blog/css3-html-front-coding-book-review/">HTML&amp;CSS フロントエンド 何度も読み直したい資料・ツールまとめ</a></strong></li>
</ul>
</li>
</ul>


<p>もし上記の本をこなして、飽きてきたら <strong><a href="https://twitter.com/zyunnosuke">Twitter - @zyunnosuke</a></strong>にメッセージしてください。
知りたいことに合わせて、初心者向けの本を紹介していきます。</p>

<h2>＜セクション３＞ 自分の作りたいものを作る</h2>

<p>自分や周りが使えるとほんのちょっと役に立ちそうな、できるだけ簡単なRailsアプリを作ってみてください。
こういったことを繰り返しながら、わからないことを少しずつググるといいかなと思います。
あとは、こういうことをもう少し詳しく知りたいと思えるようになったら、Amazonで評価の高い「入門書」を読んでみてください。
書籍って少しお高めなんですが、読んでおくと後でハマる確率が減るし、時間が節約になるんでもし可能なら是非。</p>

<h2>あとがき</h2>

<p>7/19に開催された<strong><a href="http://geekgarage.connpass.com/event/17518/">ギークガレージもくもく会</a></strong>でこの記事を書きました。
刺激を受けて、楽しかったです！ギークガレージいいところ！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift UIAlertController の初心者向け 使い方ガイド]]></title>
    <link href="http://morizyun.github.io/blog/swift-alertcontroller-snipet-ios-iphone-apple/"/>
    <updated>2015-07-05T19:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/swift-alertcontroller-snipet-ios-iphone-apple</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/479813578X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=479813578X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=479813578X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=479813578X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
なかなか時間がとれていませんが、Swiftの勉強をしている中でiOS8から、「UIAlertView」が deprecated(廃止予定) になったことを知りました。
新しい「UIAlertController」への移行が推奨されているそうです！</p>

<p>今回は今後使いそうな「UIAlertController」の書き方を知ったので俺得スニペットです！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Swiftで UIAlertController を呼び出す</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var alertController = UIAlertController(title: "sample title", message: "sample message", preferredStyle: .Alert)
</span><span class='line'>
</span><span class='line'>// ボタン 1を作成
</span><span class='line'>let firstAction = UIAlertAction(title: "button 1", style: .Default) {
</span><span class='line'>  action in println("button 1 が押されました")
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// ボタン 2を作成
</span><span class='line'>let secondAction = UIAlertAction(title: "button 2", style: .Default) {
</span><span class='line'>  action in println("ボタン 2 が押されました")
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// ボタンを配置
</span><span class='line'>alertController.addAction(firstAction)
</span><span class='line'>alertController.addAction(secondAction)
</span><span class='line'>
</span><span class='line'>// アラートを表示
</span><span class='line'>// 通常の ViewController で呼び出す場合
</span><span class='line'>presentViewController(alertController, animated: true, completion: nil)
</span><span class='line'>
</span><span class='line'>// AppDelegate で呼び出す場合
</span><span class='line'>// self.window!.rootViewController!.presentViewController(alertController, animated: true, completion: nil)</span></code></pre></td></tr></table></div></figure>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/Night___/items/f2877236a4182c566eed">Objective-C - iOS8でのダイアログ表示：廃止になるUIAlertViewと推奨されているUIAlertControllerのメリット - Qiita</a></strong></p>

<p><strong><a href="http://iphone-app-developer.seesaa.net/article/406520158.html">UIAlertController を AppDelegateで表示する: iPhoneアプリ開発備忘録</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPステータスコード 一覧[Webの基礎勉]]]></title>
    <link href="http://morizyun.github.io/blog/http-status-basic-rule/"/>
    <updated>2015-06-26T08:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/http-status-basic-rule</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774150363/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774150363&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774150363&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774150363" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
HTTPステータスの意味ちゃんと理解できてなかったなとの反省で、俺得でHTTPステータスの簡単な一覧をつくりました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>1xx Informational 情報</h2>

<p>リクエストをサーバーが受け取って、処理が継続することを表す。</p>

<table>
<thead>
<tr>
<th align="left">コード </th>
<th align="left"> メッセージ </th>
<th align="left"> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">100 </td>
<td align="left"> Continue </td>
<td align="left"> サーバーがリクエストの最初の部分を受け取りまだ拒否していないことを表す</td>
</tr>
<tr>
<td align="left">101 </td>
<td align="left"> Switching Protocols </td>
<td align="left"> サーバーはリクエストを理解して、プロトコルの変更を要求</td>
</tr>
<tr>
<td align="left">102 </td>
<td align="left"> Processing </td>
<td align="left"> 処理中を表す。WebDAVの拡張ステータスコード</td>
</tr>
</tbody>
</table>


<h2>2xx Success 成功</h2>

<p>リクエストをサーバーが理解して、受理されたことを表す。</p>

<table>
<thead>
<tr>
<th align="left">コード </th>
<th align="left"> メッセージ </th>
<th align="left"> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">200 </td>
<td align="left"> OK </td>
<td align="left"> リクエストが理解されて、要求に応じたレスポンスを返す</td>
</tr>
<tr>
<td align="left">201 </td>
<td align="left"> Created </td>
<td align="left"> リクエストは完了して、新しく作られたリソースのURIを返す</td>
</tr>
<tr>
<td align="left">202 </td>
<td align="left"> Accepted </td>
<td align="left"> リクエストは受理されたが、処理が完了していない場合に返す。PUTの処理中とか</td>
</tr>
<tr>
<td align="left">203 </td>
<td align="left"> Non-Authoritative Information </td>
<td align="left"> オリジナルではなく、ローカルやキャッシュの結果を返すときのレスポンス</td>
</tr>
<tr>
<td align="left">204 </td>
<td align="left"> No Content </td>
<td align="left"> リクエストは受理したが、返すレスポンスがない場合のコード</td>
</tr>
<tr>
<td align="left">205 </td>
<td align="left"> Reset Content </td>
<td align="left"> リクエストを受理して、ユーザー側の画面をリセットする場合に返す。POST送信後にブラウザを初期状態に戻すなど</td>
</tr>
<tr>
<td align="left">206 </td>
<td align="left"> Partial Content </td>
<td align="left"> 部分的Getリクエストを受理した時に返される。ダウンロードのレジュームなどて使われる</td>
</tr>
</tbody>
</table>


<h2>3xx Redirection リダイレクト</h2>

<p>リクエストを完了させるために追加的な処理が必要なことを表す。</p>

<table>
<thead>
<tr>
<th align="left">コード </th>
<th align="left"> メッセージ </th>
<th align="left"> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">300 </td>
<td align="left"> Multiple Choices </td>
<td align="left"> リクエストに対して複数のリソースが存在する場合に返す</td>
</tr>
<tr>
<td align="left">301 </td>
<td align="left"> Moved Permanently </td>
<td align="left"> リクエストしたリソースが、恒久的に移動した場合に返す。Locationヘッダに移動先のURLがある</td>
</tr>
<tr>
<td align="left">302 </td>
<td align="left"> Found </td>
<td align="left"> リクエストしたリソースが、一時的に移動した場合に返す。Location ヘッダに移動先のURLがある。元々はMoved Temporarily（一時的に移動した）</td>
</tr>
<tr>
<td align="left">303 </td>
<td align="left"> See Other </td>
<td align="left"> リクエストしたリソースが他のURLにあるときに返す。Location ヘッダに移動先のURLがある。他のリソースをもってレスポンスとするような場合に使う</td>
</tr>
<tr>
<td align="left">304 </td>
<td align="left"> Not Modified </td>
<td align="left"> リクエストしたリソースが更新されていないことを示す。例えば、If-Modified-Since:ヘッダを使用したリクエストを行い、そのヘッダに示された時間以降に更新がなかった場合に返される。</td>
</tr>
<tr>
<td align="left">305 </td>
<td align="left"> Use Proxy </td>
<td align="left"> レスポンスのLocationヘッダにあるProxyを使う必要が有ることを示す</td>
</tr>
<tr>
<td align="left">307 </td>
<td align="left"> Temporarily Redirect </td>
<td align="left"> リクエストしたリソースが一時的に移動した場合に返す。Locationヘッダに移動先のURLがある</td>
</tr>
</tbody>
</table>


<h2>4xx Redirection リダイレクト</h2>

<p>クライアントからのリクエストに誤りがあったことを表す。
実際にはもっとたくさん4xx系はあるけどメジャーどころを抜粋。多様なエラーを表す。</p>

<table>
<thead>
<tr>
<th align="left">コード </th>
<th align="left"> メッセージ </th>
<th align="left"> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">400 </td>
<td align="left"> Bad Request </td>
<td align="left"> クライアントのリクエストがおかしい場合に返される</td>
</tr>
<tr>
<td align="left">401 </td>
<td align="left"> Unauthorized </td>
<td align="left"> 認証が必要な場合に返される。Basic認証やDigest認証などを行うときに返される</td>
</tr>
<tr>
<td align="left">403 </td>
<td align="left"> Forbidden </td>
<td align="left"> リソースへのアクセスが拒否された。リクエストしたが処理ができない場合に返される</td>
</tr>
<tr>
<td align="left">404 </td>
<td align="left"> Not Found </td>
<td align="left"> リソースが無かった場合に返される</td>
</tr>
<tr>
<td align="left">405 </td>
<td align="left"> Method Not Allowed </td>
<td align="left"> 許可されていないメソッドを実行した場合に返される</td>
</tr>
<tr>
<td align="left">406 </td>
<td align="left"> Not Acceptable </td>
<td align="left"> Accept関連ヘッダの中に受理できない内容が含まれる場合に返される</td>
</tr>
</tbody>
</table>


<h2>5xx Server Error サーバーエラー</h2>

<p>サーバーサイドがリクエストの処理に失敗したことを表す。一部を抜粋。</p>

<table>
<thead>
<tr>
<th align="left">コード </th>
<th align="left"> メッセージ </th>
<th align="left"> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">500 </td>
<td align="left"> Internal Server Error </td>
<td align="left"> サーバー内にエラーが発生した場合に返される</td>
</tr>
<tr>
<td align="left">503 </td>
<td align="left"> Service Unavailable </td>
<td align="left"> サービスが一時的に過負荷やメンテナンスで利用できない場合に返される</td>
</tr>
<tr>
<td align="left">504 </td>
<td align="left"> Gateway Timeout </td>
<td align="left"> URIから推測されるサーバーから適切なレスポンスがなくタイムアウトした</td>
</tr>
</tbody>
</table>


<h2>あとがき</h2>

<p>ステータスコードをしっかり意識して、Webサービスを作っていきたい！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><a href="https://ja.wikipedia.org/wiki/HTTP%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89">HTTPステータスコード  Wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 初心者向け 参考資料[動画/チュートリアルなど]]]></title>
    <link href="http://morizyun.github.io/blog/swift-beginner-learing-ios-iphone-apple/"/>
    <updated>2015-06-24T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/swift-beginner-learing-ios-iphone-apple</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4800710707/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4800710707&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4800710707&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4800710707" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ちょっと時間ができたので、Swiftの勉強をはじめました。Objective-Cに比べてずっと書きやすくなっていますが、
ところどころまだググっても出てこない情報があったりして、いい具合にハマりましたw</p>

<p>今回は2日くらいSwiftを勉強をしていて、特に役に立った資料を中心にまとめていきます！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>[動画]Swift入門 - ドットインストール</h2>

<p><strong><a href="http://dotinstall.com/lessons/basic_swift">Swift入門 (全24回)</a></strong></p>

<p>プレミアム会員限定ですが、ドットインストールでSwiftの入門チュートリアルを見る事ができます。
日本語の入門動画として、Swiftの雰囲気を知るのに最適です！</p>

<h2>[チュートリアル] Swift日本語チュートリアル</h2>

<p><strong><a href="http://xavier.hateblo.jp/entry/2014/06/12/223346">Swift日本語チュートリアル ~ 前編（Apple公式ドキュメントSwift Tour±α）</a></strong></p>

<p><strong><a href="http://xavier.hateblo.jp/entry/2014/06/14/201418">Swift日本語チュートリアル ~ 後編（Apple公式ドキュメントSwift Tour±α）</a></strong></p>

<p>本当の初心者と言うよりは他の言語の経験者がSwiftを初めて勉強するときに、標準ライブラリを
調べながらなら一通りはコーディング出来るようになることを目標にしたチュートリアル。</p>

<h2>[コーディング規約] Swift</h2>

<p><strong><a href="https://github.com/raywenderlich/swift-style-guide">raywenderlich/swift-style-guide</a></strong></p>

<p>raywenderlich.com のSwiftのコーディング規約。スクリーンショットも多くて丁寧でわかりやすいっす。</p>

<p><strong><a href="http://qiita.com/susieyy/items/f71435cc962e70d81b37">Objective-C - Swiftコーディング規約@Wantedly - Qiita</a></strong></p>

<p>Wantedlyさんで使っているSwiftのコーディング規約。言語初心者の時にはついつい、あまり良くない
書き方をしてしまいがちなので、最初にコーディング規約を読んでおくと後で負債を作らずにすむと思います！</p>

<h2>[文法・言語機能] The Swift Programming Language（Swift言語） をまとめる</h2>

<p><strong><a href="http://qiita.com/kiyotaman/items/052f82e9f93590b79c64">The Swift Programming Language（Swift言語） をまとめる - Qiita</a></strong></p>

<p>クロージャーやサブスクリプトなどがまとめられているQiitaの記事。これはありがたいっす！</p>

<h2>[Xcode] 便利なショートカット</h2>

<p>XCode6で時短か短縮するためのショートカット。英語ですがわかりやすいのでオススメ！</p>

<p><strong><a href="http://iphonedev.tv/blog/2014/9/15/14-xcode-time-saving-shortcuts-memorize-and-improve-your-productivity">14 Xcode Time Saving Keyboard Shortcuts - Memorize and Improve Your Productivity</a></strong></p>

<p>こちらはエディタ画面内でのカーソル移動などを中心にショートカットを紹介している記事。</p>

<p><strong><a href="http://nanananande.helpfulness.jp/post-1837/">Xcode5を軽快に利用するためのショートカット[基本編]</a></strong></p>

<h2>[書籍] 詳細! Swift iPhoneアプリ開発 入門ノート</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4800710707/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4800710707&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4800710707&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4800710707" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />本屋さんで小一時間読み比べて、『<strong><a href="http://www.amazon.co.jp/gp/product/4800710707/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4800710707&amp;linkCode=as2&amp;tag=morizyun00-22">詳細! Swift iPhoneアプリ開発 入門ノート Swift 1.1+Xcode 6.1+iOS 8.1対応</a></strong>』にしました。Objective-Cでも同じシリーズが多数リリースされていて、
さすがに年季の違いを感じました。知りたいことがきちんと書かれているのも好印象。</p>

<br style="clear:both;"/>


<h2>サンプルコード</h2>

<p>GitHubがカジュアルに使われるようになったお陰で、サンプルソースが結構簡単に入手できるようになりました。</p>

<p><strong><a href="http://bundlr.com/clips/538e569809359743040000c0">Bundlr - SwiftとMagicalRecordを使って簡単なTodoアプリを作るチュートリアル - Qiita</a></strong></p>

<p>MagicalRecordとSwiftを使ったお手軽なTodoアプリのチュートリアル。スクリーンショットも豊富で、
ほとんど詰まることなく、チュートリアルができます。感謝感謝っす。</p>

<p><strong><a href="http://himaratsu.hatenablog.com/entry/swift/tiqav">SwiftでTiqav APIを叩くビューワアプリを100行でつくったよ - Think Big Act Local</a></strong></p>

<p>簡単な画像Viewerのアプリ。ソースコードも説明もわかりやすくて素敵です！</p>

<h2>初心者向け Tips</h2>

<p>久々にXCodeを触っていて、最初にちょっとハマった部分を中心にメモ。</p>

<h3>iPhone Simulatorでキーボードが表示されない</h3>

<p>XCode6からMacのキーボードがつながっている事になって、
ソフトウェアキーボードが表示されない場合があるそうです。
解決策は以下の通り。</p>

<pre>
iOS Simulator -> Hardware -> Keyboard ->「Connect Hardware Keyboard」のチェックを外す
</pre>


<h3>マシなiOSアプリのフォームを実装・デザインする</h3>

<p>普通のアプリっぽい挙動を目指していた過程ですごく参考になったWebの記事。こればいいね！</p>

<p><strong><a href="http://naoty.hatenablog.com/entry/2014/09/18/012246">マシなiOSアプリのフォームを実装・デザインする - naoty.to_s</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://tnakamura.hatenablog.com/entry/2014/10/20/how_to_use_the_cocoapods_in_swift">Swift で CocoaPods を使う - present</a></strong></p>

<p><strong><a href="http://paranishian.hateblo.jp/entry/xcode/keyboard-not-showing-in-ios-simulator">iOSシミュレータでキーボードが表示されない - paranitips</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realm Swift/objective-C/Android用のデータベース]]></title>
    <link href="http://morizyun.github.io/blog/realm-swift-database-ios-smartphone/"/>
    <updated>2015-06-21T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/realm-swift-database-ios-smartphone</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797371145/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797371145&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797371145&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797371145" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Swiftやobjective-Cなどを使ったiOSのアプリ開発や、
Javaを使ったAndroid開発で使えるローカルデータベースとして最近人気がある『<strong><a href="https://realm.io/jp/">Realm</a></strong>』の紹介です。</p>

<p>今回はまだ触り始めたばかりであまり知見もないので、紹介記事へのリンクをメインにします。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Realmの特徴</h2>

<pre>
* 使い方が簡単
* ゼロコピーの設計なので速い
* iOS、Androidでクロスプラットフォーム
</pre>


<h2>リンク集</h2>

<h3>公式ドキュメント</h3>

<p><strong><a href="https://realm.io/jp/docs/swift/latest/">Swift Docs - Realm is a mobile database: a replacement for SQLite &amp; Core Data</a></strong></p>

<p>公式ドキュメント。日本人のコミッターもいるそうで、とにかくドキュメントがわかりやすいのも特徴の一つ。</p>

<h3>Realm for Swift まとめ完全版</h3>

<p><strong><a href="http://qiita.com/okitsutakatomo/items/9134c5fa8bd4384a2acf">Realm for Swift まとめ完全版</a></strong></p>

<p>これだけ読んでも簡単な使い方ならわかるほどクオリティの高いまとめ。素晴らしすぎる。</p>

<h3>Realmを使ってデータ管理</h3>

<p><strong><a href="http://qiita.com/jtemplej/items/0443571fdbffbcea3e7f">Objective-C - Realmを使ってデータ管理【Swift編】-その2- - Qiita</a></strong><br/>
<strong><a href="http://qiita.com/jtemplej/items/10ed4bc0cc6519682e6e">iOS - Realmを使ってデータ管理【Swift編】-その3- - Qiita</a></strong></p>

<p>こちらもQiitaの記事ですが、Realmを使ってデータ管理するときに使いそうな細かいTipsが書かれている。Qiita素敵！</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Upsert」 大量のデータを一括でInsert/UpdateするGem！]]></title>
    <link href="http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql/"/>
    <updated>2015-06-14T18:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00YG8PXLI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00YG8PXLI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00YG8PXLI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00YG8PXLI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails/Rubyで大量のデータを一括で新規登録・更新スクリプト
を書く場合は、ActiveRecordは生成コストが高くて、必ずしも向いていません。そんな状況での利用にオススメなのが、この
『<strong><a href="https://github.com/seamusabshere/upsert">upsert</a></strong>』というGemです。</p>

<p>このGemがサポートしているデータベースは、<code>MySQL、PostgreSQL、SQLite3</code>です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Upsertが適した利用シーン</h2>

<p>実装としては、OracleやMySQLのPL/SQL、PostgreSQLのPL/pgSQLのスクリプトを一時的に定義して、
その中で対象テーブルに一致するキーのレコードがあればupdate、なければinsert処理を行ってくれます。
DB内部でレコードの有無を判定して、insert/update処理までおこなってくれるので、当然速度は早くなります。</p>

<p>また、Commitを複数件単位でまとめてくれる機能も持っているので、ActiveRecordで同じ機能を
実装する場合に比べると、更に速度が早くなります。</p>

<p>一方でデメリットとして、ActiveRecord側に設定しているvalidationや便利機能が使えなくなるので、
そのデメリットを考慮しても速度を優先させたいような処理で限定して使うことをおすすめします！</p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle install</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bulk Insert/Update</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;upsert&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecordでUpsertを使う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
にUpsertする場合は次のように記述します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;upsert/active_record_upsert&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Pet</span><span class="o">.</span><span class="n">upsert</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;beagle&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecordで一括でUpsertを行う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
に2件のデータを一括で、Upsertする場合は次のように記述します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bulk でinsert / updateを実行 (mass upsert)</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">connection_pool</span><span class="o">.</span><span class="n">with_connection</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Upsert</span><span class="o">.</span><span class="n">batch</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">table_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">upsert</span><span class="o">|</span>
</span><span class='line'>    <span class="n">upsert</span><span class="o">.</span><span class="n">row</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;beagle&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span><span class='line'>    <span class="n">upsert</span><span class="o">.</span><span class="n">row</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Pierre&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;tabby&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>あとがき</h2>

<p>Ruby/ActiveRecordで大量のデータを登録するようなスクリプトを書くことは
必ずしも適していない。。。かもしれませんが、Rubyで複雑なデータを加工して
登録したいようなケースもあると思います。
ぜひ、そういった時の速度改善に使ってみてください！</p>

<h2>おまけ</h2>

<p>2009年の記事ですが、結構面白いのでオススメです！</p>

<p><strong><a href="https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/">Mass inserting data in Rails without killing your performance</a></strong></p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「minimum-omniauth-scaffold」　Facebook/Twitter/GitHubログインを高速実装！]]></title>
    <link href="http://morizyun.github.io/blog/minimum-omniauth-scaffold/"/>
    <updated>2015-05-30T17:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/minimum-omniauth-scaffold</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4839926689/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839926689&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4839926689&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4839926689" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プロダクトを作る時にFacebookやTwitter、GitHubのログイン機能を組み込むのはかなり普通に必要になってきました。そんな時にすごく便利なのが、この「<strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">minimum-omniauth-scaffold</a></strong>」です。</p>

<p>実際にハッカソンの中で初めて使いましたが、10〜20分で簡単に実装できてしました。
以下の環境で実行できました！</p>

<pre>
Rails 4.2.1
Ruby 2.2.2
</pre>




<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Facebook/Twitter/GitHubログイン機能</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;minimum-omniauth-scaffold&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにこちらのgemは、Ruby2.0+、Rails4.0+環境用とのことです。</p>

<h2>OmniAuth用のScaffold</h2>

<p>以下のコマンドを実行して、OmniAuth用のScaffoldを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g minimum:omniauth:scaffold
</span></code></pre></td></tr></table></div></figure>


<h2>Facebook/Twitter/GitHubでアプリを作成してキーを登録</h2>

<h3>Facebook</h3>

<p><strong><a href="https://developers.facebook.com/apps">Facebook Developers - App</a></strong>でアプリを作成して、App IDとアプリのシークレットキーを取得。<br/>
※ 必須マークが無いが 「Callback URL」も入力必要</p>

<h3>Twitter</h3>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong>でアプリを作成して、キーを取得。<br/>
※　「新しいアプリを作成」作成後「Facebookでログインするウェブサイト」に「http://0.0.0.0:3000/」を入力</p>

<h3>GitHub</h3>

<p><strong><a href="https://github.com/settings/applications/new">GitHub Register a new OAuth application</a></strong>でアプリを登録してキーを取得。
※ Main URL／Callback URL：「http://0.0.0.0:3000/」</p>

<h3>config/settings.local.yml</h3>

<p><code>config/settings.local.yml</code>に上で取得した情報を登録。</p>

<h3>本番用の環境変数の設定</h3>

<p>キー情報などはgitリポジトリに含めないほうがいいです。ということでHerokuを使って環境変数にキー情報を登録するのはこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Twitter</span>
</span><span class='line'>heroku config:set <span class="nv">TWITTER_KEY</span><span class="o">=</span>xxxxxxxxxx <span class="nv">TWITTER_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># Facebook</span>
</span><span class='line'>heroku config:set <span class="nv">FACEBOOK_APP_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">FACEBOOK_APP_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># GitHub</span>
</span><span class='line'>heroku config:set <span class="nv">GITHUB_CLIENT_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">GITHUB_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<h3>認証用のテーブルを作成</h3>

<p>マイグレーションコマンドを実行して、認証に必要なテーブルを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>と、たったこれだけのコマンドでログイン認証に必要な機能をひと通り実装できてしまいます！</p>

<p>継続的に開発を続けてこられている作者の<strong><a href="https://twitter.com/shu_0115">@shu0115</a></strong>さんには感謝感謝です＾＾</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">shu0115/minimum-omniauth-scaffold</a></strong></p>

<p><strong><a href="http://qiita.com/shu_0115/items/6f5f0c210e9999da66be">Ruby 2.0.0-p247 + Rails 4.0.0 + minimum-omniauth-scaffold - Qiita [キータ]</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アブストラクトファクトリ Ruby 2.0.0 デザインパターン速攻習得[Abstract Factory][Design Pattern]]]></title>
    <link href="http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory/"/>
    <updated>2015-05-26T20:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-design-pattern-14-abstract-factory</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4894712857/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4894712857&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4894712857&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="200" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4894712857" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />GoFのデザインパターン(Design Pattern)の一つ、アブストラクトファクトリ(Abstract Factory)をRubyのサンプルコードで紹介します。</p>

<p>アブストラクトファクトリは、矛盾のないオブジェクトの生成を行うためのパターンです。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>ソースコードを使ったAbstract Factoryの説明</h2>

<p>Abstract Factoryをソースコードを使って説明します。<br/>
ここでは次のような池をサンプルとして取り上げます。</p>

<pre>
* 動物を表すクラス:
  * アヒルを表すDuckクラスは、食事(eat)メソッドを持っている
  * カエルを表すFrogクラスは、食事(eat)メソッドを持っている

* 植物を表すクラス:
  * 藻を表すAlgaeクラスは、成長(grow)メソッドを持っている
  * スイレンを表すWaterLilyクラスは、成長(grow)メソッドを持っている

池の生態系を生成するクラス:
  * コンストラクタで動物と植物を定義する
  * 動物、植物のオブジェクトを返すメソッドを持っている

* 池の環境(動物と植物の組み合わせ)は次の2種類のみが許されている
  * DuckとWaterLily
  * FrogとAlgae
</pre>


<p>上を満たすコードを書いていきます。</p>

<p>まず、アヒル(Duckクラス)とカエル(Frogクラス)は次のようになります。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># アヒル</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 食べる(eat)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">eat</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;アヒル </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は食事中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># カエル</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Frog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 食べる(eat)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">eat</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;カエル </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は食事中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一方、藻(Algaeクラス)とスイレン(WaterLilyクラス)のは次のようになります。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 植物/藻</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Algae</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;藻 </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は成長中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 植物/スイレン</span>
</span><span class='line'><span class="k">class</span> <span class="nc">WaterLily</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grow</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;スイレン </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> は成長中です&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に池を作成する前に、「池の環境の制約」について考えます。</p>

<pre>
* 池の環境(動物と植物の組み合わせ)は2種類のみが許されている
  * アヒル(Duckクラス)とスイレン(WaterLilyクラス)
  * カエル(Frogクラス)と藻(Algaeクラス)
</pre>


<p>この池の環境の制約を守ること、<strong>言い換えると矛盾のないオブジェクトの組み合わせを作る</strong>のが「<strong>Abstract Factoryパターン</strong>」です。
今回はこの矛盾のない環境の作成を次の２つのクラスに担当してもらいます。</p>

<pre>
* カエル(Frog)と藻(Algae)の生成を行う => FrogAndAlgaeFactory
* アヒル(Duck)とスイレン(WaterLily)の生成を行う => DuckAndWaterLilyFactory
</pre>


<p>さらに上の２つのクラスのベースとなる池の生態系を表すクラス<code>OrganismFactory</code>を作り、上記のクラスが継承するようにします。</p>

<p>ということで、ソースコードはこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 池の生態系を作る (Abstract Factory)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">OrganismFactory</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">number_plants</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="c1"># 池の動物を定義する</span>
</span><span class='line'>    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">animal</span> <span class="o">=</span> <span class="n">new_animal</span><span class="p">(</span><span class="s2">&quot;動物 </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="c1"># 池の植物を定義する</span>
</span><span class='line'>    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">plant</span> <span class="o">=</span> <span class="n">new_plant</span><span class="p">(</span><span class="s2">&quot;植物 </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 植物についてのオブジェクトを返す</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_plants</span>
</span><span class='line'>    <span class="vi">@plants</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 動物についてのオブジェクトを返す</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_animals</span>
</span><span class='line'>    <span class="vi">@animals</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># カエル(Frog)と藻(Algae)の生成を行う (Concrete Factory)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FrogAndAlgaeFactory</span> <span class="o">&lt;</span> <span class="no">OrganismFactory</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Frog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Algae</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># アヒル(Duck)とスイレン(WaterLily)の生成を行う(Concrete Factory)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DuckAndWaterLilyFactory</span> <span class="o">&lt;</span> <span class="no">OrganismFactory</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Duck</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="no">WaterLily</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のプログラムを実行した結果を載せておきます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="o">=</span> <span class="no">FrogAndAlgaeFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_animals</span>
</span><span class='line'><span class="n">animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">eat</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 0 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 1 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 2 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; カエル 動物 3 は食事中です</span>
</span><span class='line'><span class="n">plants</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_plants</span>
</span><span class='line'><span class="n">plants</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plant</span><span class="o">|</span> <span class="n">plant</span><span class="o">.</span><span class="n">grow</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; 藻 植物 0 は成長中です</span>
</span><span class='line'>
</span><span class='line'><span class="n">factory</span> <span class="o">=</span> <span class="no">DuckAndWaterLilyFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_animals</span>
</span><span class='line'><span class="n">animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">eat</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; アヒル 動物 0 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; アヒル 動物 1 は食事中です</span>
</span><span class='line'><span class="c1">#=&gt; アヒル 動物 2 は食事中です</span>
</span><span class='line'><span class="n">plants</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">get_plants</span>
</span><span class='line'><span class="n">plants</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plant</span><span class="o">|</span> <span class="n">plant</span><span class="o">.</span><span class="n">grow</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; スイレン 植物 0 は成長中です</span>
</span><span class='line'><span class="c1">#=&gt; スイレン 植物 1 は成長中です</span>
</span></code></pre></td></tr></table></div></figure>


<p>矛盾のない組み合わせて、オブジェクトを生成できた事がわかります。</p>

<p>このサンプルソースはGitHubにも置いています。</p>

<p><a href="https://github.com/morizyun/ruby_design_pattern_sample" class="button big primary">サンプルソース(GitHub)</a></p>

<h2>Abstract Factoryの構成</h2>

<p>Abstract Factoryは次の３つの要素で構成されています。</p>

<pre>
AbstractFactory: ConcreteFactoryの共通部分の処理を行う(この例ではPond)
ConcreteFactory: 実際にオブジェクトの生成を行う
(この例ではFrogAndAlgaeFactoryとDuckAndWaterLilyFactoryクラス)
Product: ConcreteFactoryによって生成される側のオブジェクト
(この例では、Duck，Frog, WaterLily, algaeクラス)
</pre>


<h2>アブストラクトファクトリのメリットは？</h2>

<pre>
* 関連し合うオブジェクトの集まりを生成することができる
* 整合性が必要となるオブジェクト群を誤りなしに生成できる
</pre>


<h2>Special Thanks</h2>

<p><a href="https://twitter.com/chinmo">@chinmo</a>さんにアブストラクトファクトリについて<a href="https://gist.github.com/chinmo/6195212">コード付きのコメント</a>を頂きました。深謝です！</p>

<p>ma2さんにブログ上に記述したコードがOrganismFactoryを継承していない部分のミスをご指摘頂きました。ミスすんませんでした＆ma2さん、本当に有難うございます！</p>

<p><a href="http://murayama.hatenablog.com/entry/20090706/1246855224">Factory - Murayama Blog.</a></p>

<p><a href="http://capm-network.com/?tag=%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-AbstractFactory">デザインパターン-AbstractFactory</a></p>

<p><a href="http://www.amazon.co.jp/gp/product/4894712857/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4894712857&amp;linkCode=as2&amp;tag=morizyun00-22">Amazon.co.jp： Rubyによるデザインパターン: Russ Olsen, ラス・オルセン, 小林 健一, 菅野 裕, 吉野 雅人, 山岸 夢人, 小島 努: 本</a></p>

<h2>変更来歴</h2>

<p>12/12/10 23:10 11回FactoryをFactoryMethodとAbstractFactoryに分割<br/>
12/12/11 00:00 書籍へのリンクをAmazon アフィリエイトに変更<br/>
13/06/21 19:10 Ruby2.0.0対応、読みづらい部分を修正<br/>
13/08/15 13:15 モデリング・説明が不適切だったため、修正<br/>
14/01/18 09:35 継承の記述が抜けていたため、修正<br/>
15/05/26 20:00 コメントの記述にミスがあったので修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[セルフトーク・マネジメントのすすめ。なりたい自分を手に入れよう[書評]]]></title>
    <link href="http://morizyun.github.io/blog/selftalking-management-book-review/"/>
    <updated>2015-05-25T22:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/selftalking-management-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00N0XOWTO/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00N0XOWTO&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00N0XOWTO&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00N0XOWTO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B00N0XOWTO/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00N0XOWTO&amp;linkCode=as2&amp;tag=morizyun00-22">セルフトーク・マネジメントのすすめ</a></strong>』を『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』
で読みました。自分をコントロールして、コンスタントに実力を発揮するためには自分自身のメンタルを常にベストな状態にする必要があります。
そんな時に役に立つのがこの『<strong>セルフトーク・マネージメント</strong>』だそうです。僕自身、人前で話をするのは苦手なので、こういった書籍を通して、
少しでも「理想とする自分」に近づけるように、努めたいと思っています。</p>

<p>ここでは、この書籍の中で特に参考になった部分を中心に書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>セルフトークとは？</h2>

<p>セルフトークとは、自分のアイデンティティや価値観、世界観といった「自分が信じているもの/Belief」が揺らいだ時に発生するものです。
このセルフトークによって感情が誘発され、それに基づいて行動が誘発されていきます。</p>

<h2>自分をコントロールするいくつかの方法</h2>

<p>以下の3つは比較的よく知られている自分をコントロールするための手法です。
自己啓発セミナーなどは、主に「アイデンティティや価値観、世界観」を組み替えることで自分をより良くします。
ポジティブシンキングは、感情を制御することで行動を変えていきます。
また認知行動療法は、誤った認識や歪んだ先入観による非合理的心情を修正すること。まず行動を変えてみるという手法です。</p>

<p>このセルフトーク・マネージメントは上記の方法と違い、感情を誘発する「言葉」を認識し、理性によって上手くコントロール
することで、感情や行動を制御するという手法です。理解さえすれば、合理的で馴染みやすい方法だと思います。</p>

<h2>セルフトークを「変える」</h2>

<p>実際にセルフトークをマネージメントする方法の最初にセルフトークを「変える」というのがあります。</p>

<pre>
1) セルフトークの状態を認識。ポジティブかネガティブかを意識する
2) 「感情による反応」を「理性による対応」に置き換える
</pre>


<p>究極的にはどんな質問を自分に投げかけられるかであり、それによってセルフトークを変える事ができる。</p>

<h2>セルフトークを「使う」</h2>

<p>セルフトークを使って、「理性による対応」を生み出すことに慣れて、使いこなし続けることで
緊張をほぐしたり、自分をいい状態に持っていくことができます。大切なことはセルフトークを通して、
悩むのではなく、考えること。もし自分がいいリーダーになりたいのであれば、「リーダーとしてどうあるべきか」
を常に考え続けることで、セルフトークを使いこなすすべを身につけていくことができます。</p>

<h2>セルフトークを「減らす」</h2>

<p>感情によって生み出される反応をできるだけ減らすことで、より良い状態を維持することを心がけます。
これは単純にセルフトークを認識して、言語化することで解決すべき問題の一つとして昇華させます。</p>

<h2>セルフトークを「なくす」</h2>

<p>スポーツにおけるゾーンのように、理性を司るセルフトークでいっぱいにすることで、本当に集中した状態を生み出します。
ポイントは結果ではなく、プロセス自体を楽しみ、目的とすることで、時間の縛りから、自由になることである。</p>

<h2>あとがき</h2>

<p>ちょっと書いた内容が具体性が乏しく、上手くノウハウを紹介することができませんでした。。。
でも私個人にはこのセルフトークを意識することで、色んな場面で自分を客観的に捉える事ができるようになってきました。
もしお時間があれば、ぜひ試しに読んでみてください＾＾</p>

<h2>Kindle Voyage いいよ！</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=484433624X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00M0EVYCC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00M0EVYCC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この本ですが、『<strong><a href="http://www.amazon.co.jp/gp/product/B00M0EVYCC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00M0EVYCC&amp;linkCode=as2&amp;tag=morizyun00-22">Kindle Voyage</a></strong>』で読みました。kindleは6インチでちっちゃいから読みにくい
とか、白黒残念とか脳内で妄想していました。でも買ってみると自分の読書体験を塗り替えるほどのプロダクトでした。
何より読みやすい、読書が楽しいです。voyageなら、画面もめっちゃ綺麗です。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
</feed>
