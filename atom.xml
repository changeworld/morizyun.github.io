<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-02T22:03:05+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 1.7 + Kibana 4.1 + Marvel のMacへのセットアップ]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac/"/>
    <updated>2016-01-02T21:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00MPDUQQI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00MPDUQQI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00MPDUQQI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00MPDUQQI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<ul>
<li>全文検索エンジンの『<strong><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch 1.7.4</a></strong>』</li>
<li>Elasticsearchのデータ表示のツール『<strong><a href="https://www.elastic.co/products/kibana">Kibana 4.1.4</a></strong>』</li>
<li>Elasticsearchの管理ツール『<strong><a href="https://www.elastic.co/products/marvel">Marvel</a></strong>』</li>
</ul>


<p>をMac Yosemiteに環境構築する手順をまとめました。</p>

<p>どちらも最新版からは少し古いバージョンですが、日本語対応の
「<strong><a href="https://github.com/elastic/elasticsearch-analysis-kuromoji">elastic/elasticsearch-analysis-kuromoji - GitHub</a></strong>」
等をインストールしやすくするためにこのバージョンを選びました。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Elasticsearchとは</h2>

<p>ElasticSearchは、Apache Lucene 上で稼働するオープンソースの全文検索システムのことです。
REST APIを使うことができ、jsonでやり取りを行う事ができる。</p>

<h2>Elasticsearch のインストール</h2>

<p>Macの場合は、まずはJavaのインストールです。
<strong><a href="http://www.amazon.co.jp/gp/bestsellers/computers/2151977051/ref=pd_zg_hrsr_computers_1_3_last">Java SE - Downloads | Oracle</a></strong>
からファイルをダウンロードして、インストールします。</p>

<p>次に『<strong><a href="https://www.elastic.co/downloads/past-releases/">Download Elasticsearch | Elastic</a></strong>』からファイルをダウンロードします。</p>

<p>今回は Elasticsearchの 1.7.4をインストールします。理由は、2.0系からsha1のチェックを行うそうなんですが、
plugin系が必ずしも対応していないようです。今回は日本語対応の kuromojiをつかたかったので、少し古いバージョンを使っています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">elasticsearch</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 自動起動の設定</span>
</span><span class='line'><span class="n">ln</span> <span class="o">-</span><span class="n">sfv</span> <span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">elasticsearch</span><span class="o">/*.</span><span class="n">plist</span> <span class="o">~</span><span class="sr">/Library/</span><span class="no">LaunchAgents</span>
</span><span class='line'><span class="n">launchctl</span> <span class="nb">load</span> <span class="o">~</span><span class="sr">/Library/</span><span class="no">LaunchAgents</span><span class="o">/</span><span class="n">homebrew</span><span class="o">.</span><span class="n">mxcl</span><span class="o">.</span><span class="n">elasticsearch</span><span class="o">.</span><span class="n">plist</span>
</span></code></pre></td></tr></table></div></figure>


<h2>日本語対応で elasticsearch-analysis-kuromoji をインストール</h2>

<p>ターミナルで以下を実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plugin</span> <span class="n">install</span> <span class="n">analysis</span><span class="o">-</span><span class="n">kuromoji</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vi config/elasticsearch.yml</code>でファイルを開いて以下を追加。デフォルトで kurmoji を使うようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">################################## Custom ################################</span>
</span><span class='line'><span class="c1"># Using kuromoji in default</span>
</span><span class='line'><span class="n">index</span><span class="o">.</span><span class="n">analysis</span><span class="o">.</span><span class="n">analyzer</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">type</span><span class="p">:</span> <span class="n">custom</span>
</span><span class='line'><span class="n">index</span><span class="o">.</span><span class="n">analysis</span><span class="o">.</span><span class="n">analyzer</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">tokenizer</span><span class="p">:</span> <span class="n">kuromoji_tokenizer</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下が動作確認の手順です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="o">-</span><span class="no">XPUT</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span><span class="mi">9200</span><span class="o">/</span><span class="n">dummy</span><span class="o">/</span><span class="nb">test</span><span class="o">/</span><span class="mi">1</span> <span class="o">-</span><span class="n">d</span> <span class="s1">&#39;{&quot;tag&quot;: &quot;foo&quot;, &quot;text&quot;: &quot;bar&quot;}&#39;</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;_index&quot;</span><span class="ss">:&quot;dummy&quot;</span><span class="p">,</span><span class="s2">&quot;_type&quot;</span><span class="ss">:&quot;test&quot;</span><span class="p">,</span><span class="s2">&quot;_id&quot;</span><span class="ss">:&quot;1&quot;</span><span class="p">,</span><span class="s2">&quot;_version&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s2">&quot;created&quot;</span><span class="ss">:true</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>データビジュアライゼーション Kibana</h2>

<p>ミーハーなので データのビジュアライゼーションツール『<strong><a href="https://www.elastic.co/products/kibana">Kibana</a></strong>』
もインストールします。後で使うかもくらいですww</p>

<p>まずはnodeとnmpが必要となります。もしまだの場合は、
『<strong><a href="http://qiita.com/tagosaku324/items/bf1fe149c38c99728c72">macでNode.jsの環境設定 - Qiita</a></strong>』
を参考にしながらインストールしてみてください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># npm を最新にします</span>
</span><span class='line'><span class="n">npm</span> <span class="n">update</span>
</span><span class='line'>
</span><span class='line'><span class="n">wget</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">download</span><span class="o">.</span><span class="n">elastic</span><span class="o">.</span><span class="n">co</span><span class="o">/</span><span class="n">kibana</span><span class="o">/</span><span class="n">kibana</span><span class="o">/</span><span class="n">kibana</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">-</span><span class="n">darwin</span><span class="o">-</span><span class="n">x64</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'><span class="n">unzip</span> <span class="n">kibana</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">-</span><span class="n">darwin</span><span class="o">-</span><span class="n">x64</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'><span class="n">mv</span> <span class="n">kibana</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">-</span><span class="n">darwin</span><span class="o">-</span><span class="n">x64</span> <span class="n">kibana</span>
</span><span class='line'><span class="n">cd</span> <span class="n">kibana</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># kibana のサーバを起動</span>
</span><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">kibana</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:5601/</code> にアクセスするとKibanaの画面が見れると思います。</p>

<p><img src="https://farm6.staticflickr.com/5659/23996427772_e8904e5b3a.jpg" width="500" height="340"></p>

<p>こんな感じの画面が見れれば成功だと思います！</p>

<h2>Elasticsearchの管理プラグイン Mervel</h2>

<p>つづいて、Elasticsearchの管理プラグイン「<strong><a href="https://www.elastic.co/products/marvel">Marvel</a></strong>」をインストールします。
クラスタやインデックスのキャッシュヒット、ドキュメント数などを閲覧できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plugin</span> <span class="n">install</span> <span class="n">elasticsearch</span><span class="o">/</span><span class="n">marvel</span><span class="o">/</span><span class="n">latest</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://localhost:9200/_plugin/marvel</code> にアクセスすると Marvelの画面が見れ得ると思います。</p>

<p><img src="https://farm2.staticflickr.com/1461/23828851120_b45ed81acf.jpg" width="500" height="435"></p>

<p>「Dashboard > Sense」と選択すると画面から簡単にクエリを実行できます！</p>

<p><img src="https://farm2.staticflickr.com/1451/23498091433_13eab6cbf2.jpg" width="500" height="341"></p>

<h2>おまけ</h2>

<p>Elasticsearchのクラスタ情報等のフロントエンドには、
『<strong><a href="https://github.com/mobz/elasticsearch-head">mobz/elasticsearch-head - GitHub</a></strong>』
もあります。結構便利です。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/watermint/items/fc04baa184be8cbfb251">Using ELK(ElasticSearch 1.4.2 + Logstash 1.4.2 + Kibana 4 Beta3) - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/atsuya046/items/c53987153487f05e31fd">MacでElasticsearch(1.5.x) + Kuromojiをインストール - Qiita</a></strong></li>
<li><strong><a href="http://ruby-rails.hatenadiary.com/entry/20151018/1445142266">RailsでElasticsearch: 全文検索を実装 - Rails Webook</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails初学者向け】Nokogiriをつかって他のWebサイトから情報を取得しよう]]></title>
    <link href="http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer/"/>
    <updated>2016-01-01T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797376279/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797376279&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797376279&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797376279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ここでは、Rails初学者向けにWebサイトから情報を収集してくるチュートリアルを紹介します。
Nokogiriを使ったサンプルアプリを作ります！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Nokogiriの基本的な説明</h2>

<p><strong><a href="http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/">Nokogiri を使った Rubyスクレイピング</a></strong></p>

<h2>プロジェクトを作成</h2>

<h3>ローカル開発の場合</h3>

<p>ターミナルで以下のコマンドを実行してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 新しいRailsアプリを作成
</span><span class='line'>rails new web_scraping_sample --skip-bundle
</span><span class='line'>
</span><span class='line'># web_scraping_sample のフォルダに移動
</span><span class='line'>cd web_scraping_sample</span></code></pre></td></tr></table></div></figure>


<h3>Cloud 9の場合</h3>

<ul>
<li>『<strong><a href="https://c9.io/">Cloud9</a></strong>』にログインして新しいworkspaceを作成</li>
<li>公開していい場合は public 、公開したくない場合は private のRailsアプリを作成してください</li>
</ul>


<h2>Gemfileに以下を追加</h2>

<p>プロジェクト直下のGemfileを開いて以下を追加して下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Web Scraping</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加したらターミナルで以下のコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">jobs</span><span class="o">=</span><span class="mi">4</span> <span class="o">--</span><span class="n">path</span><span class="o">=</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby Gemライブラリをインターネットから持ってきて、自動でローカルに保存します。</p>

<h2>rake タスクの作成</h2>

<p>Rakeタスクを作成します。ターミナルで以下のコマンドを実行してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># railsコマンドで rake タスク を作成(generate)します</span>
</span><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">task</span> <span class="n">scrape</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、<code>lib/tasks/scrape.rake</code> が作成されます。</p>

<p>ちなみに、<code>Rake</code> とはRubyで記述されたプログラムをコマンドプロンプト(ターミナル)から呼び出し、実行することができる仕組みのことです。</p>

<p>rakeタスクをもう少し知りたい場合は、「<strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rakeタスクをつくる</a></strong>」がオススメです！</p>

<h2>取得スクリプトを書く</h2>

<p>今回は NaverまとめのTechページからタイトルの一覧を取得する手順です。</p>

<p><code>lib/tasks/scrape.rake</code>を開いて以下の内容を追記してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># URLにアクセスするためのライブラリの読み込み</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:scrape</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;NaverまとめのTechページからタイトルを取得&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:naver_title</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># スクレイピング先のURL</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://matome.naver.jp/tech&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">charset</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">charset</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">charset</span> <span class="c1"># 文字種別を取得</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="c1"># htmlを読み込んで変数htmlに渡す</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># htmlをパース(解析)してオブジェクトを作成</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">charset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//li[@class=&quot;mdTopMTMList01Item&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># タイトルの取得</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">node</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">inner_text</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実行すると以下の様になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">scrape</span><span class="ss">:naver_title</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; 写真撮って探しものができるアプリ3選</span>
</span><span class='line'><span class="c1"># =&gt; 洋楽好き必見！！音楽の世界が広がるアプリ７選</span>
</span><span class='line'><span class="c1"># =&gt; スマホやPCの「ブルーライト」の量が破壊的！健康対策は大丈夫？</span>
</span><span class='line'><span class="c1"># =&gt; 趣味はかどるわー！ディープなSNSがこんなにあった(ﾟдﾟ)</span>
</span><span class='line'><span class="c1"># =&gt; ちょっとしたシーンで役立つ１０のショートカットキー</span>
</span><span class='line'><span class="c1"># =&gt; ネイルでスマホを操れる？『爪センサー』が画期的</span>
</span><span class='line'><span class="c1"># =&gt; 壁を有効活用したい・・！お洒落な「壁掛けアイテム」たち</span>
</span><span class='line'><span class="c1"># =&gt; Googleも開始。「パスワードなし」でログインの時代キタ？</span>
</span><span class='line'><span class="c1"># =&gt; イヤホンの音がクリアに…！身近ガジェットの簡単お手入れ法</span>
</span><span class='line'><span class="c1"># =&gt; 日本にもこれ欲しい！海外で発売されている斬新な便利グッズ</span>
</span><span class='line'><span class="c1"># =&gt; 次々と数億円を集めるスタートアップが魅力的だった</span>
</span><span class='line'><span class="c1"># =&gt; ３Dじゃない方のプリンターも面白いのがたくさんあった</span>
</span><span class='line'><span class="c1"># =&gt; なにこれスゴい！自転車を盗んだヤツを見つける最新グッズ</span>
</span><span class='line'><span class="c1"># =&gt; トラックボールで作業効率UP！もうマウスなんて使わない！</span>
</span><span class='line'><span class="c1"># =&gt; 可視化でわかりやすく！医療の見える化が思った以上に見えている！</span>
</span><span class='line'><span class="c1"># =&gt; 眠れない夜にさよなら「本当に熟睡出来る」評判の快眠アプリ5選</span>
</span><span class='line'><span class="c1"># =&gt; エネループの代わりになる「おしゃれな」充電池たち</span>
</span><span class='line'><span class="c1"># =&gt; なにこれすごい…アメリカ軍の開発が未来を先取りしてる</span>
</span><span class='line'><span class="c1"># =&gt; 手に着けるだけのリストバンド型ガジェットで健康を記録する</span>
</span><span class='line'><span class="c1"># =&gt; AppleWatchピンチ？進化したスマートウォッチのいま</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Nokogiriで参考になりそうなサイト</h2>

<p>実際にNokogiriのコードを書くときに役に立ちそうなチートシート的なサイトを紹介しておきます。</p>

<ul>
<li><strong><a href="http://d.hatena.ne.jp/otn/20090509/p1">スクレイピングのためのNokogiri利用メモ</a></strong></li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="http://www.u-ziq.com/blog/2007/12/ruby_on_rails.html">初心者向けのRuby on Railsの用語説明</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hard Things 成長する組織で大切なことを知ることができる [書評]]]></title>
    <link href="http://morizyun.github.io/blog/hard-things-ben-horowitz-book-review/"/>
    <updated>2015-12-31T21:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/hard-things-ben-horowitz-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00W535LOU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W535LOU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00W535LOU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00W535LOU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ベンチャーキャピタル「アンドリーセン・ホロウィッツ」の共同創業者ベン・ホロウィッツが書いた
『<strong><a href="http://www.amazon.co.jp/gp/product/B00W535LOU/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W535LOU&amp;linkCode=as2&amp;tag=morizyun00-22">Hard Things</a></strong>』
を読んだのでその感想です。</p>

<p>題名の「Hard Things(困難)」通り、ベン・ホロウィッツが経験した様々な苦難が切実に語られている書籍。
華々しく語られるスタートアップ業界は、実は本当はそんなに素晴らしいことばかりではなく、様々な困難を切り開いてきたのだと知ることができます。</p>

<p>この本の中から特に面白かった点を中心に書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>組織運営で重要なこと</h2>

<pre>
- 組織が何をこれからすべきかを知ること
- 組織がすべきことを実行していくこと
</pre>


<p>「組織が何をこれからすべきかを見つけられる」タイプのマネージャーは、たくさんの情報を収集し、大きな決断を躊躇なくこなすことができる。</p>

<p>「組織がすべきことを実行していくのが特異」なタイプのマネージャーは、実行・改善することに価値を置く。一方で不完全な状態で判断をしないと
いけないため、大きな決断をするときに、躊躇しやすい傾向にある</p>

<h2>リーダーの属性</h2>

<pre>
- スティーブ・ジョブズのようにビジョンを語り、優秀な人を惹きつけ続ける力
- 心の底から部下を気遣って行動することで、組織に属することに誇りを持って行動させられる力
- 素晴らしいアイデアを選りすぐり、実現にこぎつける純然たる経営能力
</pre>


<h2>正しい動機からフィードバックを与える</h2>

<pre>
- 相手の成功を助けるための、フィードバックを与えよう
- 相手に味方だと伝え、感情を伝える努力をしよう
- フィードバックは迅速に、頻繁に行おう
</pre>


<h2>社員が直面する問題解決に貢献しやすい環境を提供出来ているか？</h2>

<pre>
- 仕事をやり遂げれば、良いことが訪れると確信できる(動機付け)
- コミュニケーションが活発化され、大量の知識が共有されることでコンテキストが明確になっていること
- 社員が新たなスキルを身につけるために、組織は出来る限りの投資を行う
</pre>


<h2>苦闘を愛せ</h2>

<p>個々人独自の性格を愛し、自分の生い立ちを愛し、自分の直感を信じよう。
困難に直面した時、何をすべきかは自らが判断するしかないのだから。
この言葉はスタートアップのCEOに当てたメッセージだが、本質的にはどんな仕事の人にも当てはまると思う。</p>

<h2>プロダクト・マネージャーのあるべき姿</h2>

<pre>
- 何をすべきかを明確にして、実現するまでを管理する
- ドキュメントと口頭の両方で明確なコミュニケーションを取る
- 他のメンバーに役立つドキュメントの整備を徹底する
- 製品の欠陥を予測して、真の解決策を準備する
- 計画をたてる段階では「優れた価値を届けること」に注力し、リリース後は売上を基準に考える
- マスコミに書いてもらいたいストーリーを考える
- 規律を重んじて、毎週時間通りに状況報告を行う
</pre>


<h2>経営の品質は社員のライフサイクルにある</h2>

<p>社員のモチベーションが、経営の品質を図る上で特に重要な指標となる。</p>

<pre>
- 社員は胸を躍らせて出社しているか？
- 社員は会社のミッションを信じているか？
- 会社に出社することを、心から楽しみにしているか？
- 社員は自分が期待されていることを明確に理解しているか？
</pre>


<p>人事責任者はプロセスを正確に設計し、マネージャーの改善に心から貢献する。</p>

<h2>目の前で行われていることを理解する</h2>

<p>目に見える成果だけを追ってはダメだ。ソフトウェアの開発責任者が欠陥のあるプラットフォームを放置して、
無理やり幾つもの新機能を追加すれば、その場では目標が達成できるように見えるかもしれないが、次の
バージョンアップが不可能になる。目の前で何が行われているかを正確に理解すべきだ。</p>

<h2>個人面談で役立つ質問の例</h2>

<pre>
- やり方を改善するとしたら、どんな点をどうすればいいと思う？
- 組織で最大の問題点は何だと思う？ その理由は？
- この職場で働く、一番不愉快な点は何？
- 一番頑張って貢献しているのは誰だと思う？誰を尊敬する？
- キミがCEOだとしたら、どんな改革をしたい？
- 我々の製品で一番気に入らない点はどこ？
- われわれがチャンスを逃している点があるとしたらどこだろう？
- 本来やらなければならないのに、今やっていないことは何だろう？
- この会社で働くのは楽しい？
</pre>


<h2>企業文化の重要性</h2>

<p>企業文化は、「働くのに楽しい場所」という根本的な価値を維持するのに大きな意味を持つ。
そして、顧客に価値を届け、美しい製品を作り続けられるような仕事のやり方を根付かせる。
長時間にわたって、大勢の社員の行動に影響を与えられるような重要な点に絞って企業文化を考えるべきだ。</p>

<h2>組織が大きくなることによる課題</h2>

<p>組織が大きくなることによる課題は以下の様なことだ。</p>

<pre>
- 組織内のコミュニケーション
- 共通認識
- 意思決定
</pre>


<p>専門性を担保するための組織構造が必要となる。だが、すべての組織デザインは悪だという原則を忘れるな。
会社のある部分のコミュニケーションを犠牲にする事によって、他の部分のコミュニケーションを改善していることが重要だ。</p>

<h2>組織のデザイン</h2>

<p>組織デザインのフローは次の通り。</p>

<pre>
(1) どの部分に最も強いコミュニケーション経路が必要かを考える
(2) どんな意思決定が必要なのかを検討する
(3) 重要度の高い意思決定・コミュニケーション経路を優先する
(4) それぞれの部門が誰を管理するのかを決める
(5) 優先しなかったコミュニケーション経路を認識する
(6) 優先しなかったコミュニケーション経路から出る問題を最小限にする
</pre>


<h2>ワークフローのデザイン</h2>

<p>ワークフローのデザインにおける重要な点は次の通り。</p>

<pre>
- 成果に集中すること。プロセス化によって何を得られるのか？
- プロセスのそれぞれのステップごとに、何が必要か？それが正しく得られているかを確認すること
- 責任の所在を明確にする。社員のパフォーマンスを可視化する
</pre>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/rails-learning-start-dash-slide/"/>
    <updated>2015-12-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-learning-start-dash-slide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774178020/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774178020&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774178020&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774178020" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
2015/12/22に社内勉強会で「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表をしてきました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>発表スライド</h2>

<p>まずは発表スライドはこちら！</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/h23sQZZPbyzwK6" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2>特に伝えたかったこと</h2>

<ul>
<li>Web開発は、git/javascript/css/ruby/CI等々覚えることたくさんで大変</li>
<li>新しい技術もどんどん生まれていくので、学び続けることが大切</li>
<li>学び続けるためには、「楽しむこと」。楽しめるものを見つけよう</li>
<li>Railsは日本語ドキュメント充実してるから、Web 開発を始めたいなという人におすすめ</li>
</ul>


<h2>オススメリンク</h2>

<ul>
<li>(開発環境)

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac / Rails開発環境構築手順</a></strong></li>
<li><strong><a href="https://c9.io/">Windows / Cloud9</a></strong></li>
</ul>
</li>
<li>(最初) <strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファーストガイド</a></strong></li>
<li>(脱初心者) <strong><a href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/">Ruby on Rails を仕事にしていくための第一歩(Rails Tutorialの巻末掲載)</a></strong></li>
<li>(神ポスト) <strong><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに 使えそうなイディオムとか便利メソッドとか</a></strong></li>
<li>(オススメ書籍) <strong><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873115655&amp;linkCode=as2&amp;tag=morizyun00-22">リーダブルコード</a></strong></li>
<li>(オススメ書籍) <strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecに よるRailsテスト入門</a></strong></li>
<li>(Gemの検索) <strong><a href="https://www.ruby-toolbox.com/">The Ruby toolbox</a></strong></li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「個人開発のススメ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/individual-development-slide-gunosy-beer-bash/"/>
    <updated>2015-12-28T20:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/individual-development-slide-gunosy-beer-bash</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4883379930/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4883379930&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4883379930&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4883379930" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
2015/12/05に『<strong><a href="http://gunosy-beer.connpass.com/event/22825/">エムスリー x Gunosy Beer bash！</a></strong>』で、
「<strong><a href="http://www.slideshare.net/morizyun/ss-55929702">個人開発のススメ</a></strong>」というタイトルで発表しました！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>発表スライド</h2>

<p>まずは発表スライドはこちら！</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/dZM4S2V9aL3js" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2>特に伝えたかったこと</h2>

<ul>
<li>今回伝えたいこと 個人開発は「夢」がある！ (๑•̀ㅁ•́๑)✧</li>
<li>企業はスケールして利益の出るものしか作れない</li>
<li>個人エンジニアなら自分で作れるので思う存分、自分の満足を追求できるよ！</li>
<li>アイデアは質より量。思いつきをメモにまとめて、簡単なものから作ってみよう！</li>
<li>もくもく会に出て、仲間を見つけたり、ブログやQiitaで記事を書こう</li>
</ul>


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AH-GC20 音楽がもっと好きになった！ノイズキャンセリング & Bluetooth ヘッドホン【ガジェットレポート】]]></title>
    <link href="http://morizyun.github.io/blog/ah-gc20-denon-headphone/"/>
    <updated>2015-12-27T11:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ah-gc20-denon-headphone</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W8PWZKS&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00W8PWZKS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00W8PWZKS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Bluetoothとノイズキャンセリングがセットになったヘッドホン『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』を購入したので、そのガジェットレポートです。</p>

<p>結論としては、デスクワークで落ち着いて音楽を聞くときには、音が優しいので一日中聞いていても疲れない、本当にオススメのヘッドホンです！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>主な機能</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W8PWZKS&linkCode=as2&tag=morizyun00-22"><img src="https://farm6.staticflickr.com/5803/23625553989_c4ef2dbb3c.jpg" width="375" height="500" alt="Evernote Snapshot 20151226 204441"></a></p>

<p>『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』の主な機能はこちら。</p>

<pre>
- Bluetooth : ワイヤレスでiPhone/Androidなどに接続できるので、ケーブルが邪魔にならない
- ノイズキャンセリング : 人の声以外の雑音だとを上手く消してくれるので、音楽がクリアに聞こえる
- 遮音性が高い : ヘッドホン自体の遮音性がとても高いので、小さな音でも音楽が聴きやすい
- 耳への付け心地のいい : 耳を圧迫しないので、長時間ヘッドホンをつけていても疲れない
- 20時間連続再生 : バッテリーの持ちがいい。ノイズキャンセリング、Bluetoothを同時に使用して20時間対応
- aptX / AACに対応 : Bluetoothでのデータ転送のタイムラグが少なく、高音質の音楽データを送信できる
</pre>


<h2>ヘッドホンのつけ心地</h2>

<p>今までインナーイヤホンを使ってきた最大の理由はヘッドホンのつけ心地が苦手だったからでした。</p>

<p>でも『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』
は他のサイトのレビューでもつけ心地の良さの評価がすごく高かったです。</p>

<p>実際にヘッドホンを数日試した時に一番感動したのがココでした。耳を優しく覆いかぶさるような形で、
遮音性が高いのに、圧迫感が少なく、つけ心地が良い点でした。</p>

<p>今までヘッドホンの利用を避けてきた人に、ぜひ一度店頭でつけ心地を試して欲しいです＾＾</p>

<h2>ノイズキャンセリング</h2>

<p>ノイズキャンセリングで一番有名なのは「<strong><a href="http://www.amazon.co.jp/gp/product/B00N2OJ9VC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00N2OJ9VC&amp;linkCode=as2&amp;tag=morizyun00-22">BoseのQuietComfort</a></strong>」です。このヘッドホンのノイズキャンセリングは本当に強力で、一度だけ飛行機で使ったことがありますが、
本当にびっくりするくらい周りを静かにしてくれます。ほんの少しのホワイトノイズ(ノイズキャンセリングの音)以外は無音と言っても過言じゃなかったです。</p>

<p>ただ2015年12月時点では、ノイズキャンセリングとBluetoothが両方あるヘッドホンはBose販売されていないと思います。
また以前使っていた時には、耳への圧迫感が強すぎて、長時間つけるのが辛かった記憶があります。このあたりは好みが別れるところだと思います。</p>

<p>このあたりが、今回『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』を選択した理由です。</p>

<p>何日かノイズキャンセリングを試してみた感想ですが、確かにBoseのノイズキャンセリングに比べると少し、ノイズキャンセリングの機能は少し弱いと感じます。</p>

<p>でも、ヘッドセット自体の遮音性が高いので正直それだけでも十二分に満足できるし、ノイズキャンセリング自体が音楽を聴きやすくすることを
手助けしているとのをすごく感じます。むしろ、音楽を楽しむということが本来の目的にマッチしています。DENONの「音楽で感動を伝える」というこだわりを感じさせてくれます。</p>

<p>また、『<strong><a href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00W8PWZKS&amp;linkCode=as2&amp;tag=morizyun00-22">Denon AH-GC20</a></strong>』はBluetooth と ノイズキャンセリングが ONの状態をメインに設計されているので、Bluetoothや、ノイズキャンセリングを使っているときの音がきれいだと感じました。</p>

<h2>音質</h2>

<p>正直言って僕は音楽を集中して効くというよりは、作業をやっているときについでにながらで音楽を流すタイプなので、
音質については中々評価できない気がします。ただそんな僕が購入するときに参考にしたレビューがこちらです。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/1gvN0T2YN2k" frameborder="0" allowfullscreen></iframe>


<p>音楽の聞き方、シチュエーションや、好みの音によって変わりますが、購入するときに参考になったし、
購入した後にもこのレビューは結構的を得ているなと感じました＾＾</p>

<h2>オススメのシチュエーション</h2>

<p><a data-flickr-embed="true"  href="http://www.amazon.co.jp/gp/product/B00W8PWZKS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00W8PWZKS&linkCode=as2&tag=morizyun00-22"><img src="https://farm2.staticflickr.com/1494/23968052196_02dfc044de.jpg" width="375" height="500"></a></p>

<pre>
- アウトドア
  - インナーイヤータイプのイヤホンと比べると重量を感じる
  - 走ったりするときにはインナーイヤータイプのイヤホンのほうがオススメ
- インドア・デスクワーク
  - デスクワークでコードを書きながら、音楽を流し聴きするのにオススメです
  - 耳への圧迫感も感じないので、1日中使っていても特に気にならない
  - 音もすごく優しいので、本当に音楽聞いてて楽しいと感じる
</pre>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails初学者向け】Twitterへ投稿するRailsアプリを作ってみよう]]></title>
    <link href="http://morizyun.github.io/blog/ruby-rails-beginner-twitter-post-app/"/>
    <updated>2015-12-26T19:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-rails-beginner-twitter-post-app</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797380357/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797380357&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797380357&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797380357" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
最近初心者の人向けにRuby/Railsのアプリの開発についてレクチャーしたので、その時作った手順をブログ記事にしました。</p>

<p>もし、やってみてわからないところとか、ハマりやすいところとかあれば <strong><a href="https://twitter.com/zyunnosuke">@zyunnosuke</a></strong> にメッセージください！</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プロジェクトを作成</h2>

<h3>ローカル開発の場合</h3>

<p>ターミナルで以下のコマンドを実行してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 新しいRailsアプリを作成
</span><span class='line'>rails new twitter_post_sample --skip-bundle
</span><span class='line'>
</span><span class='line'># twitter_post_sample のフォルダに移動
</span><span class='line'>cd twitter_post_sample</span></code></pre></td></tr></table></div></figure>


<h3>Cloud 9の場合</h3>

<ul>
<li>『<strong><a href="https://c9.io/">Cloud9</a></strong>』にログインして新しいworkspaceを作成</li>
<li>privateのRailsアプリを作成してください</li>
</ul>


<h2>Gemfileに以下を追加</h2>

<p>プロジェクト直下のGemfileを開いて以下を追加して下さい。
(minimum-omniauth-scaffold は最後に補足を書いています)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;minimum-omniauth-scaffold&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加したらターミナルで以下のコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">jobs</span><span class="o">=</span><span class="mi">4</span> <span class="o">--</span><span class="n">path</span><span class="o">=</span><span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby Gemライブラリをインターネットから持ってきて、自動でローカルに保存します。</p>

<h2>Twitter認証用のScaffold</h2>

<p>以下のコマンドを実行して、OmniAuth用のScaffoldを作成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">minimum</span><span class="ss">:omniauth:scaffold</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テーブルの作成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TwitterのAPI keyを取得</h2>

<p><a href="https://apps.twitter.com/">Twitter Application Management</a>に新しいアプリを登録して下さい。
手順がわからない場合は、『<a href="http://blogs.zealot.co.jp/archives/810">Rails環境でTwitterとFacebookを使ってサイトの拡散をするため自動投稿させるアプリを作成してみた</a>』
を参考にしてみてください。</p>

<p>最初にユーザー登録とか必要かもしれません。</p>

<p>ちなみに設定は以下の様ようにしました。</p>

<pre>
Name : (ユニークな名前にしてください。クライアント名としてtwitter上で表示されるのでいい名前にしてください)
Description : (適当に書いてください)
Website : http://www.example.com (公開するときはそのURLを。今回はローカルテスト用の設定です)
Callback URL : http://www.example.com/callback (公開するときはコールバックのURLを書いてください。今回はローカルテスト用の設定です)
</pre>


<p>「Keys and Access Tokens」に Consumer Key と Consumer Secret があるので、次のファイルに書いてください。</p>

<h2>Twitter API keyをRailsに設定</h2>

<p><code>config/settings.local.yml</code> を開いて以下の内容を追記して下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Twitter OAuth Local Setting</span>
</span><span class='line'><span class="c1"># - 可能なら環境変数にしてしまったほうがいいと思います</span>
</span><span class='line'><span class="n">twitter_key</span><span class="p">:</span>    <span class="s2">&quot;xxxxxxxxxxxxxxxxxxxxxxx&quot;</span>
</span><span class='line'><span class="n">twitter_secret</span><span class="p">:</span> <span class="s2">&quot;yyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>controllerの処理を追加</h2>

<p>新しい処理を行うcontrollerのactionを追加します。</p>

<p><code>app/controller/top_controller.rb</code>に以下の内容を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TopController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># ↓ ここを追加</span>
</span><span class='line'>  <span class="c1"># tweet</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tweet</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">::</span><span class="no">REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># applicationの設定</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span>         <span class="o">=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">twitter_key</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span>      <span class="o">=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">twitter_secret</span>
</span><span class='line'>      <span class="c1"># ユーザー情報の設定</span>
</span><span class='line'>      <span class="n">user_auth</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">authentications</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">access_token</span>         <span class="o">=</span> <span class="n">user_auth</span><span class="o">.</span><span class="n">token</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">access_token_secret</span>  <span class="o">=</span> <span class="n">user_auth</span><span class="o">.</span><span class="n">secret</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Twitter投稿</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:text</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span><span class="p">,</span> <span class="n">notice</span><span class="p">:</span> <span class="s1">&#39;ツイートしました！&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>viewを作成</h2>

<p><code>app/views/top/index.html.haml</code> にフォームを設置します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_tag</span> <span class="n">tweet_path</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">text_area_tag</span> <span class="ss">:text</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">submit_tag</span> <span class="s1">&#39;ツイートする&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>あと念のため、今回は facebook / githubのログインは削除します。</p>

<p><code>app/views/layouts/application.html.haml</code> の以下を削除してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">,</span> <span class="s1">&#39;/auth/facebook&#39;</span>
</span><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;GitHub&#39;</span><span class="p">,</span>   <span class="s1">&#39;/auth/github&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>routesに以下を追加</h2>

<p>ルーティング情報を追加します。</p>

<p><code>config/routes.rb</code>に以下の内容を追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># tweet</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/top/tweet&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;top#tweet&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="ss">:tweet</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実行確認</h2>

<p>ターミナルで以下のコマンドを実行して rails サーバーを起動してください。
(Cloud9の場合は、startボタンでrailsサーバーを起動)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、ブラウザで <code>http://localhost:3000</code> を開いてください。</p>

<p><img src="https://farm6.staticflickr.com/5704/23980458535_2e8e6a5495.jpg" width="500" height="173"></p>

<p>左上の「<strong>Login: Twitter</strong>」をクリックしてログイン。そしてツイートボタンをおすと</p>

<p><img src="https://farm6.staticflickr.com/5669/23980479635_befe85ce67.jpg" width="500" height="162"></p>

<p>とツイートできました。(※ 実話です！)</p>

<h2>(補足) minimum-omniauth-scaffold について</h2>

<p>今回使ったRubyGemの <strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">shu0115/minimum-omniauth-scaffold</a></strong>
は、Facebook/Twitter/GitHubのアカウントを使ったログイン機能のscaffoldを提供してくれるGemです。</p>

<p>すごく便利なのでFacebook/Twitter/GitHubのアカウントを使ったログイン機能を実装したいときは、是非試してみてください。</p>

<p>ちなみに、拙著の紹介記事は、『<strong><a href="http://morizyun.github.io/blog/minimum-omniauth-scaffold/">「minimum-omniauth-scaffold」 Facebook/Twitter/GitHubログインを高速実装！</a></strong>』もおすすめです！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://blogs.zealot.co.jp/archives/810">Rails環境でTwitterとFacebookを使ってサイトの拡散をするため自動投稿させるアプリを作成してみた</a></strong></li>
<li><strong><a href="http://d.hatena.ne.jp/Nunocky/20110127/p1">Railsアプリから twitterにつぶやいてみた - Nunockyの日記</a></strong></li>
<li><strong><a href="http://qiita.com/ykyk1218/items/2541a313aac0f0e5d81a">Ruby - Railsのフォーム基本的な作成方法まとめ（form_forとかform_tag）</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「minimum-omniauth-scaffold」　Facebook/Twitter/GitHubログインを高速実装！]]></title>
    <link href="http://morizyun.github.io/blog/minimum-omniauth-scaffold/"/>
    <updated>2015-12-26T19:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/minimum-omniauth-scaffold</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4839926689/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839926689&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4839926689&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4839926689" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プロダクトを作る時にFacebookやTwitter、GitHubのログイン機能を組み込むのはかなり普通に必要になってきました。そんな時にすごく便利なのが、この「<strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">minimum-omniauth-scaffold</a></strong>」です。</p>

<p>実際にハッカソンの中で初めて使いましたが、10〜20分で簡単に実装できてしました。
以下の環境で実行できました！</p>

<pre>
Rails 4.2.5
Ruby 2.3.0
</pre>




<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Facebook/Twitter/GitHubログイン機能</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;minimum-omniauth-scaffold&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにこちらのgemは、Ruby2.0+、Rails4.0+環境用とのことです。</p>

<h2>OmniAuth用のScaffold</h2>

<p>以下のコマンドを実行して、OmniAuth用のScaffoldを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g minimum:omniauth:scaffold
</span></code></pre></td></tr></table></div></figure>


<h2>Facebook/Twitter/GitHubでアプリを作成してキーを登録</h2>

<h3>Facebook</h3>

<p><strong><a href="https://developers.facebook.com/apps">Facebook Developers - App</a></strong>でアプリを作成して、App IDとアプリのシークレットキーを取得。<br/>
※ 必須マークが無いが 「Callback URL」も入力必要</p>

<h3>Twitter</h3>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong>でアプリを作成して、キーを取得。<br/>
※　「新しいアプリを作成」作成後「Facebookでログインするウェブサイト」に「http://0.0.0.0:3000/」を入力</p>

<h3>GitHub</h3>

<p><strong><a href="https://github.com/settings/applications/new">GitHub Register a new OAuth application</a></strong>でアプリを登録してキーを取得。
※ Main URL／Callback URL：「http://0.0.0.0:3000/」</p>

<h3>config/settings.local.yml</h3>

<p><code>config/settings.local.yml</code>に上で取得した情報を登録。</p>

<h3>本番用の環境変数の設定</h3>

<p>キー情報などはgitリポジトリに含めないほうがいいです。ということでHerokuを使って環境変数にキー情報を登録するのはこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Twitter</span>
</span><span class='line'>heroku config:set <span class="nv">TWITTER_KEY</span><span class="o">=</span>xxxxxxxxxx <span class="nv">TWITTER_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># Facebook</span>
</span><span class='line'>heroku config:set <span class="nv">FACEBOOK_APP_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">FACEBOOK_APP_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class='line'>
</span><span class='line'><span class="c"># GitHub</span>
</span><span class='line'>heroku config:set <span class="nv">GITHUB_CLIENT_ID</span><span class="o">=</span>xxxxxxxxxx <span class="nv">GITHUB_SECRET</span><span class="o">=</span>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<h3>認証用のテーブルを作成</h3>

<p>マイグレーションコマンドを実行して、認証に必要なテーブルを作成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<p>と、たったこれだけのコマンドでログイン認証に必要な機能をひと通り実装できてしまいます！</p>

<p>継続的に開発を続けてこられている作者の<strong><a href="https://twitter.com/shu_0115">@shu0115</a></strong>さんには感謝感謝です＾＾</p>

<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/shu0115/minimum-omniauth-scaffold">shu0115/minimum-omniauth-scaffold</a></strong></p>

<p><strong><a href="http://qiita.com/shu_0115/items/6f5f0c210e9999da66be">Ruby 2.0.0-p247 + Rails 4.0.0 + minimum-omniauth-scaffold - Qiita [キータ]</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi 2015のMatzのキーノート・メモ]]></title>
    <link href="http://morizyun.github.io/blog/rubykaigi2015-matz-keynote/"/>
    <updated>2015-12-23T17:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rubykaigi2015-matz-keynote</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873113946/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873113946&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873113946&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873113946" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />2015/12/11-13に開催された『<strong><a href="http://rubykaigi.org/2015">RubyKaigi 2015</a></strong>』に出席してきたので、その時のメモです。</p>

<p>とは言っても1日目から風邪でセッション中殆ど寝てて、２・３日目には熱がでて会場にすら行けなかったという
体たらくぶりでした。来年はマスクとか、うがい・手洗いとか万難を排して臨みたいと思っています&#8230;orz&#8230;</p>

<p>今回はまともに聞けてたMatzのKeynoteを中心にメモを書いていきます。</p>

<p>あとこの記事は、<strong><a href="http://qiita.com/advent-calendar/2015/m3">エムスリー Advent Calendar 2015 - Qiita</a></strong>の23日目です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プログラマーの三大美徳</h2>

<p>Perlの作者 Lally Wallの言葉。考えれば考える程いい言葉。</p>

<pre>
- 怠惰: プログラムを書いて、苦労を減らしたり、ドキュメントを書いて不要な質問を避ける
- 短気: 将来起こる問題を想定した設計、ロジックの無駄を排除した実装を行う
- 傲慢: 周りから文句が出ないような、自分が自信を持てるプログラムを書こう
</pre>


<h2>怒りに通じている</h2>

<p>「<strong>怒り</strong>」とは、制御されている限り有益なモチベーションの源泉となる。
ただし、怒りは他の人にネガティブな気持ちを伝染させてしまうので注意しよう。</p>

<h2>ナイスも人に移る</h2>

<ul>
<li>「<strong>ナイスさ</strong>」こそはRubyコミュニティの良さ => MINASWAN(Matz is Nice And So We Are Nice)</li>
<li>内心で怒っていても、外っつらは愛想よく、ナイスであろう</li>
</ul>


<h2>Ruby 2.3.0</h2>

<p>preview2が出た。クリスマスに合わせてリリース予定。新機能は次のようなもの。</p>

<pre>
- Did-you-mean
  - Gooogleのもしかして機能
- Enuerable#grep_v(inverseのv)
  - マッチしていないものを返す
- Hash#fetch_value
- Numeric$positive?, negative?
- Hwash comparisons(<=, <, >=, >) - No Comparable(<=>はない)
- Hash#to_proc
- Array,Hash,Struct$dig
- Indented here document(インデントの一番浅いところでとってくれる)
- froze-string-literal: true
- safe navigation operation => &.
  - u&.name&.first
</pre>


<p>Rubyの改善は、コミュニティの成果であう。</p>

<h2>OCaaS</h2>

<ul>
<li>OCaaS(OSS community as a Shark)、つまりオープンソースコミュニティは、動き続けなければ死ぬ。</li>
<li>変化を生み出し続ける必要があるが、変化を受け入れるのは、決して簡単なことではない。</li>
</ul>


<h2>変化</h2>

<ul>
<li>ユーザーのwantsを聞くべきではない。大切なのは隠れたneedsを見つけることだ</li>
<li>未来のことはわからないが「<strong>未来の変化</strong>」を生み出さないといけない</li>
</ul>


<h2>環境の変化</h2>

<p>Rubyの置かれている環境の変化として次の3つがある。</p>

<pre>
- Multi Core
- Code Scalability
- Data Scalability
</pre>


<h3>マルチコア</h3>

<pre>
- コンカレンシー
- 抽象度の高さがRubyの売り
- 候補
  - Ownership Model => 排他制御
  - STM => 現実的ではに
  - Streem model
</pre>


<p>この辺りで時間なくなったはず。。
Ruby3を2020年までにだして、Ruby 2.0より3倍早くするのが目標とのこと。
すごい！</p>

<h2>RubyKaigi で参考になりそうなサイト</h2>

<ul>
<li><strong><a href="https://www.youtube.com/channel/UCBSg5zH-VFJ42BGQFk4VH2A">RubyKaigi - YouTube</a></strong></li>
<li><strong><a href="http://togetter.com/li/911396">Ruby準国際カンファレンス #rubykaigi 2015 - Togetterまとめ</a></strong></li>
</ul>


<h2>RubyKaigiで個人的に面白かった発表</h2>

<p>テンプレートエンジンの高速化、FamlとHamlitの話はすごい面白かったです！</p>

<script async class="speakerdeck-embed" data-id="acd0c621607045aa8218049ae613747a" data-ratio="1.33333333333333" src="http://morizyun.github.io//speakerdeck.com/assets/embed.js"></script>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSの IAM & STS の基礎知識]]></title>
    <link href="http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service/"/>
    <updated>2015-12-20T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774176737/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774176737&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774176737&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774176737" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />ちょっとマニアックですが、AWSのIAMやSTSについてどういうものかを調べたので、完全俺得メモです。
理解が間違ってそうなところがあればぜひ twitterとかで突っ込んでくださいw</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>IAM とは？</h2>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/introduction.html">IAM とは - AWS Identity and Access Management</a></strong></p>

<p>IAMとは「<strong>AWS Identity and Access Management</strong>」の略で、AWSのアカウントが持つ権限を一部他人に付与できる仕組み。</p>

<h2>IAM の機能</h2>

<p>機能としては次のようなものがある。</p>

<pre>
- AWS アカウントへのアクセスの共有できる
  - 他の人に「自分のAWS」のリソース管理や利用のための権限を付与
- アクセス権限を詳細に設定できる
  - どのリソースをどこまで利用できるかといったことを細く設定できる
- 多要素認証（MFA）
  - パスワード/アクセスキー以外にも、特別に設定されたデバイスからのコードの入力も必要にすることができる
- ID フェデレーション
  - 他の認証に基づいたユーザーに対して、自分のAWSアカウントに対して一時的なアクセス権を付与できる
- 保証のための ID 情報
  - IAM IDに基づいたログを AWS CloudTrail で残すことができる
- 多くの AWS サービスと連携
  - 数多くの AWS サービスがIAMと連携している
</pre>


<h2>IAM へのアクセス</h2>

<p>次のいずれかの方法でIAMを使うことができます。</p>

<pre>
- AWS マネジメントコンソール
- AWS コマンドラインツール
  - AWS Command Line Interface (AWS CLI)
    - AWS サービスを管理するための統合ツール
    - **[aws/aws-cli - GitHub](https://github.com/aws/aws-cli)**
  - AWS Tools for Windows PowerShell
    - Windows PowerShell スクリプト環境でAWSサービスを管理できる
- AWS SDK
  - Java、Python、Ruby、.NET、iOS、Android などのライブラリとサンプルコードで構成された ソフトウェア開発キット(SDK)
- IAM HTTPS API
  - サービスに HTTPS リクエストを直接発行できる IAM HTTPS API
</pre>


<h2>IAMの ユースケース</h2>

<ul>
<li>AWS マネジメントコンソールを使用し、AWS アカウントの下でユーザーを作成して、そのアクセス許可

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/getting-started.html">使用を開始する - AWS Identity and Access Management</a></strong></li>
</ul>
</li>
<li>使用している認証システと AWS の間での ID フェデレーション。ユーザーに対して、アクセストークンを発行

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html</a></strong></li>
<li>AWS Security Token Service(STS) API の詳細 => <strong><a href="http://docs.aws.amazon.com/STS/latest/APIReference/">Welcome - AWS Security Token Service</a></strong></li>
</ul>
</li>
<li>IAM を使用して、他の AWS アカウントにアクセス許可を付与する方法</li>
</ul>


<h2>Security Token Service(STS)</h2>

<p>STSとは、AWS Security Token Serviceの略。AWSリソースへのアクセスを制御できる一時的な セキュリティ認証情報を持つ、信頼されたユーザーを作成・提供するための仕組みです。</p>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">一時的セキュリティ認証情報 - AWS Identity and Access Management</a></strong></p>

<p>IAMユーザーが使用できる長期的なアクセス情報と似ているが違いは次の点。</p>

<pre>
- 使用期限が短い (数分〜数時間で設定できる)
- 一時的セキュリティ認証情報はユーザーとともに保存されることはなく、ユーザーのリクエストに応じて動的に生成される
</pre>


<p>このSTSを使うメリットは次の通り。</p>

<pre>
- 一時的に使うアプリに対して、長期のセキュリティ情報を配布しなくていい
- AWS の ID を定義せずに AWS リソースへのアクセスを提供できる
</pre>


<h2>フェデレーションとは</h2>

<p>フェデレーションは「組織間の結合という意味」。フェデレーションとは、イントラネットを超えて
他社のシステムやアプリケーション、サービスとの間でシングルサインオン(SSO)やWebサービスの
処理結果をほかのサービスに受け渡す技術、もしくはそれを実現する考えのことである。</p>

<p><strong><a href="http://www.itmedia.co.jp/enterprise/articles/0708/31/news010_3.html">ID管理をスッキリさせるIAMのお役立ち度：“フェデレーション”が企業間連携の今後を変える</a></strong></p>

<h2>認証フェデレーション</h2>

<p>ウェブ ID フェデレーションとは、Facebook、Googleアカウントを利用して、ユーザーにサインインしてもらうことができる。
その認証情報をSTSによってAWSアカウントのリソースを使うための一時的なアクセス権に変換できる。</p>

<p>ウェブ ID フェデレーションを使用すると、アプリケーションで IAM ユーザーアクセスキーのような長期的なセキュリティ認証情報を配布する必要がないので、AWS アカウントの安全性の維持に役立ちます。</p>

<h2>あとがき</h2>

<p>ちなみに、興味をもったキッカケの記事。これは確かにすごい便利そう。</p>

<p><strong><a href="http://qiita.com/seratch@github/items/53b53f143d64f16486bb">Rails - AWS 管理コンソールを社内認証と SSO 化させる #m3dev - Qiita</a></strong></p>

<h2>次読む記事</h2>

<p><strong><a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL that Enables Federated Users to Access the AWS Management Console (Custom Federation Broker) - AWS Identity and Access Management</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kaminariをBootstrap3、Rails4環境で使う！]]></title>
    <link href="http://morizyun.github.io/blog/kaminari-gem-paginator-rails/"/>
    <updated>2015-12-20T18:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/kaminari-gem-paginator-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048916599/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048916599&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048916599&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048916599" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails 4でも不動の人気を誇るページネーター「<strong><a href="https://github.com/amatsuda/kaminari#customizing-the-pagination-helper">amatsuda/kaminari</a></strong>」をBootstrap3、Rails4環境で使うための導入手順です。びっくりするくらい簡単に導入できちゃいますよ！</p>

<!-- more -->


<br style="clear:both;"/>


<h2>まえおき</h2>

<p>この記事は、Bootstrap環境を構築済の前提で話を進めます。もし、Bootstrap環境の構築からスタートしたい場合は、拙著『<strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの最短手順</a></strong>』をご参照頂ければ幸甚です！</p>

<h2>Gemのインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Pagenation</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;kaminari&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>kaminari configの設定</h2>

<p>kaminariのconfig(設定)ファイルを生成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g kaminari:config
</span></code></pre></td></tr></table></div></figure>


<p><code>config/initializers/kaminari_config.rb</code>を構築するサイトに合わせて各種パラメータを調整。<br/>
パラメータの詳細は『 <strong><a href="https://github.com/amatsuda/kaminari#general-configuration-options">amatsuda/kaminari | GitHub</a></strong>』を参照。</p>

<h2>Controller/Viewへの設置</h2>

<p>Controllerでページネーションをするための変数を追加。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">page</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Viewでページネーションを表示したい場所に以下のコードを追加。<br/></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">paginate</span> <span class="vi">@users</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ベージネーションViewのテンプレート取得</h2>

<p>次のコマンドを実行すると<code>/app/view/kaminari/</code>フォルダにBootstrap用のViewを生成してくれます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g kaminari:views  bootstrap3
</span></code></pre></td></tr></table></div></figure>


<p>ただしこちらは、Bootstrap2用のテンプレートっぽいです。ということで、<code>/app/view/kaminari/_paginator.html.haml</code>を次の様に編集します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">render</span> <span class="k">do</span>
</span><span class='line'>  <span class="nc">.pagination</span>
</span><span class='line'>    <span class="cp">-# ↓ ここに.pagenationを追加</span>
</span><span class='line'>    <span class="nt">%ul</span><span class="nc">.pagination</span>
</span><span class='line'>      ...(ゴニョゴニョ)
</span></code></pre></td></tr></table></div></figure>


<h2>ページネーターの表示カスタマイズ</h2>

<p>ページネーションの文言(prevやnextなど)の変更程度であれば、<code>conifg/locales/ja.yml</code>に以下の内容を追加するだけで解決します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ja:
</span><span class='line'>  views:
</span><span class='line'>    pagination:
</span><span class='line'>      first: <span class="s2">&quot;&amp;laquo;&quot;</span>
</span><span class='line'>      last: <span class="s2">&quot;&amp;raquo;&quot;</span>
</span><span class='line'>      previous: <span class="s2">&quot;&amp;lsaquo;&quot;</span>
</span><span class='line'>      next: <span class="s2">&quot;&amp;rsaquo;&quot;</span>
</span><span class='line'>      truncate: <span class="s2">&quot;...&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上は英語部分を外して、記号を残した場合の例です。
これだけでもシンプルでわかりやすいですよ！</p>

<p><img src="http://farm9.staticflickr.com/8477/8250145044_9193f27280_n.jpg" width="320" height="42" alt="fpu_tmp_1354804296.8519_d61bda"></p>

<h2>ルーティングの設定</h2>

<p><code>config/routes.rb</code>のルーティングを以下の様に変更します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resources :my_resources <span class="k">do</span>
</span><span class='line'><span class="k">  </span>get <span class="s1">&#39;page/:page&#39;</span>, :action <span class="o">=</span>&gt; :index, :on <span class="o">=</span>&gt; :collection
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>このルーティングのメリットは次の通り。</p>

<pre>
* SEO的に良い、ユーザーフレンドリーである
* params pageがURLセグメントの一部 => RailsのPageキャシュが有効に
</pre>


<h2>表示確認</h2>

<p>ブラウザで表示を確認します。以下は今回作ったサンプルページネーションです。</p>

<p><img src="http://farm9.staticflickr.com/8340/8244955784_4b2ae33c4a_n.jpg" width="320" height="44" alt="fpu_tmp_1354636719.4462_910632"></p>

<h2>補足: プレゼンターDraperと共存させる場合</h2>

<p>kaminariとプレゼンターのDraperを使う場合は、Draperがうまくkaminariのメソッドを呼び出せない場合があります。<br/></p>

<p>その場合は、<code>config/initializers/draper.rb</code>を作成して以下を記入しておくとエラーを回避できます。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Draper</span><span class="o">::</span><span class="no">CollectionDecorator</span><span class="o">.</span><span class="n">delegate</span> <span class="ss">:current_page</span><span class="p">,</span> <span class="ss">:total_pages</span><span class="p">,</span> <span class="ss">:limit_value</span><span class="p">,</span> <span class="ss">:total_count</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><a href="https://github.com/drapergem/draper/issues/401">Kaminari vs Draper · Issue #401 · drapergem/draper</a></strong></p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/amatsuda/kaminari#customizing-the-pagination-helper">amatsuda/kaminari | GitHub</a></strong></p>

<p><strong><a href="https://github.com/amatsuda/kaminari/wiki/Kaminari-recipes">Kaminari recipes | amatsuda/kaminari | GitHub wiki</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/CortYuming/20131027/p1">ささっと Rails4 + Bootstrap3 + kaminari でゲストブック作成してみるメモ - 牌語備忘録 - pygo</a></strong></p>

<h2>変更来歴</h2>

<p>13/04/18 23:35 補足: プレゼンターDraperと共存させる場合を追加<br/>
13/12/23 20:15 Bootstrap3、Rails4に対応<br/>
15/12/20 18:30 コマンドを修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsエンジニアのためのSQLチューニング速習会@wantedlyに行ってきた！]]></title>
    <link href="http://morizyun.github.io/blog/sql-speedup-explain-rails/"/>
    <updated>2015-12-13T10:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/sql-speedup-explain-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1RU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1RU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1RU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://wantedly.connpass.com/event/23794/">RailsエンジニアのためのSQLチューニング速習会 - connpass</a></strong>』に参加してきました。すごく勉強になったので、
その時のメモです。<strong><a href="https://twitter.com/minami7o">@minami7o</a></strong> さんありがとうございました！</p>

<p>あとこの記事は、<strong><a href="http://qiita.com/advent-calendar/2015/m3">エムスリー Advent Calendar 2015 - Qiita</a></strong>の13日目です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>スライド</h2>

<p>Wantedlyの <strong><a href="https://twitter.com/minami7o">@minami7o</a></strong> さんの発表スライドです。</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/hzRuN7dqFFk2nj" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe>


<h2>説明用のブランチ</h2>

<p>勉強会で共有されたテストデータを使えるGitHubのブランチです。</p>

<p><strong><a href="https://github.com/south37/sql-tuning">south37/sql-tuning - GitHub</a></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="nb">clone</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:south37</span><span class="o">/</span><span class="n">sql</span><span class="o">-</span><span class="n">tuning</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'><span class="n">cd</span> <span class="n">sql</span><span class="o">-</span><span class="n">tuning</span>
</span><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="n">db</span><span class="ss">:create</span>
</span><span class='line'><span class="n">pg_restore</span> <span class="o">-</span><span class="n">j</span> <span class="mi">4</span> <span class="o">--</span><span class="n">verbose</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">acl</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">owner</span> <span class="o">-</span><span class="n">d</span> <span class="n">sql</span><span class="o">-</span><span class="n">tuning</span><span class="o">-</span><span class="n">dev</span> <span class="n">db</span><span class="o">.</span><span class="n">dump</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveRecord::Base.explain</h2>

<p>ActiveRecord::Baseに<code>#explain</code>があることを知らなかったです。<code>#explain</code>超便利！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Job</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:company</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;companies.country&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;companies.id &lt; 1000&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;companies.country&#39;</span><span class="p">,</span> <span class="s1">&#39;COUNT(jobs.id)&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">explain</span>
</span><span class='line'>  <span class="no">Job</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span><span class="p">,</span> <span class="no">COUNT</span><span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;jobs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;companies&quot;</span> <span class="no">ON</span> <span class="s2">&quot;companies&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;jobs&quot;</span><span class="o">.</span><span class="s2">&quot;company_id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">companies</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">EXPLAIN</span> <span class="k">for</span><span class="p">:</span> <span class="no">SELECT</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span><span class="p">,</span> <span class="no">COUNT</span><span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;jobs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;companies&quot;</span> <span class="no">ON</span> <span class="s2">&quot;companies&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;jobs&quot;</span><span class="o">.</span><span class="s2">&quot;company_id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">companies</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>                                              <span class="no">QUERY</span> <span class="no">PLAN</span>
</span><span class='line'><span class="o">-------------------------------------------------------------------------------------------------------</span>
</span><span class='line'> <span class="no">HashAggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">1184</span><span class="o">.</span><span class="mi">79</span><span class="o">.</span><span class="n">.</span><span class="mi">1191</span><span class="o">.</span><span class="mi">12</span> <span class="n">rows</span><span class="o">=</span><span class="mi">634</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="no">Group</span> <span class="no">Key</span><span class="p">:</span> <span class="n">companies</span><span class="o">.</span><span class="n">country</span>
</span><span class='line'>   <span class="o">-&gt;</span>  <span class="no">Hash</span> <span class="no">Join</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">54</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="n">.</span><span class="mi">1159</span><span class="o">.</span><span class="mi">79</span> <span class="n">rows</span><span class="o">=</span><span class="mi">5000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>         <span class="no">Hash</span> <span class="no">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">jobs</span><span class="o">.</span><span class="n">company_id</span> <span class="o">=</span> <span class="n">companies</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span>  <span class="no">Seq</span> <span class="no">Scan</span> <span class="n">on</span> <span class="n">jobs</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mo">00</span><span class="o">.</span><span class="n">.</span><span class="mi">868</span><span class="o">.</span><span class="mo">00</span> <span class="n">rows</span><span class="o">=</span><span class="mi">50000</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span>  <span class="no">Hash</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span> <span class="n">rows</span><span class="o">=</span><span class="mi">1000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>               <span class="o">-&gt;</span>  <span class="no">Index</span> <span class="no">Scan</span> <span class="n">using</span> <span class="n">companies_pkey</span> <span class="n">on</span> <span class="n">companies</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">29</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">78</span> <span class="n">rows</span><span class="o">=</span><span class="mi">1000</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                     <span class="no">Index</span> <span class="no">Cond</span><span class="p">:</span> <span class="p">(</span><span class="nb">id</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">8</span> <span class="n">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにEXPLAINとは、与えられた文に対して、PostgreSQLプランナが生成する実行計画を表示するための命令です。</p>

<p>実行計画とは、問い合わせ文が参照するテーブル（複数の場合もある）をスキャンする方法（単純なシーケンススキャン、インデックススキャンなど）複数のテーブルを参照する場合に、各テーブルから取り出した行を結合するために使用されます。</p>

<h2>実行計画のコストの見方</h2>

<p>Explainでのコストの見方はこちら。</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/hzRuN7dqFFk2nj?startSlide=11" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen></iframe>


<h2>indexの仕組み</h2>

<p>「B-tree index」とは、バランスド・ツリーインデックスの略です。
ソートアルゴリズムや二分木の進化版的なアルゴリズムだそうです。
一部のブランチが成長しすぎて、計算量が増えないように再編成(バランシング)する仕組みをもっています。
これにより、常に高い検索性能を保つことができるそうです。</p>

<h2>indexが効かないパターン</h2>

<pre>
- indexを貼ったカラムに演算(`lower`と演算子を使う場合、ただし後述の方法なら貼れる)
- 絞り込み条件のゆるいwhere (デフォルトだと4/1以下に絞り込まれる必要がある)
  - HDDへのランダムアクセスとシーケンシャルアクセスの速度差が原因
</pre>


<h2>index利用のデメリット</h2>

<pre>
- indexの更新に時間がかかる
- PostgreSQLのカラム更新を高速化するための仕組みの「HOT」が効かない
</pre>


<p>ちなみに「HOT(Heap Only Tuple)」とは、「インデックスを持たない、ヒープのみのタプル」だそうです。
(1)不要なインデックスの更新を行なわないことによる更新処理コストの削減や、(2)ガベージの自動回収
といったことをサポートしてくれます。</p>

<h2>インデックスの種類</h2>

<pre>
- Unique Indexes : 重複した値を許可しないようなインデックス
- Multicolumn Indexes : 2つ以上のカラムに対するインデックス
- Indexes on Expressions
  - 関数などの返り値を key として index を作る事ができる
</pre>


<h2>JOIN のアルゴリズム</h2>

<pre>
- Nested Loop Join (遅い)
  - テーブル1とテーブル2に対してすべての組み合わせを試す
  - テーブル2にindexがあれば早くなる
- Hash Join
  - テーブル2に対して、1度フルスキャンしてHashMapを作る
  - テーブル2の全レコードをメモリにのせる必要がある
- Merge Join (早い)
  - ソート済のテーブル1とテーブル2に対して一度だけフルスキャン
  - JOINに使うカラムにはindexを貼る
</pre>


<h2>データ集約</h2>

<pre>
- Group Aggregate
  - 入力されたデータをグループキーでソート後、各グループを順に処理
- Hash Aggregate
  - グループキーをkeyとする、一時的なHash Tableを作成する
</pre>


<h2>sortもindexをはるべき</h2>

<ul>
<li>予めindexを貼っておくとソートされた状態でデータが保持されている</li>
<li><code>ORDER BY</code>でsortを実施するときにはindexされたカラムを使おう</li>
</ul>


<h2>その他 PostgreSQLの特徴的機能</h2>

<pre>
- JSON型
  - json型とjsonb型がある
  - jsonb型を基本で使うべきだが、すごいきたないデータの場合json型になる
- Hstore型
  - key, valueのペアを一つのカラムに保存可能
- Materialized View
  - キャッシュされたView。高速化は期待できるが手動でRefreshする必要がある
- Stored Procedure (PL/pgSQL)
  - PostgreSQLで実行可能なfunctionを定義可能。
</pre>


<h2>その他勉強になったこと</h2>

<ul>
<li>データの分布 = 「統計情報」が大事</li>
<li>SerializeよりはJSONのほうがいいかも</li>
<li>PostgreSQL - indexの利用状況を閲覧できる - pg_stat_user_indexes</li>
<li>Gem <strong><a href="https://github.com/grosser/bitfields">grosser/bitfields</a></strong> 便利そう</li>
</ul>


<h2>まとめ</h2>

<pre>
- SQLの実行児に選ばれる実行計画は、indexの有無や統計情報(データの量・分布)に依存
- 適切なschema, index, queryの選択によって、高速化しよう
- WHERE, JOIN,ORDER BY, GROUP BYのkeyにはindex
- JOINの前に絞り込めるだけ絞り込む
- JSON Typeなどもケースバイケースで
</pre>


<h2>最後に</h2>

<p>懇親会で、ピザやビールを大量あってお腹いっぱいになれました。
めっちゃ有りがたかったです！</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第6章 コードを記述するコード[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code/"/>
    <updated>2015-12-05T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>6章 クラス定義</h2>

<h3>オブジェクトの汚染</h3>

<p>外部から来た安全ではないをブジェクを「オブジェクトの汚染」という。
この汚染を判定するメソッドが<code>#tainted?</code>である。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_input</span> <span class="o">=</span> <span class="s2">&quot;User input: </span><span class="si">#{</span><span class="nb">gets</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;user_input.tainted? =&gt; </span><span class="si">#{</span> <span class="n">user_input</span><span class="o">.</span><span class="n">tainted?</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">only_code_object</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;only_code_object.tainted? =&gt; </span><span class="si">#{</span> <span class="n">only_code_object</span><span class="o">.</span><span class="n">tainted?</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby 6.2.4.tainted_code.rb</span>
</span><span class='line'><span class="c1"># &lt;= 1</span>
</span><span class='line'><span class="c1"># user_input.tainted? =&gt; true</span>
</span><span class='line'><span class="c1"># only_code_object.tainted? =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ERB内のRubyコードの評価メソッド</h3>

<p>ERBの中でRubyのコードを書くとそのコードが<code>eval</code>で評価される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ERB</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">new_toplevel</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@safe_level</span>
</span><span class='line'>      <span class="nb">proc</span> <span class="p">{</span>
</span><span class='line'>        <span class="vg">$SAFE</span> <span class="o">=</span> <span class="vi">@safe_level</span>
</span><span class='line'>        <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">eval</span><span class="p">(</span><span class="vi">@scr</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ユーザーが<code>@safe_level</code>を設定していれば、サンドボックスの中で、コードを評価する。
また、<code>$SAFE</code>はprocの中だけで有効になっており、全体の設定を変更しないようにしている。</p>

<h2>フックメソッド</h2>

<p>Rubyにはいくつかのイベントが発生した時にフックするメソッドが存在する。</p>

<h3>継承にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inherited</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">subclass</span><span class="si">}</span><span class="s2"> に継承されたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyString</span> <span class="o">&lt;</span> <span class="nb">String</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; &quot;String は MyString に継承されたよ！&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>include にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2"> にincludeされたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">M1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; M1 は C にincludeされたよ！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>prepend にフック</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M2</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prepended</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> は </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2"> にprependされたよ！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">M2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; M2 は C にprependされたよ！</span>
</span></code></pre></td></tr></table></div></figure>


<p>その他以下のようなメソッドもある。</p>

<pre>
Module#method_added - メソッドを追加した時に呼ばれる
Module#method_removed - メソッドがModule#remove_method により削除された時に呼ばれる
Module#method_undefined - メソッドがModule#undef_method によって削除されるか、 undef 文により未定義になったら呼ばれる

# 特異メソッドのイベントをキャッチする
Kernel#singleton_method_added - 特異メソッドが追加された時に呼ばれる
Karnel#singleton_method_removed - 特異メソッドが削除された時に呼ばれる
Karnel#singleton_method_undefined - 特異メソッドがundefinedになった時に呼ばれる
</pre>


<h2>アトリビュートのチェック</h2>

<h3>全Classで <code>attr_checked</code> を使えるようにする</h3>

<p>classやmoduleのアトリビュートをチェックするようなDSL <code>attr_checked</code>を追加する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attr_checked</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">validation</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span> <span class="o">||</span> <span class="o">!</span><span class="n">validation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">attribute</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="n">attr_checked</span> <span class="ss">:age</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestCheckedAttribute</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_accepts_valid_values</span>
</span><span class='line'>    <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">18</span><span class="p">,</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_invalid_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_nil_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_false_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>なるほど、これでできるのかとちょっと感激！</p>

<h3>include した時だけ使えるようにする</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">CheckedAttributes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">attr_checked</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">validation</span><span class="p">)</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="k">raise</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span> <span class="o">||</span> <span class="o">!</span><span class="n">validation</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">define_method</span> <span class="n">attribute</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CheckedAttributes</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_checked</span> <span class="ss">:age</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestCheckedAttribute</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_accepts_valid_values</span>
</span><span class='line'>    <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">18</span><span class="p">,</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_invalid_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_nil_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_refuses_false_values</span>
</span><span class='line'>    <span class="n">assert_raises</span> <span class="no">RuntimeError</span><span class="p">,</span> <span class="s1">&#39;Invalid attribute&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第5章 クラス定義[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition/"/>
    <updated>2015-11-29T19:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>5章 クラス定義</h2>

<h3>カレントクラスとは？</h3>

<pre>
- プログラムのトップレベルでは「カレントクラス」はmainクラスのObjectになる
- classキーワードでクラスをオープンするとそのクラスが「カレントクラス」となる
- メソッドの中では、カレントオブジェクトのクラスがカレントクラスとなる
</pre>


<h3>class_evalを使ったメソッドの定義</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_method_to</span><span class="p">(</span><span class="n">a_class</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a_class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">greet</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_method_to</span> <span class="nb">String</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;bcd&#39;</span><span class="o">.</span><span class="n">greet</span> <span class="c1">#=&gt; Hello</span>
</span></code></pre></td></tr></table></div></figure>


<h3>カレントクラスのまとめ</h3>

<pre>
- Rubyのインタプリタはカレントクラスの参照を追跡する。defで定義されたメソッドはカレントクラスのインスタンスメソッドとなる
- クラス定義内では、カレントオブジェクト self と カレントクラスは同義である
- クラスへの参照を持っていれば、クラスはclass_eval(module_eval)でオープンできる
</pre>


<h3>クラスインスタンス変数</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vi">@my_var</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># クラスインスタンス変数</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">read</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="c1"># クラスインスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">arg_num</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="o">=</span> <span class="p">(</span><span class="n">arg_num</span><span class="p">)</span> <span class="c1"># インスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read</span>
</span><span class='line'>    <span class="vi">@my_var</span> <span class="c1"># インスタンス変数</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">read</span> <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クラス変数の癖</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vc">@@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vc">@@v</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="vc">@@v</span> <span class="c1">#=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="n">xxx</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">xxx</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="k">class</span> <span class="n">variable</span> <span class="n">access</span> <span class="n">from</span> <span class="n">toplevel</span>
</span><span class='line'><span class="n">xxx</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">7</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="k">class</span> <span class="n">variable</span> <span class="n">access</span> <span class="n">from</span> <span class="n">toplevel</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>警告は出ているが、<code>@@v</code>の内容が書き換えられている事がわかる。</p>

<h3>クラスメソッド</h3>

<p>クラス・メソッドは『<strong>クラスの特異メソッド</strong>』。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">method</span>
</span><span class='line'>    <span class="c1"># メソッドの中身</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>確かに言われてみれば、特異メソッドと言えるかも。</p>

<h2>クラス拡張</h2>

<p>以下の実装をクラス拡張という。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s1">&#39;good evening&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1">#=&gt; &quot;good evening&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このクラス拡張のためのメソッドが、<code>extend</code>。(<code>extend</code>がなくても自分で実装できる)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s1">&#39;good morning&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">MyModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1">#=&gt; &quot;good morning&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでSSHポートフォワーディング管理 Coccinellida & ローカルでrails console実行してサーバDBに接続]]></title>
    <link href="http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel/"/>
    <updated>2015-11-20T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117313/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117313&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117313&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117313" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近借りているサーバーのDBに安全につなぐ方法はないものかと
物色している家庭でSSHポートフォワーディングの便利さをようやく理解しました(恥ずかしながら)。</p>

<p>この便利さを自作アプリとかでも応用できるようにMacの起動時に自動で接続して、それを維持し続けるようにしてくれる無料アプリ
『<strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a></strong>』
(正確にはそのためのterminalコマンドを設定できる)を見つけたので紹介です。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>ターミナルコマンド</h2>

<p>まずはターミナルからSSHのポートフォワーディングをするためのコマンドがこちら。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh ログイン名@経由サーバ -L 自分のポート:目的サーバ:目的サーバのポート</span></code></pre></td></tr></table></div></figure>


<h2>Coccinellida を使った設定方法</h2>

<p>基本的には次のことをすればいいです。</p>

<ul>
<li><strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a> からアプリをダウンロード</strong></li>
<li>ターミナルと同様の設定をアプリで行う

<ul>
<li>不明な点がある場合 => <strong><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする</a></strong></li>
</ul>
</li>
<li>System preference => ユーザーとグループ => ログイン時に自動起動するアプリに追加</li>
</ul>


<p>これでlocalhostのポートをサーバー内のDBのポートと同じように扱う事ができるようになります。
(SSHを使っているので安全に接続、データをやり取りできるはず)</p>

<h2>RailsコンソールからサーバーDBに接続する場合</h2>

<p>これを応用すると、ローカルでRailsコンソールするとリモートのDBに接続するといったことも可能になります。</p>

<p>今回はリモートの環境(remote)を作ります。<code>config/environments/remote.rb</code>をdevelopmentあたりをコピーして作成。
次に<code>config/database.yml</code>に以下を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>remote:
</span><span class='line'>  adapter: postgresql
</span><span class='line'>  encoding: unicode
</span><span class='line'>  database: &lt;DB名&gt;
</span><span class='line'>  pool: 5
</span><span class='line'>  username: &lt;ユーザー名&gt;
</span><span class='line'>  password: &lt;パスワード&gt;
</span><span class='line'>  port: ＜ポートフォワーディングしているport番号＞
</span><span class='line'>  host: localhost</span></code></pre></td></tr></table></div></figure>


<p>たったのこれだけ、あとは普通にローカルで以下のコマンドを実行するとリモートのDBにつないで好き勝手できます。
(<code>host</code>がなかった場合、localのsocketを探しに行ってしまうので、必ずhostは設定してください)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=remote bundle exec rails console</span></code></pre></td></tr></table></div></figure>




<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする | eye4brain</a></li>
<li><a href="http://qiita.com/ron214_ron/items/aa273baff030e253ae96">rails consoleにて、dbをproductionに接続する。 - Qiita</a></li>
<li><a href="http://nob-on-the-boat.blogspot.jp/2010/03/ssh.html">No One Better: SSHポートフォワーディング</a></li>
<li><a href="http://qiita.com/YusukeHigaki/items/9bd0c21fbcc47e12b5c1">postgresqlを他ホストからもつなげるようにする - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第4章 ブロック[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block/"/>
    <updated>2015-11-18T20:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第4章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>4章 ブロック</h2>

<h3>ブロックの基礎</h3>

<p>メソッドに block を渡して、簡単に実行させることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">a_method</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="s1">&#39;ブロックがありません&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">a_method</span> <span class="c1">#=&gt; ブロックがありません</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a_method</span> <span class="p">{</span> <span class="s1">&#39;ブロックがあります！&#39;</span> <span class="p">}</span> <span class="c1">#=&gt; ブロックがあります！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用語: クロージャー</h3>

<p>『<a href="http://language-and-engineering.hatenablog.jp/entry/20101118/p1">Rubyの動かないコード （初級編） ブロックとクロージャの性質 - 主に言語とシステム開発に関して</a>』
の説明が非常に分かりやすかったので、お借りしました。まずはクロージャの説明。</p>

<pre>
- クロージャの外の(より広いスコープで定義された)変数はクロージャの中からでも参照可能
- クロージャの中で定義された変数はクロージャの外からは参照できない。
</pre>


<p>これってつまりはブロックと同じようなものということ。</p>

<pre>
- Rubyのブロックは、ブロック定義時のコンテキスト(変数とか)を保持する
- Rubyのブロック内で宣言された変数は、ブロック内でのみ参照可能な変数となる
</pre>


<h3>instance_eval</h3>

<p><code>instance_eval</code>は、渡されたブロックをレシーバのインスタンスの元で実行します。
private メソッドや@vなどのインスタンス変数にもアクセスできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">self</span> <span class="c1">#=&gt; &lt;MyClass:0x007ff9f89dcde0&gt;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@v</span> <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>instance_exec</h3>

<p>次の例は<code>instance_eval</code> だと、Cのインスタンス変数にしかアクセス出来ないが、
<code>instance_exec</code> を使えば ブロックに引数を渡せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twisted_method</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="s2">&quot;@x : </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">, @y : </span><span class="si">#{</span><span class="vi">@y</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">D</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">twisted_method</span> <span class="c1">#=&gt; @x : 1, @y :</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">E</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">twisted_method</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_exec</span> <span class="p">(</span><span class="vi">@y</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span> <span class="s2">&quot;@x : </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">, @y : </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">E</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">twisted_method</span> <span class="c1">#=&gt; @x : 1, @y : 2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procオブジェクト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">inc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">inc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># lambdaの別記法</span>
</span><span class='line'><span class="n">inc2</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">inc2</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>＆修飾</h3>

<p>ブロックを引数として渡したい場合によく使うのが <code>&amp;修飾</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">do_math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">math</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># block を Proc(オブジェクト)に変換して渡す</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">do_math</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="p">}</span> <span class="c1">#=&gt; 5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Procをブロックに戻す</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="k">yield</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_proc</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="s2">&quot;Bill&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">my_method</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_proc</span><span class="p">)</span> <span class="c1">#=&gt; &quot;Hello Bill!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>あとで評価の例</h3>

<p><code>highline</code> は lambdaを渡すと、それをユーザーが質問に回答した後に実行してくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;highline&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">hl</span> <span class="o">=</span> <span class="no">HighLine</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">friends</span> <span class="o">=</span> <span class="n">hl</span><span class="o">.</span><span class="n">ask</span><span class="p">(</span><span class="s1">&#39;友達を入力してください&#39;</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;友達一覧：</span><span class="si">#{</span><span class="n">friends</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; 友達を入力してください</span>
</span><span class='line'><span class="c1"># &lt;= hoge,fuga</span>
</span><span class='line'><span class="c1"># =&gt; 友達一覧：[&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procとlambdaの差</h3>

<p>Procとlambdaは次のような違いがある。lambdaのほうがメソッドに挙動が近いので、
特別な事情がない限りはlambdaを使うほうが良さそう。</p>

<pre>
- Proc
  - Procが定義されたスコープから戻る
  - 引数が少なかったり、多すぎた場合によしなに処理をしてくれる
- lambda
  - return した場合、単に lambdaから戻る
  - 引数の数が異なるとArgumentErrorを出す
</pre>


<h3>はじめてのDSL</h3>

<p>DSLの初歩を実践してみる。まずは <code>redflag.rb</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@setups</span> <span class="o">&lt;&lt;</span> <span class="n">block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="n">description</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@events</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="n">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="n">condition</span><span class="p">:</span> <span class="n">block</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@setups</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vi">@events</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;event.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@events</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@setups</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class='line'>    <span class="n">setup</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;ALERT: </span><span class="si">#{</span><span class="n">event</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">event</span><span class="o">[</span><span class="ss">:condition</span><span class="o">].</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に <code>event.rb</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">setup</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;空の高さを設定&#39;</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;山の高さを設定&#39;</span>
</span><span class='line'>  <span class="vi">@mountains_height</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span> <span class="s1">&#39;空が落ちてくる&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">&lt;</span> <span class="mi">300</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span> <span class="s1">&#39;空が近づいている&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">&lt;</span> <span class="vi">@mountains_height</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span> <span class="s1">&#39;もうダメだ....手遅れになってしまった...&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@sky_height</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>で実行すると次のような結果になる。</p>

<pre>
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が落ちてくる
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が近づいている
#=> 空の高さを設定
#=> 山の高さを設定
</pre>


<p>期待する挙動はしているが、実質的なグローバル変数があり、他の仕組みに影響を与えてしまう可能性がある。</p>

<h2>グローバル変数を排除した実装</h2>

<p>グローバル変数を排除して、クリーンルームを使って実装したのがこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">setups</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">events</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:setup</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">setups</span> <span class="o">&lt;&lt;</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:event</span> <span class="k">do</span> <span class="o">|</span><span class="n">description</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">events</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="n">description</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> <span class="n">condition</span><span class="p">:</span> <span class="n">block</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each_setup</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">setups</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class='line'>      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">setup</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each_event</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>    <span class="n">events</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">event</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;4.6.event.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">each_event</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>  <span class="n">env</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">each_setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">instance_eval</span> <span class="o">&amp;</span><span class="n">setup</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;ALERT: </span><span class="si">#{</span><span class="n">event</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">env</span><span class="o">.</span><span class="n">instance_eval</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">event</span><span class="o">[</span><span class="ss">:condition</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 空の高さを設定</span>
</span><span class='line'><span class="c1"># 山の高さを設定</span>
</span><span class='line'><span class="c1"># ALERT: 空が落ちてくる</span>
</span><span class='line'><span class="c1"># 空の高さを設定</span>
</span><span class='line'><span class="c1"># 山の高さを設定</span>
</span><span class='line'><span class="c1"># ALERT: 空が近づいている</span>
</span><span class='line'><span class="c1"># 空の高さを設定</span>
</span><span class='line'><span class="c1"># 山の高さを設定</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wheneverは導入が超簡単なcrontab管理ライブラリGemです！[Rails4.2]]]></title>
    <link href="http://morizyun.github.io/blog/whenever-gem-rails-ruby-capistrano/"/>
    <updated>2015-11-15T17:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/whenever-gem-rails-ruby-capistrano</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B016QEE30G/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B016QEE30G&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B016QEE30G&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B016QEE30G" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />wheneverはcrontab管理ライブラリです。導入はすごく簡単ですし、RailsやCapistranoとの連携もスムーズで楽ちんです！定期実行するような処理がある場合はぜひご検討ください！</p>

<p><a href="https://github.com/javan/whenever" title="javan/whenever · GitHub" class="button big primary">javan/whenever · GitHub</a></p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Gemのインストール</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行してください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># crontab管理</span>
</span><span class='line'>gem <span class="s1">&#39;whenever&#39;</span>, :require <span class="o">=</span>&gt; <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>whenever設定ファイルschedule.rbを作成</h2>

<p>以下のコマンドを実行してconfig/schedule.rb</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wheneverize .
</span><span class='line'>&gt; <span class="o">[</span>add<span class="o">]</span> writing <span class="sb">`</span>./config/schedule.rb<span class="err">&#39;</span>
</span><span class='line'>&gt; <span class="o">[</span><span class="k">done</span><span class="o">]</span> wheneverized! <span class="c">#&lt;= 成功</span>
</span></code></pre></td></tr></table></div></figure>


<h2>wheneverのコマンドの解説</h2>

<p>wheneverでは以下の4つをスケジューリングできます。</p>

<pre>
command: bashコマンド実行
rake: rakeタスク実行
runner: Rails内のメソッド実行
script: scriptの実行
</pre>


<h2>設定の具体例</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 出力先のログファイルの指定</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="s1">&#39;log/crontab.log&#39;</span>
</span><span class='line'><span class="c1"># ジョブの実行環境の指定</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3時間毎に実行するスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="mi">3</span><span class="o">.</span><span class="n">hours</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;MyModel.some_process&quot;</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;my:rake:task&quot;</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;/usr/bin/my_great_command&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 毎日 am4:30のスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;4:30 am&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;MyModel.task_to_run_at_four_thirty_in_the_morning&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一時間毎のスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="ss">:hour</span> <span class="k">do</span> <span class="c1"># Many shortcuts available: :hour, :day, :month, :year, :reboot</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;SomeModel.ladeeda&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 日曜日のpm12時にスケジューリング</span>
</span><span class='line'><span class="n">every</span> <span class="ss">:sunday</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;12pm&#39;</span> <span class="k">do</span> <span class="c1"># Use any day of the week or :weekend, :weekday</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;Task.do_something_great&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># crontab型の設定「分」「時」「日」「月」「曜日」</span>
</span><span class='line'><span class="c1"># 毎月27日〜31日まで0:00に実行</span>
</span><span class='line'><span class="n">every</span> <span class="s1">&#39;0 0 27-31 * * &#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;echo &#39;you can use raw cron syntax too&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 6-24時まで3時間おきに実行</span>
</span><span class='line'><span class="n">work_hour_per_two</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;6&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;24&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">:00&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span> <span class="n">work_hour_per_two</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;my:rake:task&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Corntabへの設定</h2>

<p>crontab に設定する際のコマンドは以下のとおり。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wheneverの設定更新
</span><span class='line'>RAILS_ENV=development bundle exec whenever --update-crontab
</span><span class='line'>
</span><span class='line'># crontabの設定削除
</span><span class='line'>RAILS_ENV=development bundle exec whenever --clear-crontab</span></code></pre></td></tr></table></div></figure>


<p>詳しい設定方法はGitHubの公式ページへ。</p>

<p><a href="https://github.com/javan/whenever" title="javan/whenever · GitHub" class="button big primary">javan/whenever · GitHub</a></p>

<h2>Capistranoとの連携</h2>

<p>Capistranoについての詳しい記事は、『<strong><a href="http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/">Capistrano 3系でRails4.1のデプロイ</a></strong>』です。興味があれば是非ご一読下さい。</p>

<h3>capistrano/wheneverの基本的な連携</h3>

<p>wheneverの特徴の一つとして、Deployプロセスの自動化をしてくれるGem Capistranoと簡単に連携できる点があります。</p>

<p>設定方法は、まず以下を<code>Capfile</code>に追記。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>require <span class="s1">&#39;whenever/capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、<code>config/deploy.rb</code>に以下を追記。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> :whenever_identifier, -&gt;<span class="o">{</span> <span class="s2">&quot;#{fetch(:application)}_#{fetch(:stage)}&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは<code>cap deploy</code>のたびにcrontabをアプデートしてくれます。</p>

<h2>capistrano/wheneverで環境ごとに設定を変更したい場合</h2>

<p>以下の記事を見ながら設定すれば出来る気がします<sup>^</sup></p>

<ul>
<li><strong><a href="http://qiita.com/zaru/items/348c126a205a2e48b4d6">Rails - Wheneverで環境ごとにschedule内容を変更する</a></strong></li>
<li><strong><a href="https://github.com/javan/whenever/wiki/Setting-variables-on-the-fly">Setting variables on the fly · javan/whenever Wiki</a></strong></li>
</ul>


<h2>Special Thanks</h2>

<p><a href="http://higelog.brassworks.jp/?p=1554">CapistranoでWhenever | ひげろぐ</a></p>

<p><a href="http://www.logiclogic.jp/blog/tech/backend/124/">capistrano+wheneverで簡単cron管理-logiclogic&#8217;s blog | logiclogic&#8217;s blog</a></p>

<h2>変更来歴</h2>

<p>(12/12/24 xx:xx) 新規作成<br/>
(13/01/07 18:35) 「補足：別ファイルにローカルタスク用の設定を書く」を追加<br/>
(13/01/08 23:50) 「補足：複数環境でwheneverを使いたい場合&#8230;」を修正<br/>
(14/04/23 22:20) Rails4.1対応、全面書き直し！<br/>
(14/07-10 20:15) 環境ごとにcronの設定を切り替える方法を追記<br/>
(14/11-02 15:25) capistranoで環境ごとに処理を振り分ける方法がrvmのパスが変わってうまく動かなくなったので一度削除<br/>
(15/11-15 17:15) wheneverコマンドの記述を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acts-as-taggable-onでつくるタグクラウド＆効率的なタグ管理【Rails4.2 x Ruby2.2】]]></title>
    <link href="http://morizyun.github.io/blog/acts-as-taggable-on-gem-rails/"/>
    <updated>2015-11-15T13:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/acts-as-taggable-on-gem-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4K/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4K&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4K&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4K" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsのサービスを作っていて「タグ付けをしたい」と「タグクラウドを作りたい」という場合に使えるGem『<strong><a href="https://github.com/mbleigh/acts-as-taggable-on">mbleigh/acts-as-taggable-on</a></strong>』を紹介します。「<a href="http://blog.livedoor.jp/kensuu/archives/54268130.html">タグ付けやカテゴライズで構造化することはSEO的にもいいらしい</a>」ので、もしチャンスがあればぜひトライしてみてください！</p>

<p><strong>15/11/15 13:00 Rails 4.2 x Ruby 2.2で動作確認</strong><br/></p>

<p><a href="https://github.com/mbleigh/acts-as-taggable-on" class="button big primary">mbleigh/acts-as-taggable-on | GitHub</a></p>

<!-- more -->


<br style="clear:both;"/>


<h2>Gemの導入・設定</h2>

<p><code>Gemfile</code>に以下を追加して、<code>bundle install</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Manage Tag</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;acts-as-taggable-on&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてタグ管理用のテーブルのマイグレーションファイルを生成し、migrate。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">acts_as_taggable_on</span><span class="ss">:migration</span>
</span><span class='line'><span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<h2>タグクラウドをViewに表示するまでの流れ</h2>

<p>続いて実際にタグクラウドをViewに表示させてみます。</p>

<p>まず<code>app/model/user.rb</code>に<code>tags</code>タグを設置します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_taggable</span> <span class="c1"># acts_as_taggable_on :tags のエイリアス</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>たったこれだけで、<code>Userモデル</code>はこんな使い方ができるようになります。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bobby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">tag_list</span> <span class="o">=</span> <span class="s2">&quot;awesome, slick, hefty&quot;</span> <span class="c1"># this should be familiar</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">tags</span> <span class="c1"># =&gt; [&lt;Tag name:&quot;awesome&quot;&gt;,&lt;Tag name:&quot;slick&quot;&gt;,&lt;Tag name:&quot;hefty&quot;&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">tags_count</span> <span class="c1"># =&gt; [&lt;Tag name:&quot;awesome&quot; count=2&gt;,&lt;Tag name:&quot;slick&quot;&gt;,&lt;Tag name:&quot;hefty&quot; count=2&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて<code>app/controller/users_controller.rb</code>に以下の記述を追加して、tagを取得。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>class UsersController &lt; ApplicationController
</span><span class='line'>  def tag_cloud
</span><span class='line'>    <span class="c"># order(&#39;count DESC&#39;)でカウントの多い順にタグを並べています</span>
</span><span class='line'>    @tags <span class="o">=</span> User.tag_counts_on<span class="o">(</span>:tags<span class="o">)</span>.order<span class="o">(</span><span class="s1">&#39;count DESC&#39;</span><span class="o">)</span>
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>タグクラウドの表示のために、<code>app/helpers/user_helper.rb</code>に次の記述を追加します。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>module Userhelper
</span><span class='line'>  include ActsAsTaggableOn::TagsHelper
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p><strong>erb</strong>の場合は以下を追記。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">tag_cloud</span><span class="p">(</span><span class="vi">@tags</span><span class="p">,</span> <span class="sx">%w(css1 css2 css3 css4)</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">css_class</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="ss">:tag</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span> <span class="p">},</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="n">css_class</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>haml</strong>の場合はこちら。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">tag_cloud</span><span class="p">(</span><span class="vi">@tags</span><span class="p">,</span> <span class="sx">%w(css1 css2 css3 css4)</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="p">,</span> <span class="n">css_class</span><span class="o">|</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">link_to</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="p">{</span> <span class="n">action</span><span class="p">:</span> <span class="ss">:tag</span><span class="p">,</span> <span class="n">tag_name</span><span class="p">:</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span> <span class="p">},</span> <span class="n">class</span><span class="p">:</span> <span class="n">css_class</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いて、cssファイルにはこちら。(任意で変更してください)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.css1</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.0em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.css2</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.2em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.css3</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.4em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.css4</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1.6em</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に<code>config/routes.rb</code>を修正。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:users</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;tag/:tag_name&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>出来上がったタグクラウドはこちら。</p>

<p><img src="http://farm9.staticflickr.com/8348/8281723435_4029406336.jpg" width="500" height="87" alt="fpu_tmp_1355785967.3979_16f667"></p>

<p>GitHubには更に詳しい情報が載っているのでよかったら覗いてみてください。</p>

<p><a href="https://github.com/mbleigh/acts-as-taggable-on" class="button big primary">mbleigh/acts-as-taggable-on | GitHub</a></p>

<h2>所感</h2>

<p>Rails 4 x Ruby 2.1環境で久々にトライしてみましたが、本当に簡単に導入できました！</p>

<h2>[補足] 現在登録済のタグの一覧が欲しい場合</h2>

<p>現在登録済のタグの一覧が欲しい場合はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActsAsTaggableOn</span><span class="o">::</span><span class="no">Tag</span><span class="o">.</span><span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Special Thanks</h2>

<ul>
<li><a href="http://t-taira.hatenablog.com/entry/20110116/1295139238">Rails3でタグ付けの実装 - t-taira blog</a></li>
<li><a href="https://github.com/mbleigh/acts-as-taggable-on">mbleigh/acts-as-taggable-on · GitHub</a></li>
<li><a href="http://stackoverflow.com/questions/22710243/how-to-get-a-list-of-all-tags-while-using-the-gem-acts-as-taggable-on-in-rails">ruby - How to get a list of all tags while using the gem &#8216;acts-as-taggable-on&#8217; in Rails (not the counts) - Stack Overflow</a></li>
</ul>


<h2>変更来歴</h2>

<p>12/12/18 08:00 新規作成<br/>
13/12/31 21:30 Rails 4 x Ruby 2.1で動作確認<br/>
15/11/15 13:00 Rails 4.2 x Ruby 2.2.3で動作確認<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第3章 メソッド[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3/"/>
    <updated>2015-11-09T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第3章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>3章 メソッド</h2>

<h3>動的メソッドを使ったリファクタリング</h3>

<p>まずは修正前の変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Mouse: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Cpu: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>動的メソッドを使ってリファクタリングを行った結果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>    <span class="n">data_source</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/^get_(.*)_info$/</span><span class="p">)</span> <span class="p">{</span> <span class="no">Computer</span><span class="o">.</span><span class="n">define_component</span> <span class="vg">$1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">?</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>method_missing を使った リファクタリング</h3>

<p>さきほどの <code>Computer</code> クラスを <code>method_missing</code> でリファクタリングした場合。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@data_source</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">?</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">include_private</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@data_source</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、 <code>method_missing</code> はバグが発生した場合に気づきにくい特徴があるので利用には注意が必要。
あと、<code>method_missing</code> よりも、<code>respond_to_missing?</code> のほうが適切というお話もあります。</p>

<p><strong><a href="https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding">Always Define respond_to_missing? When Overriding method_missing</a></strong></p>

<p>ゴーストメソッドの最大の問題点は、本物のメソッドではないという点だ。
振る舞いはメソッドなのに、 <code>Object#methods</code> に含まれないのだ。</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Railsを仕事にしていくための第一歩]]></title>
    <link href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/"/>
    <updated>2015-11-08T23:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近仕事でRailsのコードレビューをする時間が長くって、いろいろ指摘するんですが、
Railsって「Railsチュートリアル」には書いてないのに覚えないと仕事にならないこと多すぎだなと気付かされます。
どこでどんなふうにすれば、プロになろうとしている人が最短距離で知識を獲得できるかはわからないですが、
今思っている特に大事だなと思うことつらつらと書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>プログラミングの重要な要素</h2>

<p>まず、Railsの前にプログラミングで全般的に特に重要と思っている要素を紹介します。</p>

<pre>
- リーダブルなコード
  - ネーミングルールについて
  - 言語・フレームワークのルール
  - 変数のスコープについて
  - プロジェクトの設計思想
  - オブジェクト指向・コードの再利用性
- 正しいテストケースを作る
</pre>


<p>プロジェクトによって変わるので、全ては書きませんが、ぜひ意識してどこを学ぶべきかを考えてみてください。</p>

<h2>ネーミングルールについて</h2>

<ul>
<li>動詞・名詞を正しく使い分けて下さい(英語離れるまで大変ですが、頑張ってください＞＜)</li>
<li>名前は「他のチームメンバーにも意味がわかる英語の名前」にして下さい</li>
<li>プロジェクト内の周りのメソッド・変数うがどんな意味を持っているか考えて見てください</li>
</ul>


<h2>コーディングガイドライン</h2>

<p>Ruby/Railsの有名なコーディングガイドラインは世の中に沢山あるので、ぜひ読んでください。</p>

<ul>
<li><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide">The Rails Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/cookpad/styleguide/blob/master/ruby.ja.md">CookPad Ruby コーディング規準</a></li>
<li><a href="https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md">The Ruby Style Guide (fortissimo1997)</a></li>
<li><a href="https://github.com/satour/rails-style-guide/blob/master/README-jaJA.md">The Rails Style Guide (satour)</a></li>
</ul>


<h2>変数のスコープについて</h2>

<p>変数のスコープにおいてプログラムの読みやすさはすごく大切です。
ローカル変数、インスタンス変数、クラス変数のスコープを理解して使い分けて下さい。
スコープの広い変数をむやみに使うとほかの人がコードを読みにくくなり、バグの温床になります。</p>

<h2>オブジェクト指向について</h2>

<ul>
<li><a href="http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1">オブジェクト指向を手に入れるまでの奇跡</a></li>
<li><a href="http://tdak.hateblo.jp/entry/20140406/1396773476">オブジェクト指向について</a></li>
<li><a href="http://www.itmedia.co.jp/im/articles/0703/06/news125.html">5分で分るオブジェクト指向</a></li>
</ul>


<h2>その他必須で読んで欲しい本・記事</h2>

<h3>書籍</h3>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4873115655">リーダブルコード</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873113679">初めてのRuby</a></li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">EveryDay Rails(RSpec)</a></li>
</ul>


<h3>記事</h3>

<ul>
<li><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに使えそうなイディオムとか便利メソッドとか</a></li>
<li><a href="http://at-grandpa.hatenablog.jp/entry/2013/11/01/072636">MVCの勘所</a></li>
<li><a href="http://betterspecs.org/jp/">RSpecの書き方</a></li>
</ul>


<h2>Rails/Ruby Tips</h2>

<p>ここからは、細かめのTipsです。よく指摘するところを中心に書きます。</p>

<h3>Active Record</h3>

<ul>
<li>pluck を上手に活用して下さい(ARのオブジェクトを作らないのでSQLのコストが減ります)

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51847390.html">Rails3.2から導入されたpluckメソッドのパフォーマンスが素晴らしい件 - (ﾟ∀ﾟ)o彡 sasata299&#8217;s blog</a></li>
</ul>
</li>
<li>ログを見て、無駄なSQLがないかを常に考えてください</li>
<li>indexが適切に効かないと、パフォーマンスが悪くなります。常にパフォーマンスを意識してください</li>
</ul>


<h3>Rails - View</h3>

<ul>
<li>共通的に使う可能性のあるは Decorator(ActiveDecorator等を利用) 側に書いて下さい</li>
<li>Viewのロジックは出来る限り減らして下さい</li>
<li>haml/slimは構造化しやすいという点で便利！</li>
</ul>


<h3>Rails - i18n</h3>

<p>適材適所でi18nを活用してください。</p>

<ul>
<li><a href="http://railsguides.jp/i18n.html">Rails国際化(I18n) API | Rails ガイド</a></li>
<li><a href="http://morizyun.github.io/blog/i18n-english-rails-ruby-many-languages/">Railsの多言語化対応 i18nのやり方を整理してみた！</a></li>
<li><a href="http://ruby-rails.hatenadiary.com/entry/20150226/1424937175">Railsのi18nの基本的な使い方まとめ - Rails Webook</a></li>
</ul>


<h3>N+1問題の対策 - Bullet</h3>

<p>RailsのActiveRecord(findやwhere)は便利ですが、DB(SQL)の側から見ると
非効率的なクエリを発生させることがあります。
これを監視してくれるのが、『<strong><a href="https://github.com/flyerhzm/bullet">Gem Bullet</a></strong>』です。
このGemを入れておくと開発環境で N+1が発生した時に警告を出してくれます。</p>

<ul>
<li><a href="http://www.techscore.com/blog/2012/12/25/rails%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E7%B4%B9%E4%BB%8B-n1%E5%95%8F%E9%A1%8C%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E3%80%8Cbullet%E3%80%8D/">Railsライブラリ紹介: N+1問題を検出する「bullet」</a></li>
<li><a href="http://morizyun.github.io/blog/speed-up-rails-bullet/">[Rails 高速化] ページキャッシュ、N+1対策、SQLチューニング</a></li>
</ul>


<h3>Profiler</h3>

<p>Viewが遅い時にボトルネックを探すためのツールです。
速度改善をする場合はプロファイラーか、ログを取ってボトルネックを計測して実施して下さい。</p>

<ul>
<li><a href="https://github.com/MiniProfiler/rack-mini-profiler">MiniProfiler/rack-mini-profiler - GitHub</a></li>
<li><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化 - CubicLouve</a></li>
</ul>


<h3>Ruby/Railsの細かいTips</h3>

<ul>
<li>Ruby の定数は 書き換え可能です。immutable な場合はかならず、最後に .freeze をつけて下さい

<ul>
<li><a href="http://qiita.com/yukiyan/items/39f945c55b6dc5e11ed7">Rubyで定数を扱う場合はfreezeするべき</a></li>
</ul>
</li>
<li>Timezoneもしっかり意識して実装すると後々はまらないと思います

<ul>
<li><a href="http://qiita.com/jnchito/items/cae89ee43c30f5d6fa2c">RubyとRailsにおけるTime, Date, DateTime, TimeWithZoneの違い</a></li>
</ul>
</li>
<li>ActiveSupport::StringInquirerを使うとコードが読みやすくなります。適材適所で利用を検討してください。

<ul>
<li><a href="http://d.hatena.ne.jp/holysugar/20110513/p1">今更ながらシリーズ(2) StringInquirer - HWPS別館</a></li>
</ul>
</li>
</ul>


<h2>参考書籍</h2>

<p>その他読んでおくといいよって本です。</p>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4774145963">良いコードを書く技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873114799">プログラマが知るべき97のこと</a></li>
<li><a href="http://www.amazon.co.jp/dp/4822284654">オブジェクト指向でなぜ作るのか</a></li>
<li><a href="http://www.amazon.co.jp/dp/4774142042">Webを支える技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4048869558">プログラマの考え方が面白いほど身につく本</a></li>
</ul>


<p>あとは『<strong><a href="http://blog.jnito.com/entry/2014/09/29/074949">プログラマ歴12年の僕が選んだ「10年経っても役立つ技術書17選」 - give IT a try</a></strong>』
にプログラマーが基礎を身につける上で役に立ちそうな本が紹介されています。こちらも良かったら読んでみてください<sup>^</sup></p>

<h2>本当に初心者な人向けに</h2>

<p>ちょっと上の内容がハードだなと思う人向けには拙著
『<strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファースト・ガイド - 酒と泪とRubyとRailsと</a></strong>』
をよかったら読んでみてください。</p>

<br style="clear:both;"/>


<div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://goo.gl/0HPyuh">pull-request-のフォーマットを決めるとレビューの効率が3倍よくなる</a></strong></li>
</ul>

]]></content>
  </entry>
  
</feed>
