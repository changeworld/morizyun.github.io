<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:06:35+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacでSSHポートフォワーディング管理 Coccinellida & ローカルでrails console実行してサーバDBに接続]]></title>
    <link href="http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel/"/>
    <updated>2015-11-20T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/portforwading-coccinellida-mac-app-ssh-tunnel</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117313/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117313&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117313&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117313" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近借りているサーバーのDBに安全につなぐ方法はないものかと
物色している家庭でSSHポートフォワーディングの便利さをようやく理解しました(恥ずかしながら)。</p>

<p>この便利さを自作アプリとかでも応用できるようにMacの起動時に自動で接続して、それを維持し続けるようにしてくれる無料アプリ
『<strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a></strong>』
(正確にはそのためのterminalコマンドを設定できる)を見つけたので紹介です。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>ターミナルコマンド</h2>

<p>まずはターミナルからSSHのポートフォワーディングをするためのコマンドがこちら。</p>

<p><code>
ssh ログイン名@経由サーバ -L 自分のポート:目的サーバ:目的サーバのポート
</code></p>

<h2>Coccinellida を使った設定方法</h2>

<p>基本的には次のことをすればいいです。</p>

<ul>
<li><strong><a href="http://coccinellida.sourceforge.net/">Coccinellida - Simple SSH Tunnel Manager for Mac OS X</a> からアプリをダウンロード</strong></li>
<li>ターミナルと同様の設定をアプリで行う

<ul>
<li>不明な点がある場合 => <strong><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする</a></strong></li>
</ul>
</li>
<li>System preference => ユーザーとグループ => ログイン時に自動起動するアプリに追加</li>
</ul>


<p>これでlocalhostのポートをサーバー内のDBのポートと同じように扱う事ができるようになります。
(SSHを使っているので安全に接続、データをやり取りできるはず)</p>

<h2>RailsコンソールからサーバーDBに接続する場合</h2>

<p>これを応用すると、ローカルでRailsコンソールするとリモートのDBに接続するといったことも可能になります。</p>

<p>今回はリモートの環境(remote)を作ります。<code>config/environments/remote.rb</code>をdevelopmentあたりをコピーして作成。
次に<code>config/database.yml</code>に以下を追加します。</p>

<p><code>
remote:
  adapter: postgresql
  encoding: unicode
  database: &lt;DB名&gt;
  pool: 5
  username: &lt;ユーザー名&gt;
  password: &lt;パスワード&gt;
  port: ＜ポートフォワーディングしているport番号＞
  host: localhost
</code></p>

<p>たったのこれだけ、あとは普通にローカルで以下のコマンドを実行するとリモートのDBにつないで好き勝手できます。
(<code>host</code>がなかった場合、localのsocketを探しに行ってしまうので、必ずhostは設定してください)</p>

<p><code>
RAILS_ENV=remote bundle exec rails console
</code></p>

<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://eye4brain.sakura.ne.jp/wp/blog/2015/03/07/osx%E3%81%A7coccinellida%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6ssh%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B/">OSXでCoccinellidaを使ってSSHポートフォワーディングする | eye4brain</a></li>
<li><a href="http://qiita.com/ron214_ron/items/aa273baff030e253ae96">rails consoleにて、dbをproductionに接続する。 - Qiita</a></li>
<li><a href="http://nob-on-the-boat.blogspot.jp/2010/03/ssh.html">No One Better: SSHポートフォワーディング</a></li>
<li><a href="http://qiita.com/YusukeHigaki/items/9bd0c21fbcc47e12b5c1">postgresqlを他ホストからもつなげるようにする - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDBをMac Yosemiteにインストール]]></title>
    <link href="http://morizyun.github.io/blog/mongodb-install-setup-mac/"/>
    <updated>2015-03-16T10:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/mongodb-install-setup-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00ITFOFLS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00ITFOFLS&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00ITFOFLS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00ITFOFLS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
MongoDBはドキュメント思考のデータベース(NoSQLの一種)です。
開発の初期段階で、RailsでMongoDB/mongoidを使うとスキーマが固まっていない段階でDBを意識せずに開発が進められます。
うまくユースケースにハマりそうな場合は、ぜひ使ってみてください＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>MongoDBをインストール手順</h2>

<p>Homebrewのアップデート。</p>

<p>{% codeblock lang:bash %}
brew update
{% endcodeblock %}</p>

<p>mongodbのインストール。</p>

<p>{% codeblock lang:bash %}
brew install mongodb
{% endcodeblock %}</p>

<p>自動起動設定。</p>

<p>{% codeblock lang:bash %}</p>

<h1>起動スクリプトのシンボリックリンク追加</h1>

<p>ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents</p>

<h1>自動起動をさせたい場合はこちら</h1>

<p>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist</p>

<h1>もし自動起動をしたくない場合に手動で起動する場合はこちら</h1>

<p>mongod --config /usr/local/etc/mongod.conf
{% endcodeblock %}</p>

<p>mongodbの動作確認。</p>

<p>{% codeblock lang:bash %}
mongo</p>

<blockquote><p>MongoDB shell version: 3.0.0
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
  http://docs.mongodb.org/
Questions? Try the support group
  http://groups.google.com/group/mongodb-user</p>

<p>{% endcodeblock %}</p></blockquote>

<p>dbの切り替え。</p>

<p>{% codeblock lang:bash %}
use mydb</p>

<blockquote><p>switched to db mydb
{% endcodeblock %}</p></blockquote>

<p>データの登録テスト。</p>

<p>{% codeblock lang:bash %}
j = { name : "mongo" };</p>

<blockquote><p>{ "name" : "mongo" }</p></blockquote>

<p>db.things.save(j);
db.things.find();</p>

<blockquote><p>{ "_id" : ObjectId("503ae94fb29f5c1529443919"), "name" : "mongo" }
{% endcodeblock %}</p></blockquote>

<p>シンプル &amp; 便利！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>補足</h2>

<p><a href="http://www.cuspy.org/diary/2012-04-17">MongoDBの薄い本(The Little MongoDB Book)</a>は、MongoDBを実際に手を動かして学ぶことができる無料のチュートリアル本です。</p>

<p><a href="http://www.cuspy.org/diary/2012-04-17" title="fpu_tmp_1353921432.4884_59f4bc by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8057/8219449049_f555a10dae.jpg" width="243" height="344" alt="fpu_tmp_1353921432.4884_59f4bc"></a></p>

<p>オススメです！</p>

<h2>Special Thanks</h2>

<p><a href="http://www.mongodb.org/display/DOCSJP/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB-%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E5%8F%96%E5%BE%97">チュートリアル | mongoDB 公式 日本語</a></p>

<h2>変更来歴</h2>

<p>(2012-11-12 17:00) 新規作成<br/>
(2014-03-16 10:00) Yosemiteでインストール<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラムに最適なフォント『Ricty』を超簡単にインストール[Mac限定]]]></title>
    <link href="http://morizyun.github.io/blog/ricty-font-homebrew-mac/"/>
    <updated>2015-02-26T08:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ricty-font-homebrew-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4844363433/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4844363433&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4844363433&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4844363433" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プログラムを読みやすいことで有名なフォント『<strong>Ricty</strong>』をHomebrewで簡単にインストールするための手順です。Homebrewでのインストールは一瞬なので、もしまだ使ったことがなければぜひトライしてみて下さい。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Rictyのサンプル</h2>

<p>Rictyってどんなの？ということでこんなのです↓</p>

<p><img src="http://farm4.staticflickr.com/3743/8864669116_05d7734cdc_z.jpg" width="640" height="393" alt="Ricty font"></p>

<p>文字と文字の横のスペースが大きいので読みやすいです。</p>

<h2>インストール手順</h2>

<p>コンソールに以下のコマンドを入力。(ここは定期的に変化するようなので実際の画面を優先してください)</p>

<p>{% codeblock lang:bash %}
brew tap sanemat/font
brew install Caskroom/cask/xquartz
brew install ricty</p>

<h1>(ゴニョゴニョ)</h1>

<p>cp -f /usr/local/Cellar/ricty/3.2.2/share/fonts/Ricty*.ttf ~/Library/Fonts/
fc-cache -vf
{% endcodeblock %}</p>

<p>Homebrewがインストールがまだの場合は、『<strong><a href="/blog/mountain-lion-rails-setup-ruby-rvm-msyql/">Mountain Lion Rails 最新環境 詳解 構築手順</a></strong>』を御覧ください。</p>

<h3>Mac Yosemiteの場合に事前インストールが必要なパッケージ</h3>

<p>Masanori MaedaさんからYosemiteの場合に事前インストールが必要なパッケージを教えて頂きました。
Yosemiteな方は事前に以下のパッケージをインストールしてください。</p>

<p>{% codeblock lang:bash %}
brew install automake
brew install pkg-config
{% endcodeblock %}</p>

<h2>iTerm2でRictyを使う場合</h2>

<p>もしiTerm2でRictyを使いたい場合は、<code>Performances > Profiles > Text</code>を開いて以下の様に設定。</p>

<p><img src="http://farm8.staticflickr.com/7364/8864329963_c75c35cffe_z.jpg" width="640" height="466" alt="set Ricty font to Mac iterm2"></p>

<p>もし外部ディスプレイを使っている場合は次のアンチエイリアスを有効にするためのコマンドを実行して、ターミナルを再起動して下さい。</p>

<p>{% codeblock lang:bash %}
defaults -currentHost write -globalDomain AppleFontSmoothing -int 2
{% endcodeblock %}</p>

<h2>TerminalでRictyを使う場合</h2>

<p>もしターミナルて使いたい場合は、<code>ターミナル > 環境設定 > 設定</code>を開いて以下のように設定。</p>

<p><img src="http://farm8.staticflickr.com/7384/8864799192_e3a2c84623_z.jpg" width="640" height="550" alt="set Ricty Font to Mac terminal"></p>

<p>後はアンチエイリアスの有効化も忘れずに。</p>

<p><img src="http://farm8.staticflickr.com/7290/8864888130_4826d7d505_z.jpg" width="640" height="544" alt="set anti-arias to Mac terminal"></p>

<p>あと、もし外部ディスプレイを使っている場合は次のアンチエイリアスを有効にするためのコマンドを実行して、ターミナルを再起動して下さい。</p>

<p>{% codeblock lang:bash %}
defaults -currentHost write -globalDomain AppleFontSmoothing -int 2
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://sanematsu.wordpress.com/2013/05/11/brew-install-ricty/">brew install ricty | 實松アウトプット</a></strong></p>

<p><strong><a href="http://blog.nkzn.net/entry/2012/06/01/234855">プログラミング用フォント「Ricty」をLionに導入してみたメモ - ナカザンドットネット</a></strong></p>

<h2>変更来歴</h2>

<p>13/06/20 17:20 タイトルを変更<br/>
14/02/07 10:45 Rictyのインストール周りを最新の状況に変更<br/>
15/02/26 08:55 yosemiteインストールの記述を修正<br/></p>

<h2>Special Thanks</h2>

<p><strong>Ueta Syunya</strong>さんにRictyのインストール周りの変更を教えていただきました。ありがとうございます！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac MountainLion/CentOS 6.4へのPostgreSQL 9.2の導入手順]]></title>
    <link href="http://morizyun.github.io/blog/postgresql-mac-centos-rails/"/>
    <updated>2015-01-18T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/postgresql-mac-centos-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00B73U7OI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00B73U7OI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00B73U7OI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00B73U7OI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />MySQLと並ぶオープンソースのRDBMS、『PostgreSQL』の導入手順です。海外ではHerokuやEngine Yardが標準のDBをPostgreSQLにしていたりと人気が高いので、使えるようになっておいて、損はないと思います！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>CentOSへのインストール</h2>

<p>まずは本家の<a href="http://yum.postgresql.org/repopackages.php">PostgreSQL RPM Repository (with Yum)</a>で自分の環境にマッチした<code>rpm</code>を探して以下のコマンドを実行。(URLの部分は自分の環境のものに書き換えて下さい)</p>

<p>{% codeblock lang:bash %}
wget -P /tmp http://yum.postgresql.org/9.2/redhat/rhel-6-x86_64/pgdg-centos92-9.2-6.noarch.rpm
sudo rpm -ivh /tmp/pgdg-centos92-9.2-6.noarch.rpm
{% endcodeblock %}</p>

<p>続いて、<code>postgres9.2</code>をインストール。</p>

<p>{% codeblock lang:bash %}
sudo yum install -y postgresql92-server postgresql92-devel postgresql92-contrib
{% endcodeblock %}</p>

<p>DBを初期化。</p>

<p>{% codeblock lang:bash %}
sudo /etc/rc.d/init.d/postgresql-9.2 initdb
{% endcodeblock %}</p>

<p>Postgresを起動。</p>

<p>{% codeblock lang:bash %}
sudo /etc/rc.d/init.d/postgresql-9.2 start
{% endcodeblock %}</p>

<p>さらにサーバの起動時にPostgresが起動するように設定します。</p>

<p>{% codeblock lang:bash %}
sudo chkconfig postgresql-9.2 on
{% endcodeblock %}</p>

<p>自動起動の設定が成功したか確認。</p>

<p>{% codeblock lang:bash %}
chkconfig --list | grep postgresql-9.2</p>

<blockquote><p>postgresql-9.2  0:off   1:off   2:on    3:on    4:on    5:on    6:off #&lt;= となっていれば成功
{% endcodeblock %}</p></blockquote>

<h2>Postgresqlの設定修正</h2>

<p>9.2の初期設定だと、unixのユーザー名がPostgreSQLのユーザー名と一致していないといけないようになっているそうです。
その修正方法です。</p>

<p>{% codeblock lang:bash %}
sudo vi /var/lib/pgsql/9.2/data/pg_hba.conf
{% endcodeblock %}</p>

<p>上のファイルの中の以下の部分を修正。</p>

<p>{% codeblock lang:bash %}
local   all             postgres                                peer</p>

<h1>↓ peer => md5に修正</h1>

<p>local   all             postgres                                md5
{% endcodeblock %}</p>

<h2>CentOSへのpgのインストール</h2>

<p>CentOSへpgをインストールする場合は、<code>vim ~/.bashrc</code>で事前に以下を追加。</p>

<p>{% codeblock lang:bash %}
export PATH=${PATH}:/usr/pgsql-9.2/bin
{% endcodeblock %}</p>

<p>続いて、<code>source ~/.bashrc</code>を実行して設定を反映。</p>

<p><code>pgsql-9.2</code>のところはバージョンによって適宜変更して下さい。</p>

<p>これが完了したら<code>gem install pg</code>でインストールできます。</p>

<h2>CentOSでのユーザー作成コマンド</h2>

<p>インストールが完了すると、postgresユーザーが追加されます。このユーザーになってから、createuserコマンドを実行するとユーザーが作成されます。
<code>[ユーザー名]</code>には任意のユーザー名を追加してください。</p>

<p>{% codeblock lang:bash %}
sudo su -
su - postgres
createuser -s [ユーザー名]
{% endcodeblock %}</p>

<h2>Macへのインストール(Homebrew)</h2>

<p>Macの『<a href="http://mxcl.github.com/homebrew/">Homebrew</a>』をつかってのインストール手順です。まずは<code>postgres</code>をインストール。</p>

<p>{% codeblock lang:bash %}
brew install postgresql
{% endcodeblock %}</p>

<p>続いて、DBを初期化する前に既存のposgreSQL環境を移動。</p>

<p>{% codeblock lang:bash %}
mv /usr/local/var/postgres /usr/local/var/postgres.org
{% endcodeblock %}</p>

<p>でもってDB初期化。</p>

<p>{% codeblock lang:bash %}
initdb /usr/local/var/postgres -E utf8</p>

<blockquote><p>The files belonging to this database system will be owned by user "xxxx".
This user must also own the server process.</p>

<p>The database cluster will be initialized with locale "ja_JP.UTF-8".
initdb: could not find suitable text search configuration for locale "ja_JP.UTF-8"
The default text search configuration will be set to "simple".</p>

<p>fixing permissions on existing directory /usr/local/var/postgres ... ok
creating subdirectories ... ok
selecting default max_connections ... 20
selecting default shared_buffers ... 1600kB
creating configuration files ... ok
creating template1 database in /usr/local/var/postgres/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok</p>

<p>WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.</p>

<p>Success. You can now start the database server using:</p>

<pre><code>postgres -D /usr/local/var/postgres
</code></pre>

<p>or</p>

<pre><code>pg_ctl -D /usr/local/var/postgres -l logfile start
</code></pre>

<p>{% endcodeblock %}</p></blockquote>

<p>Macにプリインストール(?)されているpostgresを見に行かないように設定を修正。(詳細は<strong><a href="http://d.hatena.ne.jp/hiro_nemu/20120302/1330679054">こちら</a></strong>)</p>

<p>{% codeblock lang:bash %}
wget http://nextmarvel.net/blog/downloads/fixBrewLionPostgres.sh
sh fixBrewLionPostgres.sh
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
sudo mkdir /var/pgsql_socket
sudo chmod 777 /var/pgsql_socket
{% endcodeblock %}</p>

<p>PostgreSQLの起動。</p>

<p>{% codeblock lang:bash %}
pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
{% endcodeblock %}</p>

<p>PostgreSQLの動作確認。</p>

<p>{% codeblock lang:bash %}
psql -l</p>

<pre><code>                          List of databases
</code></pre>

<p>   Name    | Owner | Encoding |   Collate   |    Ctype    | Access privileges
-----------+-------+----------+-------------+-------------+-------------------
 postgres  | komji | UTF8     | ja_JP.UTF-8 | ja_JP.UTF-8 |
 template0 | komji | UTF8     | ja_JP.UTF-8 | ja_JP.UTF-8 | =c/komji         +</p>

<pre><code>       |       |          |             |             | komji=CTc/komji
</code></pre>

<p> template1 | komji | UTF8     | ja_JP.UTF-8 | ja_JP.UTF-8 | =c/komji         +</p>

<pre><code>       |       |          |             |             | komji=CTc/komji
</code></pre>

<p>{% endcodeblock %}</p>

<p>となっていれば成功。もしエラーが発生するようなら、対策を下の方のおまけに書いたのでやってみて下さい。</p>

<p>次に、PostgreSQLを自動起動するように設定。</p>

<p>{% codeblock lang:bash %}
ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
{% endcodeblock %}</p>

<h2>MacでのGem pgのインストール</h2>

<p>もし既に<code>pg</code>をインストール済なら一度削除(<code>gem uninstall pg</code>)して下さい。</p>

<p>ではいよいよインストールですが、<code>gem install pg</code>ではNGらしいです。詳しくは以下のコマンドを実行。</p>

<p>{% codeblock lang:bash %}
brew info postgresql</p>

<blockquote><p>If you want to install the postgres gem, including ARCHFLAGS is recommended:
env ARCHFLAGS="-arch x86_64" gem install pg
{% endcodeblock %}</p></blockquote>

<p>ということで以下のコマンドを実行して<code>pg</code>をインストール。</p>

<p>{% codeblock lang:bash %}
env ARCHFLAGS="-arch x86_64" gem install pg
{% endcodeblock %}</p>

<h2>コンソールからのPostgreSQLの操作</h2>

<p>コマンドラインからのpostgresへの操作です。</p>

<p>{% codeblock lang:bash %}</p>

<h1>ユーザーの作成(DBの作成権限のあるユーザー) パスワード省略</h1>

<p>createuser -s [ユーザー名]</p>

<h1>ユーザーの作成(DBの作成権限のあるユーザー) パスワード付き</h1>

<p>createuser -s [ユーザー名] -P
新しいロールのためのパスワード: &lt;= パスワード入力
もう一度入力してください： &lt;= パスワード入力</p>

<h1>ユーザーの削除</h1>

<p>dropuser [ユーザー名]</p>

<h1>データベースの作成(superuserではない)</h1>

<p>createdb [データベース名] -O [ユーザー名]</p>

<h1>データベースの作成(superuser)</h1>

<p>createdb [データベース名] -O [ユーザー名] -s</p>

<h1>データベースの削除</h1>

<p>dropdb [データベース名]</p>

<h1>データベース一覧の表示</h1>

<p>psql -l
{% endcodeblock %}</p>

<p>PostgreSQLのコマンドラインツール<code>psql</code>の主要コマンド一覧です。<br/>MySQLのmysqlに近いツールのようです。</p>

<p>{% codeblock lang:bash %}</p>

<h1>PostgreSQLの再起動</h1>

<p>pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log restart</p>

<h1>psql の起動</h1>

<p>psql [データベース名]</p>

<h1>psql の終了</h1>

<p>\q</p>

<h1>psqlで使えるコマンド一覧</h1>

<p>\?
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>おまけ：[エラー] connections on Unix domain socket "/var/pgsql_socket/.s.PGSQL.5432"? の対策</h2>

<p>次のようなエラーメッセージが出た場合の対策です。</p>

<blockquote>
psql: could not connect to server: No such file or directory
Is the server running locally and accepting
connections on Unix domain socket "/var/pgsql_socket/.s.PGSQL.5432"?
</blockquote>


<h3>(1) プリインストールのPostgreSQLとバッティングしている場合</h3>

<p>対策用のシェルスクリプトを実行。</p>

<p>{% codeblock lang:bash %}</p>

<h1>シェルスクリプトの取得</h1>

<p>curl -o fixBrewLionPostgresql.sh http://nextmarvel.net/blog/downloads/fixBrewLionPostgres.sh</p>

<h1>シェルスクリプトの実行権限を追加</h1>

<p>chmod a+x fixBrewLionPostgresql.sh</p>

<h1>シェルスクリプトの実行</h1>

<p>./fixBrewLionPostgresql.sh
{% endcodeblock %}</p>

<p>これで<code>psql -l</code>でエラーが発生しなくなれば成功です。</p>

<h3>(2) 過去にPostgreSQLをインストールしたことがある場合</h3>

<p>以下のコマンドを実行してフォルダを初期化。</p>

<p>{% codeblock lang:bash %}</p>

<h1>フォルダの削除</h1>

<p>rm -rf /usr/local/var/postgres</p>

<h1>初期化</h1>

<p>initdb /usr/local/var/postgres
{% endcodeblock %}</p>

<h2>Special Thanks</h2>

<p><a href="http://mayoiga-shironeko.hatenablog.com/entry/2012/10/03/005753">CentOS 6.3にPostgreSQL9.2をインストール - 迷い家の白猫 技術部</a></p>

<p><a href="http://y-kit.jp/saba/xp/postgrecmd.htm">PostgreSQLデータベースのコマンド</a></p>

<p><a href="http://kraudio.com.br/instalando-postgresql-no-mac-os-x-10-8/">Instalando PostgreSQL no Mac OS X (10.8)Blog do Kraudio | Blog do Kraudio</a></p>

<p><a href="http://d.hatena.ne.jp/hiro_nemu/20120302/1330679054">MacBook AirにPostgreSQLをbrewでインストールした - ありの日記</a></p>

<p><a href="http://d.hatena.ne.jp/NowTom/20110728/1311834182">Mac+HomeBrew+Postgresql+pg - NowTomの日記</a></p>

<p><a href="http://qa.atmarkit.co.jp/q/2395">PostgreSQLとMySQLはどちらかに明確な優位性がありますか？ - QA@IT</a></p>

<p><a href="http://stackoverflow.com/questions/9234960/gem-install-pg-with-pg-config-works-bundle-fails">postgresql - gem install pg --with-pg-config works, bundle fails - Stack Overflow</a></p>

<p><a href="http://www.postgresql.jp/document/8.4/html/sql-alterrole.html">ALTER ROLE</a></p>

<p><a href="http://web.sfc.keio.ac.jp/~t11240rk/blog/?p=191">Mac(MTLion)にHomebrewでPostgresqlを入れる</a></p>

<p><a href="http://qiita.com/tstomoki/items/0f1a930bd42a8e1fdaac">Homebrewを使ったPostgreSQLのインストール(Mac OS Lion)</a></p>

<p><a href="http://qa.atmarkit.co.jp/q/2604">psqlがPeer authentication failedというエラーで起動できない - QA@IT</a></p>

<h2>変更来歴</h2>

<p>(2013/09/25 05:25) Mac Mountain Lionでのトラブルシューティングを追加<br/>
(2013/09/25 05:50) CentOS 6.4対応<br/>
(2014/09/23 19:30) createuserのパラメータ修正<br/>
(2014/11/02 12:20) CentOSでのユーザー作成の手順を追加<br/>
(2015-01-18 11:30) 記述ミスを修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB]]></title>
    <link href="http://morizyun.github.io/blog/redis-mac-centos-rails/"/>
    <updated>2014-12-22T20:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/redis-mac-centos-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873115930/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873115930&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873115930&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873115930" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />memcachedライクなKey-Value方式と、永続化対応のインメモリDB『<strong><a href="http://redis.io/">Redis</a></strong>』をMac OSXや、CentOSに導入する手順です。Redisを効率的に活用して、さらにRailsアプリを高速化しちゃいましょう＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>CentOS 6.xへのインストール</h2>

<p>まずは、CentOS 6.xにyumをつかってRedisをインストールする前にEPELを追加。追加済の場合はスキップ。</p>

<p>{% codeblock lang:bash %}
sudo rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
sudo yum --enablerepo=epel -y install redis
{% endcodeblock %}</p>

<p>Redisを起動。</p>

<p>{% codeblock lang:bash %}
sudo /etc/init.d/redis start
{% endcodeblock %}</p>

<p>次に動作確認してみます。<code>redis-cli</code>でRedisに接続できます。</p>

<p>{% codeblock lang:bash %}
redis-cli</p>

<blockquote><p>set 'test' 10
OK
get 'test'
"10"
exit
{% endcodeblock %}</p></blockquote>

<p>さらにサーバの起動時にRedisが起動するように設定します。</p>

<p>{% codeblock lang:bash %}
sudo chkconfig redis on
{% endcodeblock %}</p>

<p>自動起動の設定が成功したか確認。</p>

<p>{% codeblock lang:bash %}
chkconfig --list | grep redis</p>

<blockquote><p>redis           0:off   1:off   2:on    3:on    4:on    5:on    6:off #&lt;= となっていれば成功
{% endcodeblock %}</p></blockquote>

<h2>Macへのインストール(Homebrew)</h2>

<p>Macの『<a href="http://mxcl.github.com/homebrew/">Homebrew</a>』をつかってのインストール手順はこちら。</p>

<p>{% codeblock lang:bash %}
brew install redis</p>

<blockquote><p>==> Downloading http://redis.googlecode.com/files/redis-2.6.7.tar.gz
Already downloaded: /Library/Caches/Homebrew/redis-2.6.7.tar.gz
==> make -C /private/tmp/redis-KHTm/redis-2.6.7/src CC=cc
==> Caveats
You should reload redis:</p>

<pre><code>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
</code></pre>

<p>/usr/local/Cellar/redis/2.6.7: 9 files, 744K, built in 2 seconds
{% endcodeblock %}</p></blockquote>

<p>Macの起動時にRedisが自動起動するように設定。</p>

<p>{% codeblock lang:bash %}
ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
{% endcodeblock %}</p>

<p>redisの接続確認はこちら。</p>

<p>{% codeblock lang:bash %}
redis-cli
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://blog.livedoor.jp/tattyamm/archives/4147335.html">さくらVPS(CentOS6.3)へのredisインストールとchkconfigへの登録 - えんたつの記録</a></p>

<p><a href="http://codenote.net/redis/1610.html">[Mac] Redis を Homebrew でインストールする手順 | CodeNote.net</a></p>

<p><a href="http://blog.scimpr.com/2013/01/21/rails%E3%81%A7redis%E3%82%92%E4%BD%BF%E3%81%86%E4%BE%8B%E3%81%AE%E3%83%A1%E3%83%A2/">RailsでRedisを使う例のメモ | Scimpr Blog</a></p>

<p><a href="http://www.techscore.com/blog/2013/01/09/memcached%E3%81%A8redis%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/">» memcachedとredisについて TECHSCORE BLOG</a></p>

<h2>変更来歴</h2>

<p>(13/03/01) 新規作成<br/>
(14/01/03) Redisの自動起動のコマンドを修正<br/>
(14/12/22) 基本的な記述を修正<br/></p>
]]></content>
  </entry>
  
</feed>
