<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T20:26:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review/"/>
    <updated>2015-01-12T22:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review</id>
    <content type="html"><![CDATA[<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
が、RSpec3に対応したとの噂を聞いて1年ぶりに読み直しました。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアル
としてRspecの実践的な使い方が習得できる素晴らしい本です。</p>

<p>今回は『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
を読んでいく中で、特に印象に残った部分を中心にピックアップしていきます。ブログ駆動勉強ですw</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Everyday Railsのサンプルソース</h2>

<p><strong><a href="https://github.com/everydayrails/rspec_rails_4">everydayrails/rspec_rails_4 - GitHub</a></strong></p>

<p>この書籍ではできるだけRspecやテストに集中できるようにサンプルソースが用意されています。しかもRails4対応と至れり尽くせりです。素晴らしい！
ターミナルで以下のコマンドを実行すると、ローカルにソースコードをダウンロードできます。</p>

<p>{% codeblock lang:bash %}
git clone https://github.com/everydayrails/rspec_rails_4.git
{% endcodeblock %}</p>

<h2>自分でコードを書く</h2>

<p>勉強をするときにコピペをするのではなく、自分でコードをタイピングしていくべき。
これは最近学習によって得られる知識がかなり変わることを実感しているのですごく共感できます！</p>

<h2>テスト設計について</h2>

<p>TDDで動くコードを書く前にRSpecのexample(itで始まる行)まで書いてテスト設計する。
いつもテストが先か、コードが先かで悩んでいました。この理由の一つは動かない状態のテストの設計をどこに
書くかでしたが、この本を読んでいく中でこういうふうに先に設計すればTDDの流れの中で開発できるんだと感激ました＾＾</p>

<h2>絶対に覚えておきたいRSpecを書くときの基本</h2>

<pre>
* Specアウトラインをベースに考える
* example(itで始まる行)は原因究明しやすいように結果を1つに絞る
* 期待する結果は能動形、具体的に記述すること
* 「起きてほしいこと、起きてほしくないこと」の両方のテストを書くこと
* 境界値テストをすること
* スペックの可読性を高めることに努めること
</pre>


<h2>コントローラスペックについて</h2>

<p>feature specに比べてコントローラスペックのほうが、少ないコストでテストできる。
コントローラのテストは、自動生成されていないコードで、テストにコストをかけて効果が高そうなものを選定するといい。
その結果しっかりテストされたコントローラがあれば、アプリ全体のテスト網羅率を向上させることができる。</p>

<h2>FactoryGirlのテクニック</h2>

<p>以下のようにファクトリを書くことで、<code>home_phone</code>と<code>work_phone</code>を使わける事ができます。</p>

<p>{% codeblock lang:ruby %}
FactoryGirl.define do
  factory :phone do</p>

<pre><code>association :contact
phone '123-555-1234'

factory :home_phone do
  phone_type: 'home'
end

factory :work_phone do
  phone_type: 'work'
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>また、『<strong><a href="https://github.com/stympy/faker">stympy/faker</a></strong>』を使うと、
住所やURL、メールアドレスなどのリアルなダミーデータを生成してくれます。</p>

<p>ただ日本語のふりがななどに対応しようと思うと『<strong><a href="https://github.com/willnet/gimei">willnet/gimei</a></strong>』
がオススメです。日本語のリアルな住所を組み合わせたダミーデータも簡単に作成する事ができます。</p>

<p>FactoryGirlはテストを遅くすることがあるそうなので、必要なときに適切に使う事が重要とのことです。</p>

<h2>shared_examples</h2>

<p><code>shared_exmamples</code>とは、いくつかのテストをグループ化して、メソッドのように何度も呼び出せる機能です。
下は公式サンプルのテストですが、これを見るとひと目でわかると思います！</p>

<p>{% codeblock lang:ruby %}
require "set"</p>

<p>RSpec.shared_examples "a collection" do
  let(:collection) { described_class.new([7, 2, 4]) }</p>

<p>  context "initialized with 3 items" do</p>

<pre><code>it "says it has three items" do
  expect(collection.size).to eq(3)
end
</code></pre>

<p>  end</p>

<p>  context "with an an item that is in the collection" do</p>

<pre><code>it "returns true" do
  expect(collection.include?(7)).to be_truthy
end
</code></pre>

<p>  end
end</p>

<p>RSpec.describe Array do
  # ↓shared_examplesを関数のように呼び出している
  it_behaves_like "a collection"
end</p>

<h1>=> Array</h1>

<h1>=>   behaves like a collection</h1>

<h1>=>     initialized with 3 items</h1>

<h1>=>       says it has three items</h1>

<h1>=>     with an an item that is in the collection</h1>

<h1>=>       returns true</h1>

<p>RSpec.describe Set do
  # ↓shared_examplesを関数のように呼び出している
  it_behaves_like "a collection"
end</p>

<h1>=> Set</h1>

<h1>=>   behaves like a collection</h1>

<h1>=>     initialized with 3 items</h1>

<h1>=>       says it has three items</h1>

<h1>=>     with an an item that is in the collection</h1>

<h1>=>       returns true</h1>

<p>{% endcodeblock %}</p>

<h2>FactoryGirlでローカルのファイルを指定する方法</h2>

<p>{% codeblock lang:ruby %}</p>

<h1>ローカルのファイルを指定する方法</h1>

<p>FactoryGirl.define do
  factory :user do</p>

<pre><code>avatar { File.new("#{Rails.root}/spec/factories/avatar.png") }
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Rspecの便利マッチャー</h2>

<p>{% codeblock lang:ruby %}</p>

<h1>正規表現でのチェック</h1>

<p>expect("a string").not_to match /a regex/</p>

<h1>配列のチェック</h1>

<p>expect([1, 2, 3]).to match_array [2, 1, 3]
{% endcodeblock %}</p>

<h2>テストで特定の時間を指定する方法</h2>

<p><strong><a href="https://github.com/travisjeffery/timecop">travisjeffery/timecop - GitHub</a></strong></p>

<p>特定の曜日や日にちに依存する処理がある場合に、そのテストをすることができる。また、時間を止めることができるのでタイムスタンプが正しく動いているかのテストなどができる。</p>

<h2>メールのテスト</h2>

<p><strong><a href="https://github.com/bmabey/email-spec/">bmabey/email-spec -GitHub</a></strong></p>

<p>EmailについてテストをするためのGem。知らなかったけどこれはすごい使えそう。今度試してみます！</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(2015-01-12 22:30) 既存記事から分離して新規作成<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec初心者向けの資料まとめ[Ruby][Everyday Rails書評]]]></title>
    <link href="http://morizyun.github.io/blog/rspec-beginner-bdd-tdd-test-first/"/>
    <updated>2014-05-02T08:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rspec-beginner-bdd-tdd-test-first</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798121932&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798121932&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798121932" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近、RspecやCapybaraでRailsのテストを書くたびに、ちょっとした書き方がわからずググったり、冗長なテストを書くことに結構悩んでいました。ということで、思い切ってRspec再入門として、『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』を読みました！Rails/Rubyはどんどんバージョンアップするので、紙媒体の書籍だと情報が古くなってしまっている場合があります。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアルとしてRspecの実践的な使い方を習得できる書籍です。</p>

<p>またこの本を読むにあたってRSpecのドキュメントやWebサイトを読みなおしたので、合わせてRSpec初学者向けのマトメを作りました！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<h2>Everyday Rails - RSpecによるRailsテスト入門</h2>

<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>
もしも体系的な知識を獲得したいなら、やはりこの『<a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a>』
一択だと思います。この本の中で特に印象に残った部分を『<strong><a href="/blog/everyday-rails-beginner-rspec-book-review">Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！</a></strong>』がオススメす。
良かったら是非読んでみてください＾＾</p>

<br style="clear:both;"/>


<h2>おすすめドキュメント</h2>

<h3>TDD/BDDとは？</h3>

<p><strong><a href="http://www.atmarkit.co.jp/ait/articles/1404/30/news022.html">TDD/BDDにおける「振る舞い」の意味するところとは何なのか</a></strong><br/>
Rspecに限定された記事ではないですが、BDDの根本的な概念の「振る舞い」についてまとめられた記事。初心者向けなので、かなり説明が丁寧で分かりやすいです！</p>

<h3>Rspec/Capybara</h3>

<p><strong><a href="http://magazine.rubyist.net/?0021-Rspec">スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)</a></strong><br/>
<strong><a href="http://magazine.rubyist.net/?0023-Rspec">スはスペックのス 【第 2 回】 RSpec on Rails (コントローラとビュー編)</a></strong><br/>
RSpecの説明やテスト駆動開発の入門的記事。</p>

<p><strong><a href="http://www.oiax.jp/rails/rspec_capybara_primer.html">RSpec/Capybara入門</a></strong><br/></p>

<blockquote>
Railsを学習中の初心者がテスト駆動開発(TDD)あるいはビヘイビア駆動開発(BDD)を実践するための基礎的な知識や考え方を説明していきます。
</blockquote>


<p><strong><a href="http://qiita.com/awakia/items/d880250adc8cdbe7a32f">RSpecのshouldはもう古い！新しい記法expectを使おう！</a></strong><br/>
RSpecの今風の書き方についてのバイブル的な記事。10回以上は読んでいますw</p>

<p><strong><a href="http://magazine.rubyist.net/?0035-RSpecInPractice">改めて学ぶ RSpec</a></strong><br/>
一歩すすんで、 it や describe やテストの実行の仕方などを知った人が実践の中で使っていくために必要なノウハウを中心にまとめてくれています！</p>

<p><strong><a href="http://betterspecs.org/jp/">Better Spec</a></strong><br/>
Better Specsは開発者達の経験を、体系化したドキュメントです。中級者の人が、さらにRSpecでのテストを書けるようになりたいときにぜひ読んでほしい資料です！</p>

<h2>モック・スタブについて</h2>

<p><strong><a href="http://morizyun.github.io/blog/rspec-model-controller-ruby-rails/">RSpec でテストを作るのに役立つ「モック/スタブ」のシンプルな説明</a></strong><br/>
メソッド同士の依存関係を疎に保つのに役に立つのがモックやスタブといった機能です。少しテストを書くのに慣れてきたら是非読んでみてください。</p>

<h2>FactoryGirl</h2>

<p><strong><a href="http://o.inchiki.jp/obbr/159">RailsでFactoryGirlを使ってみるメモ</a></strong><br/>
体系的にFactoryGirlの使い方をまとめているドキュメント。初心者の人のとっかかりから、ちょっと凝った使い方まで網羅されています。素晴らしい！</p>

<p><strong><a href="http://qiita.com/yui-knk/items/bf5ec1bf382e965660b2">factory_girlの使い方 - Qiita</a></strong><br/>
テストのときのFixtureとして有名なfactory_girlの使い方をサンプルソースとセットで説明をしてくれています。FactoryGirlを使いはじめるときに読んでおくと捗るかも。</p>

<p><strong><a href="http://qiita.com/torshinor/items/383691344ec4a2233fe5">Rails - Factory Girl 3.x メモ - Qiita</a></strong><br/>
FactoryGirlの応用的な使い方を中心に説明。初心者むけというよりはFactoryGirlを使っていく中でより、使いこなしたいと思う人にオススメのドキュメント。</p>

<p><strong><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md"> factory_girl / GETTING_STARTED.md</a></strong><br/>
英語が読めるなら、FactoryGirlの本家スタートガイドがおすすめ。洗練されていて一番わかりやすい！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(2014-04-17 18:00) 新規作成<br/>
(2014-05-02 08:05) TDD/BDDとは？を追加<br/>
(2015-01-12 22:30) Everyday Railsの書評部分を分離<br/></p>
]]></content>
  </entry>
  
</feed>
