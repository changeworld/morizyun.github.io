<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:56:30+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DI(Dependency Injection)の概念入門[Java]]]></title>
    <link href="http://morizyun.github.io/blog/dependency-injection-java-basic/"/>
    <updated>2015-07-26T12:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/dependency-injection-java-basic</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00MIM1KFC/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00MIM1KFC&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00MIM1KFC&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00MIM1KFC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Javaで「DI(Dependency Injection) / 依存性の注入」という概念があります。
これは簡単にいうと、「コンポーネント間の依存関係を外部の設定ファイルから設定(注入)できるようにすること」とのことです。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>やりたいこと</h2>

<p>あるクラス内の定数や変数、インスタンスを排除して、外部ファイルなどに設定したものを
受け取れるようにすることで、動的に動作を変えられるようにする。</p>

<h2>メリット</h2>

<h3>依存性を排除することによる問題解決</h3>

<ul>
<li>中に別のクラスが入っているとテストがしづらい => テストが容易になる</li>
<li>テストに時間のかかるメソッドがある => 時間のかかるテストを排除できる</li>
</ul>


<h3>設計の容易性と変化に強くなる</h3>

<ul>
<li>ソフトウェアの階層構造を綺麗に分離した設計が容易となる</li>
<li>特定のフレームワークへの依存度が極小になり、変化に強いソフトウェアを作る事ができる</li>
</ul>


<h2>デメリット</h2>

<ul>
<li>クラスを大量に作る必要があり、初期コストがかさむ</li>
<li>プログラムの実行速度が遅くなる可能性がある</li>
</ul>


<h2>サンプルソース</h2>

<p>Wikipedia からのコピペですが、サンプルは以下の様なソースです。</p>

<h3>各コンポーネントのインターフェース</h3>

<p>{% codeblock lang:java %}
public interface IOnlineBrokerageService {</p>

<pre><code>String[] getStockSymbols();
double getBidPrice(String stockSymbol);
double getAskPrice(String stockSymbol);
void putBuyOrder(String stockSymbol, int shares, double buyPrice);
void putSellOrder(String stockSymbol, int shares, double sellPrice);
</code></pre>

<p>}</p>

<p>public interface IStockAnalysisService {</p>

<pre><code>double getEstimatedValue(String stockSymbol);
</code></pre>

<p>}</p>

<p>public interface IAutomatedStockTrader {</p>

<pre><code>void executeTrades();
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>DIを使わない場合のソース</h3>

<p>{% codeblock lang:java %}
public class VerySimpleStockTraderImpl implements IAutomatedStockTrader {</p>

<pre><code>private IStockAnalysisService analysisService = new StockAnalysisServiceImpl();
private IOnlineBrokerageService brokerageService = new NewYorkStockExchangeBrokerageServiceImpl();

public void executeTrades() {
    ….
}
</code></pre>

<p>}</p>

<p>public class MyApplication {</p>

<pre><code>public static void main(String[] args) {
    IAutomatedStockTrader stockTrader = new VerySimpleStockTraderImpl();
    stockTrader.executeTrades();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>DIを使ったリファクタリング</h3>

<p><code>MyApplication.main()</code>で依存度するクラスを設定している。これにより、<code>VerySimpleStockTraderImpl</code>
自体は特定の実装に依存をしなくなっている。</p>

<p>{% codeblock lang:java %}
public class VerySimpleStockTraderImpl implements IAutomatedStockTrader {</p>

<pre><code>private IStockAnalysisService analysisService;
private IOnlineBrokerageService brokerageService;

public VerySimpleStockTraderImpl(
        IStockAnalysisService analysisService,
        IOnlineBrokerageService brokerageService) {
    this.analysisService = analysisService;
    this.brokerageService = brokerageService;
}
public void executeTrades() {
    …
}
</code></pre>

<p>}</p>

<p>public class MyApplication {</p>

<pre><code>public static void main(String[] args) {
    IStockAnalysisService analysisService = new StockAnalysisServiceImpl();
    IOnlineBrokerageService brokerageService = new NewYorkStockExchangeBrokerageServiceImpl();

    IAutomatedStockTrader stockTrader = new VerySimpleStockTraderImpl(
        analysisService,
        brokerageService);
    stockTrader.executeTrades();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>あとがき</h2>

<p>サンプルソースがwikipediaのコピペになってしまったのは申し訳ないですが、
プログラムを書くときに参考になりそうな概念で面白かったです！</p>

<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/hshimo/items/1136087e1c6e5c5b0d9f">DI - 猿でも分かる! Dependency Injection: 依存性の注入</a></strong></li>
<li><strong><a href="https://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5">依存性の注入 - Wikipedia</a></strong></li>
<li><strong><a href="http://itpro.nikkeibp.co.jp/free/ITPro/OPINION/20050216/156274/?ST=develop&amp;P=2">Java開発を変える最新の設計思想「Dependency Injection（DI）」とは：ITpro</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 開発 完全初心者向けの入門資料]]></title>
    <link href="http://morizyun.github.io/blog/android-studio-java-beginner/"/>
    <updated>2015-03-15T13:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/android-studio-java-beginner</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774169986/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774169986&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774169986&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774169986" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Androidのアプリ開発の勉強を始めたので、読んでいる入門資料や書籍を中心にまとめてみました。
こういう完全アウェーな開発の場合はドットインストールの動画にはめちゃくちゃ助けられます、premium動画素晴らしい！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>環境構築</h2>

<h3>Java 入門</h3>

<p>Androidの前にJavaに入門したい人には、拙著『<strong><a href="/blog/java-introduction-code-style/">Java 初心者向け資料を全力でまとめてみた！</a></strong>』がオススメです！</p>

<h3>ドットインストール: Androidアプリ開発入門</h3>

<p><strong><a href="http://dotinstall.com/lessons/basic_android">Androidアプリ開発入門 (全12回) - プログラミングならドットインストール</a></strong></p>

<p>環境構築は初心者が一番つまづきやすいポイントですが、動画を見ながらなのでほぼつまらずに一気にHello Worldが出来ました！</p>

<h3>MacでAndroidアプリ開発！「Android Studio」を使ってみる</h3>

<p><strong><a href="http://saku-java.be-ourselves.jp/2014/03/11/mac-android-studio-install/">MacでAndroidアプリ開発！「Android Studio」を使ってみる 〜その1 インストール〜</a></strong><br/>
<strong><a href="http://saku-java.be-ourselves.jp/2014/03/13/mac-android-studio-start-app-and-create-emulator/">MacでAndroidアプリ開発！「Android Studio」を使ってみる 〜その3 Androidエミュレータ作成、アプリ起動〜 | サクッとJava研修室</a></strong><br/></p>

<p>エミュレータの設定などの部分を中心に文字で読みたい場合にはこちらがおすすめ。スクリーンショットが多いのでわかりやすいです！</p>

<p><strong><a href="http://androidstudio.hatenablog.com/entry/2014/07/21/143425">Android Studioでアプリを実機で動作確認する - Android Studioでアプリ開発！</a></strong><br></p>

<p>もし実機を持っているなら、実機デバックが操作感もわかっておすすめです。ということでAndroid Studioで実機デバックする手順です。以外と簡単！</p>

<h2>Android 開発入門</h2>

<p><strong><a href="http://www.techinstitute.jp/material/01/">Tech Institute Android アプリ開発者養成講座テキスト</a></strong></p>

<p>アプリ開発者のためのプログラミングスクール Tech Institute さんの教材資料。
950ページに及ぶ、充実したテキスト！</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_android_layout">【Premium】Androidレイアウト入門 (全8回) - ドットインストール</a></strong></p>

<p>月額980円かかるドットインストールのPremium動画ですが、十分その価値はあります。画面サイズがばらばらなAndroidでの
開発前に抑えておきたいポイントを勉強する事ができます。</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_android_listview">【Premium】Androidリストビュー入門 (全21回) - ドットインストール</a></strong></p>

<p>同じく、月額980円かかるドットインストールのPremium動画。Androidのリストビュー(ListView)を作る際に必要な考え方について学ぶことができます。</p>

<p><strong><a href="http://dotinstall.com/lessons/omikuji_android">【Premium】Androidでおみくじアプリを作ろう (全7回) - プログラミングならドットインストール</a></strong></p>

<p>同じく、月額980円かかるドットインストールのPremium動画。おみくじであれば、DB等も使わないので、シンプルですがアプリの作り方をイメージすることができる面白い動画でした！</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_android_db">【Premium】Androidデータベース入門 (全25回) - ドットインストール</a></strong></p>

<p>月額980円かかるドットインストールのPremium動画。Androidでデータベースを扱っていく方法について学ぶ事ができます。
これだけだとDB操作をするときの概念を理解しきれませんが、どういったフローなのかは概略をつかむことができます。</p>

<h2>mixi-inc/AndroidTraining</h2>

<p><strong><a href="https://github.com/mixi-inc/AndroidTraining">mixi-inc/AndroidTraining - GitHub</a></strong></p>

<p>MixiさんがGitHubで公開しているAndroid アプリ開発の基礎知識と実務スキルを身に付けるトレーニングコース。
めちゃくちゃ品質が高いので、下手な書籍よりもよっぽどオススメです。素晴らしい時代や。</p>

<h2>コーディング規約</h2>

<p><strong><a href="http://qiita.com/Sam/items/4b4c53c9e616a39c7c70">Androidのコード規約について考えてみた - Qiita</a></strong><br/>
<strong><a href="https://github.com/cookpad/styleguide/blob/master/java.ja.md">styleguide/java.ja.md at master · cookpad/styleguide</a></strong></p>

<p>初心者のうちからコーディング規約を読んでおくのは結構大切！と思い読んでいます。</p>

<h2>チュートリアル</h2>

<p><strong><a href="http://eure.jp/blog/android-app-for-beginners-1/">初心者必見！10時間で作るはじめてのAndroidアプリ−前編 | 株式会社エウレカ</a></strong></p>

<p>サーバーとの通信も必要でちょっと難しめのアプリですが、写経しながら実用的なAndroidアプリの作り方を知ることができる、素晴らしいチュートリアルです！</p>

<h2>お願い</h2>

<p>もしオススメの入門資料や書籍をお見かけしたら、ぜひコメントお願いします！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>変更来歴</h2>

<p>(2015-03-15 13:10) Tech Institute Android アプリ開発者養成講座テキスト を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAndroid Android/JavaでActiveRecord風にsqliteを使う]]></title>
    <link href="http://morizyun.github.io/blog/activeandroid-andcroid-java-gradle/"/>
    <updated>2014-11-24T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/activeandroid-andcroid-java-gradle</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/479813192X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=479813192X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=479813192X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=479813192X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />AndroidのsqliteをActiveRecord風に使うためのライブラリ
『<strong><a href="https://github.com/pardom/ActiveAndroid">ActiveAndroid</a></strong>』のインストールに手こずったのでそのメモです。
インストールさえ完了すれば、かなりわかりやすいライブラリなのでこれから重宝しそうです＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>前提</h2>

<p>Android 4.4 / Android Studioで開発中です。</p>

<h2>jarファイルの生成</h2>

<p>以下のコマンドを実行してjarファイルを生成。</p>

<p>{% codeblock lang:bash %}
git clone https://github.com/pardom/ActiveAndroid.git
cd ActiveAndroid
sh gradlew build
{% endcodeblock %}</p>

<p>生成したjarファイルを<code>app/libs</code>にコピー。</p>

<p>{% codeblock lang:bash %}
cp ActiveAndroid/build/libs/* /android/path/to/app/libs
{% endcodeblock %}</p>

<h2>Gradleファイルの設定</h2>

<p><code>app/build.gradle</code>の中に以下を追加。</p>

<p>{% codeblock lang:bash %}
dependencies {
  # ↓ この行を追加
  compile 'com.android.support:appcompat-v7:+'
}
{% endcodeblock %}</p>

<h2>AndroidManifest.xmlに設定</h2>

<p><code>AndroidManifest.xml</code>に次の設定を行います！</p>

<pre>
(1) applicationタグに android:name="com.activeandroid.app.Application" を追記。
(2) applicationタグの中にmeta-tagに AA_DB_NAME と AA_DB_VERSION を追記。
</pre>


<p>ということでサンプルはこんな感じです。</p>

<p>{% codeblock lang:xml %}
<manifest ...>
  <application android:name="com.activeandroid.app.Application" ...></p>

<pre><code>&lt;meta-data android:name="AA_DB_NAME" android:value="application.db" /&gt;
&lt;meta-data android:name="AA_DB_VERSION" android:value="1" /&gt;
</code></pre>

<p>  </application>
</manifest>
{% endcodeblock %}</p>

<h2>テーブル定義の設定</h2>

<p>まずはテーブル定義を設定。これはシンプル！</p>

<p>{% codeblock lang:java %}
// テーブル名の定義
@Table(name = "Items")
public class Item extends Model {
  // フィールドの定義
  @Column(name = "Name")
  public String name;</p>

<p>  @Column(name = "Category")
  public Category category;</p>

<p>  // コンストラクタの定義
  public Item(){</p>

<pre><code>super();
</code></pre>

<p>  }</p>

<p>  public Item(String name, Category category) {</p>

<pre><code>super();
this.name = name;
this.category = category;
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>さらにテーブル間のリレーションの定義とかは本家GitHubのWikiがわかりやすいのでオススメです！</p>

<p><strong><a href="https://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model">Creating your database model · pardom/ActiveAndroid Wiki</a></strong></p>

<h2>レコードの新規作成して保存(insert)</h2>

<p>新規レコードを作成して保存するinsert文。かなり直感的。</p>

<p>{% codeblock lang:java %}
// Itemテーブルのレコードを作成
Item item = new Item();
item.name = "Outback Steakhouse";</p>

<p>// 作成したレコードを保存
item.save();
{% endcodeblock %}</p>

<p>テーブル間のリレーションを設定して保存したり、Bulk insertしたり、レコードを削除したりは本家GitHubのWikiに詳しく書いてあります。</p>

<p><strong><a href="https://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model">Creating your database model · pardom/ActiveAndroid Wiki</a></strong></p>

<h2>レコードの検索</h2>

<p>テーブルに保存したレコードを検索する場合はこちら。</p>

<p>{% codeblock lang:java %}
// nameの一致するレコードを1件取得
public static Item getItemByName(String name) {
  return new Select()</p>

<pre><code>.from(Item.class)
.where("Name = ?", name)
.executeSingle();
</code></pre>

<p>}</p>

<p>// List形式で複数件のレコードを取得
public static List<Item> getAllByName(String name) {
  return new Select()</p>

<pre><code>.from(Item.class)
.where("Name = ?", name)
.orderBy("Name ASC")
.execute();
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Date型をつかえるようにする / Type serializers</h2>

<p>sqliteで扱えるのは、<code>INTEGER, REAL, TEXT, BLOB</code>だけだそうです。
ですが、Date型を保存したいことって結構あると思います。そんな時に便利なのが、<code>TypeSerializer</code>です。</p>

<p>ここでは、Date型をDBに保存するときにはLong型にして、DBから取り出したらDate型に戻してくれるクラスを作ります。</p>

<p>{% codeblock lang:java %}
import com.activeandroid.serializer.TypeSerializer;
import java.util.Date;</p>

<p>final public class UtilDateSerializer extends TypeSerializer {
  @Override
  public Class&lt;?> getDeserializedType() {</p>

<pre><code>return Date.class;
</code></pre>

<p>  }</p>

<p>  @Override
  public Class&lt;?> getSerializedType() {</p>

<pre><code>return Long.class;
</code></pre>

<p>  }</p>

<p>  @Override
  public Long serialize(Object data) {</p>

<pre><code>if (data == null) {
  return null;
}

return ((Date) data).getTime();
</code></pre>

<p>  }</p>

<p>  @Override
  public Date deserialize(Object data) {</p>

<pre><code>if (data == null) {
  return null;
}

return new Date((Long) data);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>作成が完了したら、<code>AndroidManifest.xml</code>に次の設定を追加！</p>

<p>{% codeblock lang:xml %}
<manifest ...>
  <application android:name="com.activeandroid.app.Application" ...></p>

<pre><code>// ↓ 追加する行
&lt;meta-data android:name="AA_SERIALIZERS" android:value="パッケージ名.UtilDateSerializer" /&gt;
</code></pre>

<p>  </application>
</manifest>
{% endcodeblock %}</p>

<h2>更に使いこなすために</h2>

<p><strong><a href="https://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model">Creating your database model · pardom/ActiveAndroid Wiki</a></strong></p>

<p><strong><a href="http://dev.classmethod.jp/smartphone/android/activeandroid/">ActiveAndroid を使って ActiveRecord ライクに SQLite を操作する</a></strong></p>

<p><strong><a href="http://moonstruckdrops.github.io/blog/2013/12/19/active-android/">ActiveAndroidを使ってみた - kurobaraのブログ</a></strong></p>

<h2>Android Studioで原因不明のエラーが出続ける場合</h2>

<p>Eclipseは使ったことないですが、Android StudioでBuildすると結構な確率でエラーが出て積むことがあります。
そんな、初心者な方のために今日覚えたコマンドを書いておきます。</p>

<pre>
(1) File ----> Invalidate caches/restart
(2) Build -> Clean project
</pre>


<p>かなりハマりましたorz...</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://stackoverflow.com/questions/21458956/how-to-add-activeandroid-orm-to-gradle">How to add ActiveAndroid ORM to Gradle?</a></strong></p>

<p><strong><a href="https://teamtreehouse.com/forum/android-app-has-error-execution-failed-taskapppredexdebug-trying-to-test-parse-but-cant-run-app-with-this-error">Android app has error: Execution failed task':app:preDexDebug' trying to test parse but can't run app with this error | Treehouse Forum</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Garage RailsでOauth認証付きのRest APIをお手軽開発！]]></title>
    <link href="http://morizyun.github.io/blog/garage-gem-ruby-restful-hypermedia-api/"/>
    <updated>2014-11-18T22:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/garage-gem-ruby-restful-hypermedia-api</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873116864/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873116864&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873116864&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873116864" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
CookpadさんがOSSで先日OSSで公開されたGarageはRestfulなAPI + Oauth(Doorkeeper)をワンストップで提供してくれるgemです。
ちょうど触る機会が出てきたので、今回四苦八苦しながら使ってみたのでそのメモです！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>今回のサンプル実装</h2>

<p>今回はOauthで認証して、以下のシンプルなAPIにアクセスできるようにするまでのサンプルを作成します。</p>

<pre>
GET /v1/users => ユーザーのリスト出力
GET /v1/users/:id => 個々のユーザー情報の出力
</pre>


<h2>Gemの追加</h2>

<p><code>Gemfile</code>に以下を追加して、<code>bundle install</code>。</p>

<p>{% codeblock lang:ruby %}
gem 'garage', github: 'cookpad/garage'
gem 'responders', '~> 2.0' # If you use Rails4.2+</p>

<p>group :development, :test do
  gem 'factory_girl_rails', '~> 4.5.0'
  gem 'rspec-rails', '~> 3.1.0'
end
{% endcodeblock %}</p>

<h2>DBの設定(Migration)</h2>

<p>GagrageやRspecの初期設定とか、マイグレーションとかを実行。</p>

<p>{% codeblock lang:bash %}</p>

<h1>Doorkeeper(Oauth認証)の初期設定</h1>

<p>$ bundle exec rails generate doorkeeper:install</p>

<h1>Doorkeeper(Oauth認証)のMigrationファイル生成</h1>

<p>$ bundle exec rails generate doorkeeper:migration</p>

<h1>DBの作成</h1>

<p>$ bundle exec rake db:create</p>

<h1>認証用のユーザーモデル作成</h1>

<p>$ bundle exec rails g model user name:string email:string</p>

<h1>マイグレーション処理の実行</h1>

<p>$ bundle exec rake db:migrate
{% endcodeblock %}</p>

<h2>Garageの設定</h2>

<p><code>config/initializers/garage.rb</code>を作成して、Garageの設定を記述。</p>

<p>{% codeblock lang:ruby %}
Garage.configure {}</p>

<p>Garage::TokenScope.configure do
  register :public, desc: 'accessing publicly available data' do</p>

<pre><code>access :read,   User
access :write,  User
</code></pre>

<p>  end
end</p>

<p>Doorkeeper.configure do
  orm :active_record</p>

<p>  # デフォルトのスコープ
  default_scopes :public</p>

<p>  optional_scopes(*Garage::TokenScope.optional_scopes)</p>

<p>  # アプリケーションのオーナーの認証
  resource_owner_from_credentials do |routes|</p>

<pre><code>User.find_by(email: params[:username])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>ルーティングの設定</h2>

<p><code>config/routes.rb</code>にルーティングを追記。</p>

<p>{% codeblock lang:ruby %}
Rails.application.routes.draw do
  use_doorkeeper</p>

<p>  scope :v1 do</p>

<pre><code>resources :users, only: %i(index show update)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>コントローラの作成</h2>

<p><code>app/controllers/application_controller.rb</code>に共通の設定を追記。</p>

<p>{% codeblock lang:ruby %}
class ApplicationController &lt; ActionController::Base
  # ↓ 以下追記する内容
  include Garage::ControllerHelper</p>

<p>  def current_resource_owner</p>

<pre><code>@current_resource_owner ||= User.find(resource_owner_id) if resource_owner_id
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p><code>app/controllers/users_controller.rb</code>を作成して、設定を追記。</p>

<p>{% codeblock lang:ruby %}
class UsersController &lt; ApplicationController
  include Garage::RestfulActions</p>

<p>  # index
  def require_resources</p>

<pre><code>@resources = User.all
</code></pre>

<p>  end</p>

<p>  # show
  def require_resource</p>

<pre><code>@resources = User.find(params[:id])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>モデルの設定</h2>

<p>更に<code>app/models/user.rb</code>にモデルの設定を追記。</p>

<p>{% codeblock lang:ruby %}
class User &lt; ActiveRecord::Base
  include Garage::Representer
  include Garage::Authorizable</p>

<p>  property :id
  property :name
  property :email</p>

<p>  # index
  def self.build_permissions(perms, other, target)</p>

<pre><code>perms.permits! :read
</code></pre>

<p>  end</p>

<p>  # create/update/show/destory
  def build_permissions(perms, other)</p>

<pre><code>perms.permits! :read
perms.permits! :write
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>動作確認</h2>

<p>{% codeblock lang:bash %}</p>

<h1>テストユーザーの作成</h1>

<p>$ bundle exec rails runner 'User.create(name: "morizyun", email: "morizyun@example.com")'</p>

<h1>サーバーの起動</h1>

<p>$ bundle exec rails s
{% endcodeblock %}</p>

<p><strong><a href="http://localhost:3000/oauth/applications">http://localhost:3000/oauth/applications</a></strong></p>

<p>上のURLにアクセスして、テスト用のクライアントを登録します。
登録したら、<code>APPLICTION_ID</code>と<code>APPLICATION_SECRET</code>を登録します。</p>

<p>{% codeblock lang:bash %}</p>

<h1>APPLICTION_IDとAPPLICATION_SECRETを使って、ACCESS_TOKENを取得</h1>

<p>curl -u "$APPLICTION_ID:$APPLICATION_SECRET" -XPOST http://localhost:3000/oauth/token -d 'grant_type=password&amp;username=morizyun@example.com'</p>

<h1>上で取得したACCESS_TOKENを使ってAPIでuserの一覧を取得</h1>

<p>curl -s -XGET -H "Authorization: Bearer $ACCESS_TOKEN" http://localhost:3000/v1/users | jq '.'</p>

<h1>上で取得したaccess_tokenを使ってAPIでuserの一覧を取得</h1>

<p>curl -s -XGET -H "Authorization: Bearer $ACCESS_TOKEN" http://localhost:3000/v1/users/1 | jq '.'
{% endcodeblock %}</p>

<h2>より複雑な処理のためにテストを書く</h2>

<p>ここから更に複雑な処理を記述するために、RSpecでテストを記述できるようにします。</p>

<h2>RSpecの設定</h2>

<p>RSpecの設定。</p>

<p>{% codeblock lang:bash %}</p>

<h1>RSpecの初期設定</h1>

<p>$ bundle exec rails g rspec:install
{% endcodeblock %}</p>

<h2>spec_helper.rbの設定</h2>

<p><code>spec/spec_helper.rb</code>にFactoryGirl関連の設定を追加。</p>

<p>{% codeblock lang:ruby %}
require 'factory_girl_rails'</p>

<p>RSpec.configure do |config|
  config.before :all do</p>

<pre><code>FactoryGirl.reload
FactoryGirl.factories.clear
FactoryGirl.sequences.clear
FactoryGirl.find_definitions
</code></pre>

<p>  end</p>

<p>  config.include FactoryGirl::Syntax::Methods</p>

<p>  config.expect_with :rspec do |expectations|</p>

<pre><code>expectations.include_chain_clauses_in_custom_matcher_descriptions = true
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>request_helper.rbの設定</h2>

<p>RSpec実行時にOauthの認証処理を予めやってくれて、access_tokenを取得してくれるhelperの作成。
<code>spec/request_helper.rb</code>を作成して以下を追加。</p>

<p>{% codeblock lang:bash %}
require 'active_support/concern'</p>

<p>module RequestHelper
  extend ActiveSupport::Concern</p>

<p>  included do</p>

<pre><code>let(:params) { {} }

let(:report_status_env) do
  {
      accept: 'application/json',
      authorization: report_status_authorization_header_value
  }
end

let(:report_status_authorization_header_value) { "Bearer #{report_status_access_token.token}" }

let(:report_status_access_token) do
  FactoryGirl.create(
      :access_token,
      resource_owner_id: resource_owner.id,
      scopes: public,
      application: application
  )
end

let(:resource_owner) { FactoryGirl.create(:user) }
let(:report_status_scopes) { 'public' }
let(:application) { FactoryGirl.create(:application) }
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>FactoryGirl(Fixture)の設定</h2>

<p><code>spec/factories/users.rb</code>で以下を追加。</p>

<p>{% codeblock lang:ruby %}
FactoryGirl.define do
  factory :user do</p>

<pre><code>name "MyString"
email "MyString"
sequence(:name) {|n| "user#{n}" }
email { "#{name}@example.com" }
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>Doorkeeper用の設定として、<code>spec/factories/doorkeeper.rb</code>を追加。</p>

<p>{% codeblock lang:ruby %}
FactoryGirl.define do
  factory :access_token, class: Doorkeeper::AccessToken do</p>

<pre><code>sequence(:resource_owner_id) { |n| n }
application
expires_in 1.hours
</code></pre>

<p>  end</p>

<p>  factory :application, class: Doorkeeper::Application do</p>

<pre><code>sequence(:name){ |n| "Application #{n}" }
redirect_uri 'https://example.com/callback'
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Specファイルの作成</h2>

<p><code>spec/requests/users_spec.rb</code>を以下の様に変更。</p>

<p>{% codeblock lang:ruby %}
require 'rspec_helper'
require 'request_helper'</p>

<p>RSpec.describe 'users', type: :request do
  include RequestHelper</p>

<p>  describe 'GET /v1/users' do</p>

<pre><code>let!(:users) { create_list(:user, 3) }

it 'returns user resources' do
  get '/v1/users', params, env
  expect(response).to have_http_status(200)
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>RSpecの実施</h2>

<p>{% codeblock lang:bash %}</p>

<h1>Test環境用のDBの作成</h1>

<p>$ RAILS_ENV=test bundle exec rake db:create migrate</p>

<h1>migrationの実施</h1>

<p>$ RAILS_ENV=test bundle exec rake db:migrate</p>

<h1>users_specの実施</h1>

<p>$ bundle exec rspec -fp spec/requests/users_spec.rb
{% endcodeblock %}</p>

<h2>ここから使いこなすのに参考になりそうな資料</h2>

<p>CookpadさんのTech Blog の解説記事です。かなりわかりやすいですし、APIを作る時に参考になります＾＾</p>

<p><strong><a href="http://techlife.cookpad.com/entry/2014/11/06/100000">RESTful Web API 開発をささえる Garage - クックパッド開発者ブログ</a></strong></p>

<p>Cookpadのエンジニアさんが作ってくれているサンプルのおかげでかなり捗りました！</p>

<p><strong><a href="https://github.com/taiki45/garage-example">taiki45/garage-example - GitHub</a></strong></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/217/items/389de32ac340de81d532">RESTful Hypermedia APIをRailsで実現するcookpad/garageが凄い - Qiita</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 最大公約数、最小公倍数[AOJ 0005][Ruby][Python][Java]]]></title>
    <link href="http://morizyun.github.io/blog/gcd-lcm-euclidean-algorithm-aoj-0005/"/>
    <updated>2014-09-03T20:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/gcd-lcm-euclidean-algorithm-aoj-0005</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797341378/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797341378&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797341378&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797341378" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0005">最大公約数と最小公倍数</a></strong>』に関する問題です。</p>

<p>整数における最大公約数を求めるアルゴリズムは、『<strong><a href="http://www.amazon.co.jp/gp/product/4797341378/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4797341378&amp;linkCode=as2&amp;tag=morizyun00-22">ユークリッドの互除法</a></strong>』が有名です。今回はこのアルゴリズムを使って、コードを書いていきます。</p>

<p><strong>(09/03 20:55) Java 追加しました！</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>最大公約数、最小公倍数のRubyサンプルソース</h2>

<p>{% codeblock lang:ruby %}</p>

<h1>最大公約数</h1>

<p>def gcd(a, b)
  a, b = b, a if a > b
  until a == 0</p>

<pre><code>a, b = b%a, a
</code></pre>

<p>  end
  return b
end</p>

<h1>最小公倍数</h1>

<p>def lcm(a, b)
  a*b/gcd(a, b)
end</p>

<p>while gets do
  a, b = $_.chomp.split(' ').map(&amp;:to_i)
  puts "#{gcd(a, b)} #{lcm(a, b)}"
end
{% endcodeblock %}</p>

<h2>最大公約数、最小公倍数のPythonサンプルソース</h2>

<p>{% codeblock lang:python %}</p>

<h1>coding:utf-8</h1>

<p>import sys</p>

<h1>最大公約数</h1>

<p>def gcd(a, b):
  while b > 0:</p>

<pre><code>a, b = b, a%b
</code></pre>

<p>  return a</p>

<h1>最小公倍数</h1>

<p>def lcm(a, b):
  return a*b/gcd(a, b)</p>

<p>for s in sys.stdin:
  a, b = map(int,s.split())
  gcd_num = gcd(a, b)
  lcm_num = lcm(a, b)
  print "%d %d"%(gcd_num, lcm_num)</p>

<h1>output</h1>

<h1>2 24</h1>

<h1>10000000 150000000</h1>

<p>{% endcodeblock %}</p>

<h2>最大公約数、最小公倍数のJavaのサンプルソース</h2>

<p>{% codeblock lang:java %}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.Exception;
import java.lang.String;
import java.lang.System;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] a) throws Exception {
    BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
    long num[] = new long[2];
    long gcd, lcm;
    String numStr[] = new String[2];
    String str;

    while((str = r.readLine()) != null) {
        numStr = str.split(" ");
        for(int i = 0; i &lt; numStr.length; i++) {
            num[i] = Long.parseLong(numStr[i]);
        }
        gcd = getGCD(num[0], num[1]);
        lcm = getLCM(num[0], num[1]);
        System.out.printf("%d %d\n", gcd, lcm);
    }
}

// a, bの最大公約数を求める
private static long getGCD(long a, long b) {
    if(a &gt; b) {
        long tmp;
        tmp = a;
        a = b;
        b = tmp;
    }

    while(a != 0) {
        long tmp = a;
        a = b%a;
        b = tmp;
    }

    return b;
}

// a, bの最小公倍数を求める
private static long getLCM(long a, long b) {
    return (a * b)/getGCD(a, b);
}
</code></pre>

<p>}</p>

<h1>output</h1>

<h1>2 24</h1>

<h1>10000000 150000000</h1>

<p>{% endcodeblock %}</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/Python/JavaでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>
]]></content>
  </entry>
  
</feed>
