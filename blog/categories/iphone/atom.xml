<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iphone | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:57:50+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【詳解 Objective-C iPhoneアプリ開発 入門ノート】で再入門iPhoneアプリ開発！]]></title>
    <link href="http://morizyun.github.io/blog/objective-c-iphone-app-introduction-note/"/>
    <updated>2014-04-05T22:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/objective-c-iphone-app-introduction-note</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4800710227/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4800710227&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4800710227&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4800710227" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />久々にObjective-Cを触り始めました。ほとんど忘れてるかなと思ってたんですが、結構覚えていて自分でびっくりしています。前に開発していた時にかなり苦労したので、その分脳にしっかり刻み込まれていたのかもw</p>

<p>ということでリハビリで『<strong><a href="http://www.amazon.co.jp/gp/product/4800710227/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4800710227&amp;linkCode=as2&amp;tag=morizyun00-22">詳細! Objective-C iPhoneアプリ開発 入門ノート</a></strong>』を読み始めました。この本はサンプルソースがかなり豊富なので、作りながら覚えていくのに最適な構成です。</p>

<p>今回は、特に参考になった点を中心にピックアップしていきます。</p>

<p><strong>(04/05 22:45) ピンチイン・アウトとダブルタップを認識するサンプルを追加</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>入門者におすすめなドキュメント</h2>

<p><strong><a href="http://www.slideshare.net/cocopon/xcode-12535772">キーボードで完結！ハイスピード Xcodeコーディング</a></strong><br/>
スライド形式で、わかりやすくショートカットコマンドがわかる。これは初心者に超オススメ！</p>

<p><strong><a href="http://qiita.com/yuky_az/items/f2c3db2796d0a73dfde2">Objective-Cでは、インスタンス変数をどこに宣言するのが正しいのか？</a></strong><br/>
Apple的には実装ファイル側に変数を書いてほしいそうですが、ソースの見通し的にはヘッダファイル側に変数を書いたほうが良さそうです。</p>

<h2>Objective-Cの基礎</h2>

<p>便利メソッドとか覚えておきたいメソッドとかを中心に書いてみました！</p>

<p>{% codeblock lang:bash %} <br/>
// 便利メソッド
// 1以上のランダムな数を出す
int random = arc4random();
NSLog(@"arc4random() = %d", random); //=> 173176668</p>

<p>// 小数点の切り上げ
int ceil_num = ceil(0.5);
NSLog(@"ceil() = %d", ceil_num); //=> 1</p>

<p>// doubleの絶対値
double fabs_num = fabs(-55.2940);
NSLog(@"fabs() = %f", fabs_num); //=> 55.294000</p>

<p>// 今日の日付
NSDate *today = [NSDate date];
NSLog(@"today = %@", today); //=> 2014-04-02 10:19:34 +0000</p>

<p>// 文字列
NSString *address = @"東京都文京区本郷1-2-3";
NSLog(@"%@", [address substringFromIndex:6]); //=> 本郷1-2-3
NSLog(@"%@", [address substringToIndex:4]); //=> 東京都文京区</p>

<p>// 編集可能な文字列型
NSMutableString *str = [NSMutableString string];
[str setString:(@"あいうえお")];
[str insertString:@"def" atIndex:4];
NSLog(@"%@", str); //=> あいうえdefお</p>

<p>// 整数の配列の合計を求める
NSArray <em>intlist = @[@16, @5, @25, @54];
NSInteger sum = 0;
for (NSString </em>num in intlist) {</p>

<pre><code>sum += [num intValue];
</code></pre>

<p>}
NSLog(@"sum = %d", sum); //=> 100</p>

<p>// 配列の値をソートする
NSArray <em>fruits = @[@"melon", @"Peach", @"apple", @"orange"];
NSArray </em>sortedFruits = [fruits sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)];
NSLog(@"%@", sortedFruits); //=> apple, melon, orange, Peach</p>

<p>// 数値の配列をフィルタリングする
NSMutableArray <em>number_3 = [NSMutableArray arrayWithArray:@[@3, @18, @20, @7, @9, @10]];
NSPredicate </em>predicate = [NSPredicate predicateWithFormat:@"self >= 10"];
NSLog( @"%@", [number_3 filteredArrayUsingPredicate:predicate] ); // => 18, 20, 10</p>

<p>// セットを作る => 共通した要素を残す
NSArray <em>color1 = @[@"blue", @"red", @"yellow", @"white"];
NSArray </em>color2 = @[@"green", @"white", @"black"];
NSSet <em>colorSet2 = [NSSet setWithArray:color2];
NSMutableSet </em>commonColors = [NSMutableSet setWithArray:color1];
[commonColors intersectSet:colorSet2];
NSLog(@"Common = %@", commonColors); //=> white
{% endcodeblock %}</p>

<h2>画像タップで背景色を変えるサンプル。</h2>

<p>シングルページビューで、画像をタップすると背景色が変わるようなサンプルを作成。</p>

<p>{% codeblock ViewController.h lang:bash %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface ViewController : UIViewController
{</p>

<pre><code>// catのイメージビュー
UIImageView *cat;
</code></pre>

<p>}
// タップで実行するメソッド
-(void) tapCat:(UITapGestureRecognizer *)gesture;</p>

<p>@end
{% endcodeblock %}</p>

<p>{% codeblock ViewController.m lang:bash %}</p>

<h1>import "ViewController.h"</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController  {</p>

<pre><code>BOOL _screen_color;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  // イメージを作る
  UIImage *imageData = [UIImage imageNamed:@"cat.jpg"];</p>

<p>  // イメージビューを作る
  CGFloat width = imageData.size.width/10;
  CGFloat height = imageData.size.height/10;
  CGRect rect = CGRectMake(0, 0, width, height);
  cat = [[UIImageView alloc] initWithFrame:rect];</p>

<p>  // イメージビューにイメージを設定
  cat.image = imageData;
  cat.contentMode = UIViewContentModeScaleAspectFit;
  cat.center = CGPointMake(160, 100);</p>

<p>  // イメージビューがインタラクティブ操作を受け付けるようにする
  cat.userInteractionEnabled = YES;</p>

<p>  // タップジェスチャーを作る
  UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapCat:)];</p>

<p>  // イメージビューにタップジェスチャーを設定
  [cat addGestureRecognizer:tapGesture];</p>

<p>  // イメージビューを表示する
  [self.view addSubview:cat];</p>

<p>  _screen_color = YES;
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
<li><p>(void) tapCat:(UITapGestureRecognizer *)gesture
{
  NSLog(@"心をタップされました。");</p>

<p>  if(_screen_color) {</p>

<pre><code>  self.view.backgroundColor = [UIColor blueColor];
</code></pre>

  } else {

<pre><code>  self.view.backgroundColor = [UIColor whiteColor];
</code></pre>

<p>  }</p>

<p>  // 色をトグルで変更
  _screen_color ^= YES;
}</p></li>
</ul>


<p>@end
{% endcodeblock %}</p>

<h2>ピンチイン・アウトとダブルタップを認識するアプリ</h2>

<p>中央に画像を置いて、画像のピンチイン・アウトが出来たり、ダブルタップでの拡大をするためのソース。</p>

<p>{% codeblock ViewController.h lang:bash %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface ViewController : UIViewController <UIScrollViewDelegate></p>

<p>// スクロールビュー
@property (weak, nonatomic) IBOutlet UIScrollView *myScrollView;</p>

<p>// スクロールビューにおいたイメージビュー
@property (weak, nonatomic) IBOutlet UIImageView *myImageView;</p>

<p>@end
{% endcodeblock %}</p>

<p>{% codeblock ViewController.m lang:bash %}</p>

<h1>import "ViewController.h"</h1>

<p>@interface ViewController ()
// 拡大する領域を求めるメソッド
- (CGRect)zoomRectForScale:(float)scale withCenter:(CGPoint)center;
@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  // スクロールビューのデリゲート先になる
  _myScrollView.delegate = self;</p>

<p>  // ズームの最小/最大を設定する
  <em>myScrollView.minimumZoomScale = 1;
  </em>myScrollView.maximumZoomScale = 8;</p>

<p>  // スクローラを表示する
  <em>myScrollView.scrollEnabled = YES;
  </em>myScrollView.showsHorizontalScrollIndicator = YES;
  _myScrollView.showsVerticalScrollIndicator = YES;</p>

<p>  // ダブルタップジェスチャーを作る
  UITapGestureRecognizer *doubleTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleTap:)];</p>

<p>  // ダブルタップを認識する設定にする
  doubleTapGesture.numberOfTapsRequired = 2;</p>

<p>  // イメージビューにダブルタップジェスチャーを設定する
  <em>myImageView.userInteractionEnabled = YES;
  [</em>myImageView addGestureRecognizer:doubleTapGesture];
}</p></li>
</ul>


<p>// 拡大写真をピンチイン/ピンチアウトできるようにする
- (UIView<em>)viewForZoomingInScrollView:(UIScrollView </em>)scrollView
{</p>

<pre><code>return _myImageView;
</code></pre>

<p>}</p>

<p>// 写真がダブルタップされたならば拡大/縮小する
- (void)doubleTap:(UIGestureRecognizer *)gesture {</p>

<pre><code>// 最大倍率でなければ拡大する
if(_myScrollView.zoomScale &lt; _myScrollView.maximumZoomScale)
{
    // 現在の3倍の倍率にする
    float newScale = _myScrollView.zoomScale * 3;

    //拡大する領域を求める
    CGRect zoomRect = [self zoomRectForScale:newScale withCenter:[gesture locationInView:gesture.view]];

    // タップした位置を拡大する
    [_myScrollView zoomToRect:zoomRect animated:YES];
} else {
    // 倍率1に戻す
    [_myScrollView setZoomScale:1.0 animated:YES];
}
</code></pre>

<p>}</p>

<p>// 指定の座標を中心にして拡大する領域を求める
- (CGRect)zoomRectForScale:(float)scale withCenter:(CGPoint)center {</p>

<pre><code>CGRect zoomRect;

// 倍率から拡大する縦横サイズを求める
zoomRect.size.height = [_myScrollView frame].size.height / scale;
zoomRect.size.width  = [_myScrollView frame].size.width / scale;

// 座標(左上)を設定する
zoomRect.origin.x = center.x - (zoomRect.size.width/2.0);
zoomRect.origin.y = center.y - (zoomRect.size.height/2.0);

// 領域を返す
return zoomRect;
</code></pre>

<p>}</p>

<ul>
<li>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</li>
</ul>


<p>@end
{% endcodeblock %}</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>変更来歴</h2>

<p>(04/04 22:45) タップするサンプルを追加<br/>
(04/05 22:45) ピンチイン・アウトとダブルタップを認識するサンプルを追加<br/></p>
]]></content>
  </entry>
  
</feed>
