<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:53:37+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 最大公約数、最小公倍数[AOJ 0005][Ruby][Python][Java]]]></title>
    <link href="http://morizyun.github.io/blog/gcd-lcm-euclidean-algorithm-aoj-0005/"/>
    <updated>2014-09-03T20:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/gcd-lcm-euclidean-algorithm-aoj-0005</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797341378/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797341378&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797341378&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797341378" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0005">最大公約数と最小公倍数</a></strong>』に関する問題です。</p>

<p>整数における最大公約数を求めるアルゴリズムは、『<strong><a href="http://www.amazon.co.jp/gp/product/4797341378/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4797341378&amp;linkCode=as2&amp;tag=morizyun00-22">ユークリッドの互除法</a></strong>』が有名です。今回はこのアルゴリズムを使って、コードを書いていきます。</p>

<p><strong>(09/03 20:55) Java 追加しました！</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>最大公約数、最小公倍数のRubyサンプルソース</h2>

<p>{% codeblock lang:ruby %}</p>

<h1>最大公約数</h1>

<p>def gcd(a, b)
  a, b = b, a if a > b
  until a == 0</p>

<pre><code>a, b = b%a, a
</code></pre>

<p>  end
  return b
end</p>

<h1>最小公倍数</h1>

<p>def lcm(a, b)
  a*b/gcd(a, b)
end</p>

<p>while gets do
  a, b = $_.chomp.split(' ').map(&amp;:to_i)
  puts "#{gcd(a, b)} #{lcm(a, b)}"
end
{% endcodeblock %}</p>

<h2>最大公約数、最小公倍数のPythonサンプルソース</h2>

<p>{% codeblock lang:python %}</p>

<h1>coding:utf-8</h1>

<p>import sys</p>

<h1>最大公約数</h1>

<p>def gcd(a, b):
  while b > 0:</p>

<pre><code>a, b = b, a%b
</code></pre>

<p>  return a</p>

<h1>最小公倍数</h1>

<p>def lcm(a, b):
  return a*b/gcd(a, b)</p>

<p>for s in sys.stdin:
  a, b = map(int,s.split())
  gcd_num = gcd(a, b)
  lcm_num = lcm(a, b)
  print "%d %d"%(gcd_num, lcm_num)</p>

<h1>output</h1>

<h1>2 24</h1>

<h1>10000000 150000000</h1>

<p>{% endcodeblock %}</p>

<h2>最大公約数、最小公倍数のJavaのサンプルソース</h2>

<p>{% codeblock lang:java %}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.lang.Exception;
import java.lang.String;
import java.lang.System;</p>

<p>public class Main {</p>

<pre><code>public static void main(String[] a) throws Exception {
    BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
    long num[] = new long[2];
    long gcd, lcm;
    String numStr[] = new String[2];
    String str;

    while((str = r.readLine()) != null) {
        numStr = str.split(" ");
        for(int i = 0; i &lt; numStr.length; i++) {
            num[i] = Long.parseLong(numStr[i]);
        }
        gcd = getGCD(num[0], num[1]);
        lcm = getLCM(num[0], num[1]);
        System.out.printf("%d %d\n", gcd, lcm);
    }
}

// a, bの最大公約数を求める
private static long getGCD(long a, long b) {
    if(a &gt; b) {
        long tmp;
        tmp = a;
        a = b;
        b = tmp;
    }

    while(a != 0) {
        long tmp = a;
        a = b%a;
        b = tmp;
    }

    return b;
}

// a, bの最小公倍数を求める
private static long getLCM(long a, long b) {
    return (a * b)/getGCD(a, b);
}
</code></pre>

<p>}</p>

<h1>output</h1>

<h1>2 24</h1>

<h1>10000000 150000000</h1>

<p>{% endcodeblock %}</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/Python/JavaでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python開発環境構築 徹底解説[pyenv, Mavericks]]]></title>
    <link href="http://morizyun.github.io/blog/python-pyenv-rehash-mac-development/"/>
    <updated>2014-07-07T20:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/python-pyenv-rehash-mac-development</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873116554/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873116554&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873116554&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873116554" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Pythonの統計や機械学習系ライブラリを触ってみたくって、Pythonの環境をMarvericksに構築したのでそのメモです。Pythonはほぼ初心者なので、いろいろ触ってどんどん覚えていきたい！</p>

<p><strong>(03/27 23:10) Marvericks対応にアップデート</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>pyenvのインストール</h2>

<p>{% codeblock lang:bash %}
brew install pyenv-virtualenv pyenv
{% endcodeblock %}</p>

<h2>pyenvの設定</h2>

<p><code>vim ~/.zshrc</code>で以下の内容を追記。</p>

<p>{% codeblock lang:bash %}</p>

<h1>pyenv</h1>

<p>export PYENV_ROOT="${HOME}/.pyenv"
if [ -d "${PYENV_ROOT}" ]; then</p>

<pre><code>export PATH=${PYENV_ROOT}/bin:$PATH
eval "$(pyenv init -)"
</code></pre>

<p>fi
{% endcodeblock %}</p>

<p>完了したら、<code>source ~/.zshrc</code>を実行。</p>

<h2>pyenv rehashを自動化してくれるpyenv-pip-rehashの導入</h2>

<p>{% codeblock lang:bash %}
git clone https://github.com/yyuu/pyenv-pip-rehash.git ~/.pyenv/plugins/pyenv-pip-rehash
{% endcodeblock %}</p>

<h2>pyenvにPythonの特定バージョンをインストール</h2>

<p>必要なバージョンをインストール。</p>

<p>{% codeblock lang:bash %}</p>

<h1>インストール可能なバージョン一覧</h1>

<p>pyenv install -l</p>

<h1>Python 2.7.6のインストール</h1>

<p>pyenv install 2.7.6</p>

<h1>Python 3.4.0のインストール</h1>

<p>pyenv install 3.4.0</p>

<h1>インストールされたバージョンの確認</h1>

<p>pyenv versions</p>

<h1>全体バージョンの切り替え</h1>

<p>pyenv global 2.7.6</p>

<h1>pipのインストール</h1>

<p>sudo easy_install pip
{% endcodeblock %}</p>

<p>使いながら、徐々に追記していきます。Python初心者なのでツッコミ大歓迎です！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/tstomoki/items/b23291fec7a412157f23">Mac OS Marvericks にHomebrewを使ってpyenv,pythonの環境設定を行うメモ</a></strong></p>

<h2>変更来歴</h2>

<p>(03/27 23:10) Marvericks対応にアップデート<br/>
(07/07 20:20) pipのインストール手順を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 動的計画法[AOJ 0557][Ruby][Python]]]></title>
    <link href="http://morizyun.github.io/blog/a-first-grader-dinamic-programming-algorithm-aoj-0557/"/>
    <updated>2014-06-22T22:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/a-first-grader-dinamic-programming-algorithm-aoj-0557</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4844335928/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4844335928&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4844335928&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4844335928" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0557">AOJ 0557 - 動的計画法</a></strong>』についての記事です。</p>

<p>動的計画法(Dynamic Programming, DP)は、ベーシックなアルゴリズムの一つです。動的計画法は次の条件を満たす必要があります。</p>

<pre>
分割統治法：部分問題を解き、その結果を利用して、問題全体を解く
メモ化：部分問題の計算結果を再利用する 
</pre>




<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Ruby サンプルソース</h2>

<p>{% codeblock lang:ruby %}
n = gets.to_i
arr = gets.split(' ').map(&amp;:to_i)
answer = arr[n-1]</p>

<p>dp = n.times.map { [0]*21 }
dp[0][arr[0]] = 1
1.upto(n-2) do |i|
  0.upto(20) do |j|</p>

<pre><code>next if dp[i-1][j] &lt;= 0
cp = j + arr[i]
cm = j - arr[i]

dp[i][cp] += dp[i-1][j] if cp &lt;= 20
dp[i][cm] += dp[i-1][j] if cm &gt;= 0
</code></pre>

<p>  end
end</p>

<p>puts dp[n-2][answer]
{% endcodeblock %}</p>

<h2>Python サンプルソース</h2>

<p>{% codeblock lang:python %}
n = input()
arr = map(int, raw_input().split())
answer = arr[n-1]</p>

<p>dp = [[0]*21 for i in range(n)]
dp[0][arr[0]] = 1</p>

<p>for i in range(1, n-1):
  for j in range(21):</p>

<pre><code>if dp[i-1][j] == 0: continue
vp = j + arr[i]
vm = j - arr[i]

if vp &lt;= 20:
  dp[i][vp] += dp[i-1][j]
if vm &gt;= 0:
  dp[i][vm] += dp[i-1][j]
</code></pre>

<p>print dp[n-2][answer]
{% endcodeblock %}</p>

<p>シンプルですがかなり強力なアルゴリズムなので知っておいて損はないと思います。是非トライしてみてください！</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 二股に分かれている容器にボールを入れる[AOJ 0033][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/ball-algorithm-aoj-0033/"/>
    <updated>2014-05-18T19:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ball-algorithm-aoj-0033</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4839941068/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839941068&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4839941068&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4839941068" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0033">二股に分かれている容器にボールを入れる</a></strong>』問題です。</p>

<p>二股にわかれた容器に番号のついたボールを番号の大小関係の制約を守って並べていく問題です。</p>

<p>これはどれだけ問題をシンプルに考えられるかという点の思考が必要になるので、難しい戦略を考えるのとは別の思考が必要で、これはこれで面白かったです！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
num = gets.to_i
num.times do
  left, right = [], []
  arr = gets.chomp.split(' ').map(&amp;:to_i)
  arr.each do |a|</p>

<pre><code>if (left.last || 0) &lt; a
  left &lt;&lt; a
elsif (right.last || 0) &lt; a
  right &lt;&lt; a
else
  break
end
</code></pre>

<p>  end
  puts (arr.size == (left.size + right.size)) ? 'YES' : 'NO'
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
n = int(raw_input())
for i in range(n):
  left, right = [], []
  arr = map(int, raw_input().split(' '))
  for a in arr:</p>

<pre><code>if len(left) == 0 or left[len(left)-1] &lt; a:
  left.append(a)
elif len(right) == 0 or right[len(right)-1] &lt; a:
  right.append(a)
else:
  break
</code></pre>

<p>  if len(arr) == len(left) + len(right):</p>

<pre><code>print 'YES'
</code></pre>

<p>  else:</p>

<pre><code>print 'NO'
</code></pre>

<p>{% endcodeblock %}</p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<h1>include &lt;stdio.h></h1>

<p>using namespace std;</p>

<p>int a[10];</p>

<p>bool dfs(int i, int left, int right) {
  if(i == 10) { return true; }</p>

<p>  bool ans = false;
  if(left &lt; a[i]) {</p>

<pre><code>ans = dfs(i+1, a[i], right);
</code></pre>

<p>  }
  if(right &lt; a[i]) {</p>

<pre><code>ans = dfs(i+1, left, a[i]);
</code></pre>

<p>  }
  return ans;
}</p>

<p>int main() {
  int n;
  scanf("%d", &amp;n);</p>

<p>  for(int i = 0; i &lt; n; i++) {</p>

<pre><code>for(int j = 0; j &lt; 10; j++) {
  scanf("%d", &amp;a[j]);
}
cout &lt;&lt; (dfs(0, 0, 0) ? "YES" : "NO") &lt;&lt; endl;
</code></pre>

<p>  }
  return 0;
}
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 島の数を数える[AOJ 0067][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/the-number-of-island-algorithm-aoj-0067/"/>
    <updated>2014-05-13T08:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/the-number-of-island-algorithm-aoj-0067</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797329734/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797329734&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797329734&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797329734" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近アルゴリズム勉強・Python/C++の勉強のためにAizu Online Judge(AOJ)を継続しています。今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0067">島の数を数える</a></strong>』問題です。</p>

<p>0と1で表されたmap上の島の数を数える問題です。</p>

<p>今回は戦略を思いつかずに、かなり試行錯誤をしました。ただ、こういう問題を通して柔軟な発想と、効率的なアルゴリズムの仕組みを学んでいきたいと思います！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
def remove_island(i, j, map)
  map[i][j] = '0'
  [[0, 1], [1, 0], [0, -1], [-1, 0]].each do |x, y|</p>

<pre><code>next if !(0..11).include?(i + x) || !(0..11).include?(j + y)
if map[i + x][j + y]=='1'
  remove_island(i + x, j + y, map)
end
</code></pre>

<p>  end
end</p>

<p>loop do
  map = 12.times.map{ gets.chomp }
  count = 0
  12.times do |i|</p>

<pre><code>12.times do |j|
  if map[i][j] == '1'
    count += 1
    remove_island(i, j, map)
  end
end
</code></pre>

<p>  end
  puts count
  break if gets.nil?
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
def get_map():
  map = []
  while True:</p>

<pre><code>try:
  tmp = list(raw_input())
  if len(tmp) != 12: break
  map.append(tmp)
except:
  break
</code></pre>

<p>  return map</p>

<p>def remove_island(x, y, map):
  map[x][y] = 0
  move = [[1, 0], [0, 1], [-1, 0], [0, -1]]
  for i, j in move:</p>

<pre><code>if 0 &lt;= x + i &lt;= 11 and 0 &lt;= y + j &lt;= 11 and map[x + i][y + j] == '1':
  map = remove_island(x + i, y + j, map)
</code></pre>

<p>  return map[:]</p>

<p>while True:
  map = get_map()
  if len(map) != 12: break</p>

<p>  count = 0
  for x in range(12):</p>

<pre><code>for y in range(12):
  if map[x][y] == '1':
    count += 1
    map = remove_island(x, y, map)
</code></pre>

<p>  print count
{% endcodeblock %}</p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int m[12][12];</p>

<p>bool valid(int y, int x) {
  if(0 &lt;= y &amp;&amp; y &lt; 12) {</p>

<pre><code>if(0 &lt;= x &amp;&amp; x &lt; 12) {
  if(m[y][x] == 1) return true;
}
</code></pre>

<p>  }
  return false;
}</p>

<p>void remove_island(int y, int x) {
  int nx, ny;
  int dx[4] = {1, 0, -1,  0};
  int dy[4] = {0, 1,  0, -1};</p>

<p>  m[y][x] = 0;
  for(int i = 0; i &lt; 4; i++){</p>

<pre><code>ny = y + dy[i];
nx = x + dx[i];
if(valid(ny, nx)) remove_island(ny, nx);
</code></pre>

<p>  }
}</p>

<p>int main() {
  char c[12];
  int ans;
  while(1){</p>

<pre><code>for(int i = 0; i &lt; 12; i++) {
  if(!(cin &gt;&gt; c)) return 0;
  for(int j = 0; j &lt; 12; j++) {
    m[i][j] = (int)(c[j] - '0');
  }
}

ans = 0;
for(int i = 0; i &lt; 12; i++) {
  for(int j = 0; j &lt; 12; j++) {
    if(valid(i, j)) {
      remove_island(i, j);
      ans++;
    }
  }
}
cout &lt;&lt; ans &lt;&lt; endl;
</code></pre>

<p>  }
  return 0;
}
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
</feed>
