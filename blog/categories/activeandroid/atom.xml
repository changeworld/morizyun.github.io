<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActiveAndroid | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/activeandroid/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:53:37+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveAndroid Android/JavaでActiveRecord風にsqliteを使う]]></title>
    <link href="http://morizyun.github.io/blog/activeandroid-andcroid-java-gradle/"/>
    <updated>2014-11-24T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/activeandroid-andcroid-java-gradle</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/479813192X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=479813192X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=479813192X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=479813192X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />AndroidのsqliteをActiveRecord風に使うためのライブラリ
『<strong><a href="https://github.com/pardom/ActiveAndroid">ActiveAndroid</a></strong>』のインストールに手こずったのでそのメモです。
インストールさえ完了すれば、かなりわかりやすいライブラリなのでこれから重宝しそうです＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>前提</h2>

<p>Android 4.4 / Android Studioで開発中です。</p>

<h2>jarファイルの生成</h2>

<p>以下のコマンドを実行してjarファイルを生成。</p>

<p>{% codeblock lang:bash %}
git clone https://github.com/pardom/ActiveAndroid.git
cd ActiveAndroid
sh gradlew build
{% endcodeblock %}</p>

<p>生成したjarファイルを<code>app/libs</code>にコピー。</p>

<p>{% codeblock lang:bash %}
cp ActiveAndroid/build/libs/* /android/path/to/app/libs
{% endcodeblock %}</p>

<h2>Gradleファイルの設定</h2>

<p><code>app/build.gradle</code>の中に以下を追加。</p>

<p>{% codeblock lang:bash %}
dependencies {
  # ↓ この行を追加
  compile 'com.android.support:appcompat-v7:+'
}
{% endcodeblock %}</p>

<h2>AndroidManifest.xmlに設定</h2>

<p><code>AndroidManifest.xml</code>に次の設定を行います！</p>

<pre>
(1) applicationタグに android:name="com.activeandroid.app.Application" を追記。
(2) applicationタグの中にmeta-tagに AA_DB_NAME と AA_DB_VERSION を追記。
</pre>


<p>ということでサンプルはこんな感じです。</p>

<p>{% codeblock lang:xml %}
<manifest ...>
  <application android:name="com.activeandroid.app.Application" ...></p>

<pre><code>&lt;meta-data android:name="AA_DB_NAME" android:value="application.db" /&gt;
&lt;meta-data android:name="AA_DB_VERSION" android:value="1" /&gt;
</code></pre>

<p>  </application>
</manifest>
{% endcodeblock %}</p>

<h2>テーブル定義の設定</h2>

<p>まずはテーブル定義を設定。これはシンプル！</p>

<p>{% codeblock lang:java %}
// テーブル名の定義
@Table(name = "Items")
public class Item extends Model {
  // フィールドの定義
  @Column(name = "Name")
  public String name;</p>

<p>  @Column(name = "Category")
  public Category category;</p>

<p>  // コンストラクタの定義
  public Item(){</p>

<pre><code>super();
</code></pre>

<p>  }</p>

<p>  public Item(String name, Category category) {</p>

<pre><code>super();
this.name = name;
this.category = category;
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>さらにテーブル間のリレーションの定義とかは本家GitHubのWikiがわかりやすいのでオススメです！</p>

<p><strong><a href="https://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model">Creating your database model · pardom/ActiveAndroid Wiki</a></strong></p>

<h2>レコードの新規作成して保存(insert)</h2>

<p>新規レコードを作成して保存するinsert文。かなり直感的。</p>

<p>{% codeblock lang:java %}
// Itemテーブルのレコードを作成
Item item = new Item();
item.name = "Outback Steakhouse";</p>

<p>// 作成したレコードを保存
item.save();
{% endcodeblock %}</p>

<p>テーブル間のリレーションを設定して保存したり、Bulk insertしたり、レコードを削除したりは本家GitHubのWikiに詳しく書いてあります。</p>

<p><strong><a href="https://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model">Creating your database model · pardom/ActiveAndroid Wiki</a></strong></p>

<h2>レコードの検索</h2>

<p>テーブルに保存したレコードを検索する場合はこちら。</p>

<p>{% codeblock lang:java %}
// nameの一致するレコードを1件取得
public static Item getItemByName(String name) {
  return new Select()</p>

<pre><code>.from(Item.class)
.where("Name = ?", name)
.executeSingle();
</code></pre>

<p>}</p>

<p>// List形式で複数件のレコードを取得
public static List<Item> getAllByName(String name) {
  return new Select()</p>

<pre><code>.from(Item.class)
.where("Name = ?", name)
.orderBy("Name ASC")
.execute();
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Date型をつかえるようにする / Type serializers</h2>

<p>sqliteで扱えるのは、<code>INTEGER, REAL, TEXT, BLOB</code>だけだそうです。
ですが、Date型を保存したいことって結構あると思います。そんな時に便利なのが、<code>TypeSerializer</code>です。</p>

<p>ここでは、Date型をDBに保存するときにはLong型にして、DBから取り出したらDate型に戻してくれるクラスを作ります。</p>

<p>{% codeblock lang:java %}
import com.activeandroid.serializer.TypeSerializer;
import java.util.Date;</p>

<p>final public class UtilDateSerializer extends TypeSerializer {
  @Override
  public Class&lt;?> getDeserializedType() {</p>

<pre><code>return Date.class;
</code></pre>

<p>  }</p>

<p>  @Override
  public Class&lt;?> getSerializedType() {</p>

<pre><code>return Long.class;
</code></pre>

<p>  }</p>

<p>  @Override
  public Long serialize(Object data) {</p>

<pre><code>if (data == null) {
  return null;
}

return ((Date) data).getTime();
</code></pre>

<p>  }</p>

<p>  @Override
  public Date deserialize(Object data) {</p>

<pre><code>if (data == null) {
  return null;
}

return new Date((Long) data);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>作成が完了したら、<code>AndroidManifest.xml</code>に次の設定を追加！</p>

<p>{% codeblock lang:xml %}
<manifest ...>
  <application android:name="com.activeandroid.app.Application" ...></p>

<pre><code>// ↓ 追加する行
&lt;meta-data android:name="AA_SERIALIZERS" android:value="パッケージ名.UtilDateSerializer" /&gt;
</code></pre>

<p>  </application>
</manifest>
{% endcodeblock %}</p>

<h2>更に使いこなすために</h2>

<p><strong><a href="https://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model">Creating your database model · pardom/ActiveAndroid Wiki</a></strong></p>

<p><strong><a href="http://dev.classmethod.jp/smartphone/android/activeandroid/">ActiveAndroid を使って ActiveRecord ライクに SQLite を操作する</a></strong></p>

<p><strong><a href="http://moonstruckdrops.github.io/blog/2013/12/19/active-android/">ActiveAndroidを使ってみた - kurobaraのブログ</a></strong></p>

<h2>Android Studioで原因不明のエラーが出続ける場合</h2>

<p>Eclipseは使ったことないですが、Android StudioでBuildすると結構な確率でエラーが出て積むことがあります。
そんな、初心者な方のために今日覚えたコマンドを書いておきます。</p>

<pre>
(1) File ----> Invalidate caches/restart
(2) Build -> Clean project
</pre>


<p>かなりハマりましたorz...</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://stackoverflow.com/questions/21458956/how-to-add-activeandroid-orm-to-gradle">How to add ActiveAndroid ORM to Gradle?</a></strong></p>

<p><strong><a href="https://teamtreehouse.com/forum/android-app-has-error-execution-failed-taskapppredexdebug-trying-to-test-parse-but-cant-run-app-with-this-error">Android app has error: Execution failed task':app:preDexDebug' trying to test parse but can't run app with this error | Treehouse Forum</a></strong></p>
]]></content>
  </entry>
  
</feed>
