<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyGem | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rubygem/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:03:25+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Upsert」 大量のデータを一括でInsert/UpdateするGem！]]></title>
    <link href="http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql/"/>
    <updated>2015-06-14T18:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00YG8PXLI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00YG8PXLI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00YG8PXLI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00YG8PXLI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails/Rubyで大量のデータを一括で新規登録・更新スクリプト
を書く場合は、ActiveRecordは生成コストが高くて、必ずしも向いていません。そんな状況での利用にオススメなのが、この
『<strong><a href="https://github.com/seamusabshere/upsert">upsert</a></strong>』というGemです。</p>

<p>このGemがサポートしているデータベースは、<code>MySQL、PostgreSQL、SQLite3</code>です。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Upsertが適した利用シーン</h2>

<p>実装としては、OracleやMySQLのPL/SQL、PostgreSQLのPL/pgSQLのスクリプトを一時的に定義して、
その中で対象テーブルに一致するキーのレコードがあればupdate、なければinsert処理を行ってくれます。
DB内部でレコードの有無を判定して、insert/update処理までおこなってくれるので、当然速度は早くなります。</p>

<p>また、Commitを複数件単位でまとめてくれる機能も持っているので、ActiveRecordで同じ機能を
実装する場合に比べると、更に速度が早くなります。</p>

<p>一方でデメリットとして、ActiveRecord側に設定しているvalidationや便利機能が使えなくなるので、
そのデメリットを考慮しても速度を優先させたいような処理で限定して使うことをおすすめします！</p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle install</code>を実行してください。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>Bulk Insert/Update</h1>

<p>gem 'upsert'
{% endcodeblock %}</p>

<h2>ActiveRecordでUpsertを使う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
にUpsertする場合は次のように記述します。</p>

<p>{% codeblock lang:ruby %}
require 'upsert/active_record_upsert'</p>

<p>Pet.upsert({name: 'Jerry'}, {breed: 'beagle', updated_at: Time.now.iso8601, created_at: Time.now.iso8601})
{% endcodeblock %}</p>

<h2>ActiveRecordで一括でUpsertを行う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
に2件のデータを一括で、Upsertする場合は次のように記述します。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>Bulk でinsert / updateを実行 (mass upsert)</h1>

<p>self.connection_pool.with_connection do |c|
  Upsert.batch(c, table_name) do |upsert|</p>

<pre><code>upsert.row({name: 'Jerry'}, {breed: 'beagle', updated_at: Time.now.iso8601, created_at: Time.now.iso8601})
upsert.row({name: 'Pierre'}, {breed: 'tabby', updated_at: Time.now.iso8601, created_at: Time.now.iso8601})
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>あとがき</h2>

<p>Ruby/ActiveRecordで大量のデータを登録するようなスクリプトを書くことは
必ずしも適していない。。。かもしれませんが、Rubyで複雑なデータを加工して
登録したいようなケースもあると思います。
ぜひ、そういった時の速度改善に使ってみてください！</p>

<h2>おまけ</h2>

<p>2009年の記事ですが、結構面白いのでオススメです！</p>

<p><strong><a href="https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/">Mass inserting data in Rails without killing your performance</a></strong></p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[switch_point ActiveRecordにメソッドを追加・変更する部分を勉強してみた]]></title>
    <link href="http://morizyun.github.io/blog/switch-point-swithcing-database-connection-readonly-writable-rails-gem/"/>
    <updated>2015-01-02T17:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/switch-point-swithcing-database-connection-readonly-writable-rails-gem</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1RU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1RU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1RU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
昨日DB関連の資料を調べていく中で興味があった『<strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point</a></strong>』がどんなふうに実装されているのかが、興味あって、ソースコードを読んでみました。特に興味があったのは、<code>ActiveRecord::Base</code>などにメソッドを追加したり、既存のメソッドに手を加える部分です。まだわかっていない部分も多いのでメモ書きレベルですが、一応せっかくなのでアウトプットしておきます！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>既存のActiveRecod::Baseにメソッドを生やす</h2>

<p>『<strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point - GitHub</a></strong>』の<code>switch_point/lib/switch_point.rb</code>で既存のActiveRecod::Baseにメソッドを生やす目的で次のようなコードが書かれていました。</p>

<p>{% codeblock lang:ruby %}
require 'active_support/lazy_load_hooks'</p>

<h1>...(省略)...</h1>

<h1>ActiveRecordが読み込まれたら以下のコードを実行する</h1>

<h1>第一引数(active_record)がフックのキー</h1>

<h1>第二引数のブロックが、ブロックを実行するためのコンテキスト</h1>

<p>ActiveSupport.on_load(:active_record) do
  require 'switch_point/model'
  require 'switch_point/connection'</p>

<p>  # SwitchPoint::ModelのメソッドをActiveRecord::Baseにinclude
  ActiveRecord::Base.send(:include, SwitchPoint::Model)</p>

<p>  # class_evalで動的にクラス・メソッドを定義
  ActiveRecord::ConnectionAdapters::AbstractAdapter.class_eval do</p>

<pre><code>include SwitchPoint::Connection

# insert, update, deleteメソッドのメソッドを上書き
# 中ではwritableなDBにつなぎに行っているかのチェックとクエリー・キャッシュをクリアしてからメソッドを実行
SwitchPoint::Connection::DESTRUCTIVE_METHODS.each do |method_name|
  alias_method_chain method_name, :switch_point
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>遅延読み込みフック lazy_load_hooks#on_load について</h2>

<p><code>on_load</code>は、ActiveSupportのLazyLoadの機能の一つで、ライブラリの読み込み後に実行したいコードを登録するための機能だそうです。サンプルとしてはこんなかんじです。</p>

<p>{% codeblock lang:ruby %}
require 'active_support/lazy_load_hooks'</p>

<h1>run_load_hooksが実行されていないので呼ばれない</h1>

<p>ActiveSupport.on_load :fuga do
  puts 'start 1st on load'
  fuga
  puts 'end 1st on load'
end</p>

<p>class Fuga
  def self.fuga</p>

<pre><code>puts 'fugafuga'
</code></pre>

<p>  end
end</p>

<p>puts 'before run_load_hooks'</p>

<h1>run_load_hooksを実行すると、4行目の ActiveSupport.on_load が呼ばれる</h1>

<p>ActiveSupport.run_load_hooks :fuga, Fuga
puts 'after run_load_hooks'</p>

<h1>run_load_hooks が実行されているのですぐに呼ばれる</h1>

<p>ActiveSupport.on_load :fuga do
  puts 'start 2st on load'
  fuga
  puts 'end 2st on load'
end</p>

<h1>実行結果</h1>

<h1>before run_load_hooks</h1>

<h1>start 1st on load</h1>

<h1>fugafuga</h1>

<h1>end 1st on load</h1>

<h1>after run_load_hooks</h1>

<h1>start 2st on load</h1>

<h1>fugafuga</h1>

<h1>end 2st on load</h1>

<p>{% endcodeblock %}</p>

<p>コードにちょこちょこ書いていますが、要はActiveSupport.run_load_hooksが実行されないと呼ばれないし、
ActiveSupport.run_load_hooksが呼ばれれば一緒に実行してくれるということっぽいです。</p>

<p>ここいらは、<strong><a href="">@eiel</a></strong>さんのRails Docの記事『<strong><a href="http://railsdoc.eiel.info/active_support/lazy_load_hooks/">RailsDoc - Lazy Load Hooks</a></strong>』を参考にさせて頂きました。最近Rails Docさんにはお世話になりっぱなしです！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>alias_method_chain について</h2>

<p><code>alias_method_chain</code>は、既存のメソッドを置き換えをしてくれます。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>active_supportのメソッドなのでrequireが必要</h1>

<p>require 'active_support/all'</p>

<p>module LogHelper</p>

<p>  def log(message)</p>

<pre><code>puts message
</code></pre>

<p>  end</p>

<p>  def log_with_timestamp(message)</p>

<pre><code>log_without_timestamp("[#{Time.now}] #{message}")
</code></pre>

<p>  end</p>

<p>  # 以下と同義
  # alias_method :log, :log_with_timestamp
  # alias_method :log_without_timestamp, :log
  alias_method_chain :log, :timestamp
end</p>

<p>include LogHelper
log('Hello') #=> [2015-01-02 11:45:01 +0900] Hello
{% endcodeblock %}</p>

<p>このメソッドには次のルールがあるそうです。</p>

<pre>
 (A) 前提
   alias_method_chain :xxx, :yyy

 (B) ルール
   (1) 上書きして呼び出すメソッドは、 xxx_with_yyy とする
   (2) 元となるメソッドは、 xxx_without_yyy とする
</pre>


<p>ちなみにActiveSupport(v4.2.0)の<code>alias_method_chain</code>のソースコードはこんなかんじです。
(わかりやすい＾＾)</p>

<p>{% codeblock lang:ruby %}
  def alias_method_chain(target, feature)</p>

<pre><code># Strip out punctuation on predicates, bang or writer methods since
# e.g. target?_without_feature is not a valid method name.
aliased_target, punctuation = target.to_s.sub(/([?!=])$/, ''), $1
yield(aliased_target, punctuation) if block_given?

with_method = "#{aliased_target}_with_#{feature}#{punctuation}"
without_method = "#{aliased_target}_without_#{feature}#{punctuation}"

alias_method without_method, target
alias_method target, with_method

case
when public_method_defined?(without_method)
  public target
when protected_method_defined?(without_method)
  protected target
when private_method_defined?(without_method)
  private target
end
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>シナジーマーケティングさんの、<strong><a href="http://www.techscore.com/blog/2013/02/27/rails-alias_method_chain-%E6%97%A2%E5%AD%98%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B%E5%B8%B8%E5%A5%97%E6%89%8B%E6%AE%B5/">» Rails: alias_method_chain: 既存の処理を修正する常套手段 TECHSCORE BLOG</a></strong>
がすごくわかりやすい説明を書いて頂けていたので参考にさせて頂きました。有難うございます！</p>

<h2>module#prepend について</h2>

<p><code>module#prepend</code>自体はswitch_pointには出てきませんが、調べていく中でRuby 2.0で導入されたメソッドの<code>module#prepend</code>は<code>alias_method_chain</code>を置き換える事ができるのを知りました。使い方としてはこんな感じ。</p>

<p>{% codeblock lang:ruby %}
module LoggingWithTimestamp</p>

<p>  def log(message)</p>

<pre><code># 呼び出し元のメソッドを呼び出す
super("[#{Time.now}] #{message}")
</code></pre>

<p>  end</p>

<p>end</p>

<p>class Logging
  # LoggingWithTimestampのlogが、Loggingのlogメソッドよりも優先して呼ばれる
  prepend LoggingWithTimestamp</p>

<p>  def log(message)</p>

<pre><code>puts message
</code></pre>

<p>  end
end</p>

<p>Logging.new.log('Hello') #=> [2015-01-02 12:23:15 +0900] Hello
{% endcodeblock %}</p>

<p><code>include</code>と<code>prepend</code>との使い分けは次の通り。</p>

<pre>
* include: 新しい機能を追加するために使う
  * モジュール側のメソッドはクラスのメソッドを上書きできない
  * クラス側のメソッドはモジュールのメソッドを上書きできる

* prepend: 既存の機能の変更をするために使う
  * モジュール側のメソッドはクラス側のメソッドを上書きでる
  * クラス側のメソッドはモジュール側のメソッドを上書きできない
</pre>


<p>こちらもシナジーマーケティングさんのブログ記事『<strong><a href="http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/">» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？</a></strong>』が図解も含めてすごくわかりやすい解説をしてくれています！</p>

<h2>あとがき</h2>

<p>今までなんの気なしに使ってきたライブラリですが、よく読んでみると色々と勉強になる部分が多くあります。
自分がライブラリ書くときに使えそうなTipsがあってすごい勉強になります！今度はテストとかも読んでみるつもりです！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://qiita.com/seanchas_t/items/ea47a1eb0969afcac2af">Rubyのdefine_method、class_evalで動的に定義されたメソッドの呼出コストを調べてみた - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http_status_checker URLのステータスを取得するgemを作りました]]></title>
    <link href="http://morizyun.github.io/blog/http-status-checker-ruby-gem-http-header/"/>
    <updated>2014-12-30T18:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/http-status-checker-ruby-gem-http-header</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774169552/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774169552&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774169552&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774169552" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="http://workshop.morizyun.com/">俺の勉カレ</a></strong>』で収集中の勉強会のリンクは、開催を取りやめたなどの理由で404になる場合がありました。そのため、定期的にhttp statusをチェックする仕組みを作りたくて、『<strong><a href="https://github.com/morizyun/http_status_checker">morizyun/http_status_checker</a></strong>』
というRubyGemを作りました！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>特徴</h2>

<pre>
* 簡単に複数のURLのHTTPステータスをチェックできる
* ホスト単位にスレッドを生成するので早い
* 一つのホストに負荷をかけ過ぎないようにinervalの待ち時間を設定できる
* リダイレクトやエラーをURL単位で取得できる
</pre>


<h2>インストール手順</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加。</p>

<p>{% codeblock lang:bash %}</p>

<h1>http status checker</h1>

<p>gem 'http_status_checker'
{% endcodeblock %}</p>

<p>そして以下のコマンドを実行してインストールしてください。(pathは適宜変更)</p>

<p>{% codeblock lang:bash %}
bundle install --path vendor/bundle --jobs=4
{% endcodeblock %}</p>

<p>もしくはコマンドライン上で以下のコマンドを実行。</p>

<p>{% codeblock lang:bash %}
gem install http_status_checker
{% endcodeblock %}</p>

<h2>コマンドラインから使い方</h2>

<p>Gemをインストールしたら、<code>http_status_checker</code>をコマンドラインから呼び出す事ができます。</p>

<p>{% codeblock lang:ruby %}
$ http_status_checker -u http://morizyun.github.io</p>

<h1>=> url: http://morizyun.github.io</h1>

<h1>=> response: {:code=>"200", :is_alive=>true, :redirect_url=>nil}</h1>

<p>{% endcodeblock %}</p>

<h2>Rubyプログラム内での使い方</h2>

<p>Rubyプログラムから呼び出す事もできます。引数の<code>interval_sec</code>は任意なので省略可能です。
省略した場合のデフォルトのインターバルは1秒です。(相手サイトに大量にアクセスしないように)</p>

<p>{% codeblock lang:bash %}
require 'http_status_checker'</p>

<p>urls = ['http://morizyun.github.io', 'http://www.yahoo.co.jp']
interval_sec = 1
HttpStatusChecker.check urls, interval_sec</p>

<h1>=> [{"http://morizyun.github.io"=>{:code=>"200", :is_alive=>true, :redirect_url=>nil}},</h1>

<h1>=> {"http://www.yahoo.co.jp"=>{:code=>"200", :is_alive=>true, :redirect_url=>nil}}]</h1>

<p>{% endcodeblock %}</p>

<h2>Issue/Pull Request 大歓迎</h2>

<p>定期的にURLの死活チェックをしたり、ユーザーから投稿されたURLチェックなどに使えると思います。
もしお気づきの点があれば、いつでもIssue / Pull Request お待ちしています＾＾</p>

<p><strong><a href="https://github.com/morizyun/http_status_checker">morizyun/http_status_checker</a></strong></p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソースコード・リーディングしよう！[GemJam][ActiveSupport]]]></title>
    <link href="http://morizyun.github.io/blog/library-source-code-reading-acctive-support/"/>
    <updated>2014-12-28T12:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/library-source-code-reading-acctive-support</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00DT4DY0M/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00DT4DY0M&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00DT4DY0M&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00DT4DY0M" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<strong><a href="https://twitter.com/h5y1m141">@h5y1m141</a></strong>さんに誘って頂いて、
<strong><a href="https://twitter.com/hitomi_tw">@hitomi_tw</a></strong>さんや
<strong><a href="http://qiita.com/shiro615">shiro615</a></strong>さんと一緒に、RubyGemsのソースコードリーディング勉強会『<strong>GemJam</strong>』を行いました。</p>

<p>今回は最近仕事でソースコードを読む時間が増えてきて、苦労していたのでソースコード・リーディングのモチベーションアップやコツを調べつつ、いつもRailsでお世話になっていた『<strong><a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a></strong>』
のソースコードリーディングに挑戦してみました。</p>

<p><strong>(12/28 12:10) 勉強会のアウトプットを更新しました。全員アウトプットしたのは素晴らしいです</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>プログラムのモチベーション</h2>

<p>これは経験談からくる話なので、これが正解ということでないッス。どちらかと言うと、今までエンジニアとして経験してきた中で、僕個人はこう思っていますという観点で書きました！</p>

<h3>プログラミングは継続する事が一番大切</h3>

<p><strong><a href="http://gigazine.net/news/20130911-180-websites/">プログラミング経験ゼロだが180日で180個のウェブサイトを作るプロジェクトがゴールまであとわずかに</a></strong></p>

<p>プログラミング経験0のデザイナさんが、毎日1つサイトを作っていったお話です。最初はテキストとリンクが並ぶだけのサイトでしたが、少しずつゲームやチャットなどが作れるようになっていきます。</p>

<p>今知っている知識だけで、作れるWebサイトを作っていく。そして、自分の知っている2つの知識を組み合わせたり、１つずつやりたいコトをGoogleに教えてもらうくらいが、挫折せずに続けられると思っています。</p>

<p>個人的に学生さんらにプログラムを教えた事がありますが、プログラムが出来るようになるために一番大切なことは『<strong>継続</strong>』することだと常々実感させられます。</p>

<h3>じゃあ、なぜソースコードを読むのか？</h3>

<p>僕は1人の力には限界があると思います。たった一人で本当に価値のあるソフトウェアを作るのは本当に難しいことだと思います。だから、価値のあるソフトウェアを作っていくためには、他のエンジニアと一緒にプログラムを作り込む必要があると考えています。</p>

<p>そのためには、他の人のソースコードの意味を理解し、他の人にわかりやすいプログラムを書く必要があります。言い換えるとソースコードを読むこと、読みやすいソースコードを知ることが重要だと思います。</p>

<h3>オススメのドキュメント</h3>

<p><strong><a href="http://www.itmedia.co.jp/enterprise/articles/0712/26/news015.html">まつもとゆきひろのハッカーズライフ：第10回 ソースを読もう - ITmedia エンタープライズ</a></strong></p>

<p>Rubyの製作者、まつもとゆきひろさんが2007年に書かれていた記事を見つけました。まつもとさんのソースコードを読む際の動機を垣間見える面白い記事でしたので、良ければぜひご覧になってみてください。</p>

<h2>ソースコードの読み方</h2>

<p>今回『<strong><a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a></strong>』
のソースコード・リーディングをしてみたので、その時の僕の手順を紹介します。(もしもっといい方法をご存知の方がいれば是非コメントお願いします)</p>

<h4>(1) コードを効率よく読むためのツールを準備する</h4>

<p>まず、オススメのエディタは『<strong><a href="https://www.jetbrains.com/ruby/">RubyMine(などのJetBrains製のエディタ)</a></strong>』です。理由はメソッドのドリルダウンがデフォルトの設定で簡単に行えるからです。1ヶ月無料なのでよかったら是非試してみてください！</p>

<p>次にプロジェクトフォルダ直下で、Gemfile作成して以下の様に追加。</p>

<p>{% codeblock lang:ruby %}
source 'https://rubygems.org'</p>

<h1>debug用</h1>

<p>gem 'pry'</p>

<h1>stackを表示</h1>

<p>gem 'pry-stack_explorer'</p>

<h1>各種便利ユーティリティ</h1>

<p>gem 'activesupport'
{% endcodeblock %}</p>

<p>以下のコマンドを実行して、Gemをインストール。</p>

<p>{% codeblock lang:bash %}</p>

<h1>Gemを追加するためのディレクトリを作成</h1>

<p>mkdir vendor</p>

<h1>Gemをディレクトリに保存</h1>

<p>bundle install --path vendor/bundle --jobs=4
{% endcodeblock %}</p>

<h4>(2) 実際に動かしてみる</h4>

<p>例えば、<code>sample.rb</code>を作成して以下のようにコードを記入。</p>

<p>{% codeblock lang:ruby %}
require 'pry'
require 'pry-byebug'
require 'active_support/all'</p>

<p>puts 2.days.ago
{% endcodeblock %}</p>

<p>これを実行するとactive supportの機能である2日前の日付を取得する事ができます。</p>

<p>{% codeblock lang:bash %}
bunlde exec ruby sample.rb</p>

<h1>=> 2014-12-25 14:09:42 +0900</h1>

<p>{% endcodeblock %}</p>

<h4>(3) デバッガの準備</h4>

<p>次に今回はデバッカを書いて実際に2.daysのメソッドにどんな風に動いているのかを見れるようにします。</p>

<p>まずは、<code>vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/core_ext/numeric/time.rb</code>
を開いて、daysメソッドに以下を追加。</p>

<p>{% codeblock lang:ruby %}
  def days</p>

<pre><code>binding.pry # &lt;= この行を追加
ActiveSupport::Duration.new(self * 24.hours, [[:days, self]])
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>そしてもう一度以下のコマンドを実行すると今度は、<code>binding.pry</code>を書いた地点で停止します。</p>

<p>{% codeblock lang:bash %}
bunlde exec ruby sample.rb</p>

<h1>デバッカが表示</h1>

<h1>=> From:</h1>

<h1>=>/active_support_reading/vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/core_ext/numeric/time.rb @ line 50 Numeric#days:</h1>

<h1>=></h1>

<h1>=>     49: def days</h1>

<h1>=>  => 50:   binding.pry</h1>

<h1>=>     51:   ActiveSupport::Duration.new(self * 24.hours, [[:days, self]])</h1>

<h1>=>     52: end</h1>

<h1>呼び出しの関係を取得</h1>

<p>2.1.4 (2):0 > show-stack</p>

<h1>=> Showing all accessible frames in stack (2 in total):</h1>

<h1>=> --</h1>

<h1>=> => #0  days &lt;Numeric#days()></h1>

<h1>=>    #1 [main]    <main></h1>

<p>2.1.4 (main):0 > show-source Benchmark.ms</p>

<h1>=></h1>

<h1>=> From:</h1>

<h1>=>/active_support_reading/vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/core_ext/benchmark.rb @ line 11:</h1>

<h1>=> Owner: #&lt;Class:Benchmark></h1>

<h1>=> Visibility: public</h1>

<h1>=> Number of lines: 3</h1>

<h1>=></h1>

<h1>=> def ms</h1>

<h1>=>   1000 * realtime { yield }</h1>

<h1>=> end</h1>

<h1>ここでstepを実行すると処理の中身に移動、nextで次の処理を見ることができる</h1>

<p>{% endcodeblock %}</p>

<p>あとはちょっと変更して見て動かしたりしてみてください。</p>

<h3>どんなふうにソースコードを読み進むべき？</h3>

<p>手始めにどんなふうにソースコードを読んでみたらいいかをいくつかのサイトを調べながら考えてみました。
アイデアレベルですが、よかったらぜひソースコード・リーディング試してみてください！</p>

<pre>
* 普段関わっていたり、仕事に役立つコードを読んだり、コメントを書く
* 興味のある分野や機能を持ったソースコードを読む
  * 全体を読む必要はない。面白そうなところをつまみ食いして、先人の知恵を学べばいい
* ちょっと変更して動作させてみる
* バグがないか探してみる
</pre>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>ActiveSupportの面白い機能</h2>

<p>『<strong><a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a></strong>』の
便利機能を調べつつ、その部分のソースコードを読んでみました。今回知らなくって、後で使えそうだった機能を中心に紹介します！</p>

<h3>Benchmark.ms</h3>

<p><code>Benchmark.ms</code>はブロックを渡すとブロックを評価して実行時間を計測します。<br/>
(Benchmark.realtimeのラッパーです)</p>

<p>{% codeblock lang:ruby %}
require 'active_support/all'</p>

<p>puts Benchmark.ms {  sleep 1 } # => 1000.234
{% endcodeblock %}</p>

<h3>cattr_accessor</h3>

<p><code>attr_accessor</code>はインスタンス変数へのアクセッサを提供するメソッド。<br/>
<code>cattr_accessor</code>は、クラス変数へのアクセッサを提供するメソッド。</p>

<p>{% codeblock lang:ruby %}
require 'active_support/all'</p>

<p>class Sample
  cattr_accessor :hoge
end</p>

<p>Sample.hoge = 1
puts Sample.hoge
{% endcodeblock %}</p>

<h3>descendants</h3>

<p>{% codeblock lang:ruby %}
require 'active_support/all'</p>

<p>class Parent
end
class Child &lt; Parent
end
class GrandChild &lt; Child
end</p>

<h1>継承してくれている先を出す</h1>

<p>puts Parent.descendants.to_s #=> [Child, GrandChild]</p>

<h1>継承元を出すメソッド</h1>

<p>puts GrandChild.ancestors.to_s</p>

<h1>=> [GrandChild, Child, Parent, Object, JSON::Ext::Generator::GeneratorMethods::Object, PP::ObjectMixin, Kernel, BasicObject]</h1>

<p>{% endcodeblock %}</p>

<h2>Hash.except</h2>

<p>{% codeblock lang:ruby %}
require 'active_support/all'</p>

<h1>ハッシュから特定のキーを削除</h1>

<p>hash = { hoge: 1, huga: 2 }
puts hash.except(:hoge).to_s # => {:huga => 2}
{% endcodeblock %}</p>

<h2>Time#change</h2>

<p>{% codeblock lang:ruby %}
require 'active_support/all'</p>

<h1>その日の4時0分0秒を取得</h1>

<p>Time.now.change(hour: 4, minute: 0, second: 0) #=> 2014-12-27 04:00:00 +0900
{% endcodeblock %}</p>

<p>ここの記事が大変参考になりました！</p>

<p><strong><a href="http://railsdoc.eiel.info/hiroshimarb/32/">RailsDoc - 広島Ruby勉強 #032 - Rails のソースコード読んだので面白そうなところを紹介する -- ActiveSupport CoreExt編 その1</a></strong></p>

<h2>pry詳解</h2>

<p>今回ソースコードを読んでいて、改めてpryの素晴らしさに感動しました。ということでpryに関する記事を見つけたので紹介です。</p>

<h3>pryの使い方解説</h3>

<ul>
<li><a href="http://qiita.com/muran001/items/e88819681f5325fc44e0">Pryコマンドまとめ - Qiita</a></li>
<li><a href="http://qiita.com/tbpgr/items/a1bbe43b772e35d93987">Ruby の 定番対話ツール pry 徹底攻略 | Normal Input #pry #ruby - Qiita</a></li>
<li><a href="http://qiita.com/tbpgr/items/12a60f2f9e3de61517b5">Ruby の 定番対話ツール pry 徹底攻略 #pry #ruby - Qiita</a></li>
<li><a href="http://qiita.com/k0kubun/items/b118e9ccaef8707c4d9f">Ruby - 今更聞けないpryの使い方と便利プラグイン集 - Qiita</a></li>
<li><a href="http://qiita.com/joker1007/items/42f00b12c65bbec0e50a">pry-docでカジュアルにRubyのソースコードを読む - Qiita</a></li>
<li><a href="http://morizyun.github.io/blog/pry-command-rails-ruby/">Pryが真の力を発揮してくれる19個のコマンドとコマンドの自作方法 - 酒と泪とRubyとRailsと</a></li>
</ul>


<h3>pryの動作原理の解説</h3>

<ul>
<li><a href="http://qiita.com/yui-knk/items/63a511d243323bec6fb8">“binding.pry”って実際のところは何なのだろう - Qiita</a></li>
</ul>


<h2>GemJam勉強会アウトプット</h2>

<h3>GemJamという勉強会を行いました</h3>

<p><strong><a href="https://twitter.com/h5y1m141">@h5y1m141</a></strong>さんが、GemJamを作った背景や、今回調べたことについてブログにまとめて頂けました。4人位のコードリーディングや読書会的な勉強会って結構面白いと実感しました。あと、みんなが終了後1-2日でちゃんとアウトプットしているのはほんとうに素晴らしいです！</p>

<p><strong><a href="http://h5y1m141.hatenablog.com/entry/2014/12/28/111420">GemJamという勉強会を行いました - TitaniumMobile勉強記</a></strong></p>

<h3>GitHubでMergeされたらBacklogもRailsで自動更新する</h3>

<p><strong><a href="https://twitter.com/hitomi_tw">@hitomi_tw</a></strong>さんがActiveSupportのconcernを使いつつ、Backlog APIへのアクセスメソッドを調べて発表してくれました。その際のソースコードをQiitaに公開して頂けたので紹介です！</p>

<p><strong><a href="http://qiita.com/hitomi_/items/12c16d58855fb3536e96">GitHubでMergeされたらBacklogもRailsで自動更新する - Qiita</a></strong></p>

<h3>配列からハッシュを作成/ActiveSupportでHashの一部だけ取り出す</h3>

<p>まだ、プログラムの実務経験はないそうですが、短い時間でアウトプットや発表なんかをしっかりしてくれて、自分の初心者の頃と比べると雲泥の差で素晴らしいと感じました。ぜひプログラムを楽しんでください＾＾</p>

<p><strong><a href="http://qiita.com/shiro615">shiro615 - Qiita</a></strong></p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://i.loveruby.net/ja/misc/readingcode.html">ソースコードを読むための技術</a></li>
<li><a href="http://yasuho.hatenablog.com/entry/20060509/p1">ソースコードを効率よく読むには(1) - プログラマyasuhoの隠れ家</a></li>
<li><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11110745181">プログラムのソースコードの読み方のコツ最近他人の書いたプログラム... - Yahoo!知恵袋</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0804/09/news150.html">小山博史のJavaを楽しむ（10）：【新人なるプログラマーへ】ソースコードを読みましょう (1/2) - ＠IT</a></li>
</ul>


<h2>変更来歴</h2>

<p><strong>(12/28 12:10) 勉強会のアウトプットを更新</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thor Rubyで簡単にshellコマンドが作れる！]]></title>
    <link href="http://morizyun.github.io/blog/thor-shell-command-easy-ruby-gem/"/>
    <updated>2014-12-23T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/thor-shell-command-easy-ruby-gem</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=477416366X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=477416366X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この前作ったFacebookやTwitter、はてなブックマークのカウントを収集してくれるGem『<strong><a href="https://github.com/morizyun/scouter">scouter</a></strong>』のコマンドを作った際にお世話になった『<strong><a href="https://github.com/erikhuda/thor">erikhuda/thor</a></strong>』が思っていた以上に高機能だったので忘れないようにメモ記事です！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>インストール手順</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行してください。</p>

<p>{% codeblock lang:bash %}</p>

<h1>command-line interfaces</h1>

<p>gem 'thor'
{% endcodeblock %}</p>

<p>もしくはコマンドライン上で以下のコマンドを実行。</p>

<p>{% codeblock lang:bash %}
gem install thor
{% endcodeblock %}</p>

<h2>基本的な使い方</h2>

<p><code>testest</code>を作成して以下コードを記述します。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>!/usr/bin/env ruby</h1>

<h1>coding: utf-8</h1>

<p>require 'rubygems'
require 'thor'</p>

<p>class Command &lt; Thor
  default_command :example</p>

<p>  desc 'example', 'an example task'
  option :file, type: :string, aliases: '-f', desc: 'Delete the file after parsing it'
  def example</p>

<pre><code>puts "executing! argument is #{options[:file]}!"
</code></pre>

<p>  end
end</p>

<p>Command.start
{% endcodeblock %}</p>

<p>早速作成したコマンドを実行してみます！</p>

<p>{% codeblock lang:bash %}</p>

<h1>初回のみ実行権限を付与</h1>

<p>chmod a+x testest</p>

<p>./testest -f sample.file</p>

<h1>=> executing! argument is sample.file!</h1>

<p>{% endcodeblock %}</p>

<h2>引数とオプションの追加</h2>

<p>先ほどのコマンドに引数と、オプションを足してみます。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>!/usr/bin/env ruby</h1>

<h1>coding: utf-8</h1>

<p>require 'rubygems'
require 'thor'</p>

<p>class Command &lt; Thor
  default_command :example</p>

<p>  desc 'example', 'an example task'
  option :file, type: :string, aliases: '-f', desc: 'Delete the file after parsing it'
  method_option :delete, aliases: '-d', desc: 'Delete the file after parsing it'
  def example</p>

<pre><code>if options[:delete]
  puts "executing! argument is #{options[:file]} and delete option is true!"
else
  puts "executing! argument is #{options[:file]} and delete option is false!"
end
</code></pre>

<p>  end
end</p>

<p>Command.start
{% endcodeblock %}</p>

<p>では先ほど作ったコマンドを実行してみます。</p>

<p>{% codeblock lang:bash %}</p>

<h1>-d(--delete) オプションを付けない場合</h1>

<p>./testest -f 'sample.file'</p>

<h1>=> executing! argument is sample.file and delete option is false!</h1>

<h1>-d(--delete) オプションを付ける場合</h1>

<p>./testest -f 'sample.file' -d</p>

<h1>=> executing! argument is sample.file and delete option is true!</h1>

<p>{% endcodeblock %}</p>

<h2>Railsの環境情報を取得</h2>

<p>Railsの環境情報を使ったコマンドも簡単に作成できます。</p>

<p>{% codeblock lang:ruby %}
class Example &lt; Thor
  include Thor::Actions
  desc "init_example", " you can write some description"
  method_options :force => :boolean, :aliases => "-f"
  def init_example</p>

<pre><code># Railsの環境情報を読み込み
require './config/environment'

if options[:force]
  if yes?("WARN: Are u sure ?",:yellow)
    delete_sql = "truncate examples"
    say "delete all datas from examples ... ", :red
    ActiveRecord::Base.connection.execute(delete_sql)
  else
    say "Cancel!", :red
    return
  end
end

#TODO
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Namespaceを付け足す</h2>

<p>thorを使いこなす過程でNamespaceが欲しくなるかもです。そんな場合はこちら。</p>

<p>{% codeblock lang:bash %}
module Sinatra
  class App &lt; Thor</p>

<pre><code>namespace :myapp
def install
  # task code
end
# other tasks
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>ちなみに、実行コマンドは以下の通りです。</p>

<p>{% codeblock lang:bash %}
thor myapp:install
{% endcodeblock %}</p>

<h2>Thor GitHub Wiki</h2>

<p>ThorのGitHubのWikiはこちら！</p>

<p><strong><a href="https://github.com/erikhuda/thor/wiki">Home erikhuda/thor Wiki - GitHub</a></strong></p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/succi0303/items/32560103190436c9435b">Ruby - Thorの使い方まとめ - Qiita</a></strong></p>

<p><strong><a href="http://qiita.com/rosylilly/items/d7f9667f3998cfc420d1">Ruby で作る、簡単 CLI ツールのススメ - Qiita</a></strong></p>

<p><strong><a href="http://hibariya.github.io/entries/20111025/a0.html">Thorで簡単にコマンドラインアプリをつくる - Joy Luck Crab</a></strong></p>
]]></content>
  </entry>
  
</feed>
