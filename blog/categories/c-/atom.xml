<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:57:50+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 二股に分かれている容器にボールを入れる[AOJ 0033][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/ball-algorithm-aoj-0033/"/>
    <updated>2014-05-18T19:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ball-algorithm-aoj-0033</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4839941068/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4839941068&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4839941068&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4839941068" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0033">二股に分かれている容器にボールを入れる</a></strong>』問題です。</p>

<p>二股にわかれた容器に番号のついたボールを番号の大小関係の制約を守って並べていく問題です。</p>

<p>これはどれだけ問題をシンプルに考えられるかという点の思考が必要になるので、難しい戦略を考えるのとは別の思考が必要で、これはこれで面白かったです！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
num = gets.to_i
num.times do
  left, right = [], []
  arr = gets.chomp.split(' ').map(&amp;:to_i)
  arr.each do |a|</p>

<pre><code>if (left.last || 0) &lt; a
  left &lt;&lt; a
elsif (right.last || 0) &lt; a
  right &lt;&lt; a
else
  break
end
</code></pre>

<p>  end
  puts (arr.size == (left.size + right.size)) ? 'YES' : 'NO'
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
n = int(raw_input())
for i in range(n):
  left, right = [], []
  arr = map(int, raw_input().split(' '))
  for a in arr:</p>

<pre><code>if len(left) == 0 or left[len(left)-1] &lt; a:
  left.append(a)
elif len(right) == 0 or right[len(right)-1] &lt; a:
  right.append(a)
else:
  break
</code></pre>

<p>  if len(arr) == len(left) + len(right):</p>

<pre><code>print 'YES'
</code></pre>

<p>  else:</p>

<pre><code>print 'NO'
</code></pre>

<p>{% endcodeblock %}</p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<h1>include &lt;stdio.h></h1>

<p>using namespace std;</p>

<p>int a[10];</p>

<p>bool dfs(int i, int left, int right) {
  if(i == 10) { return true; }</p>

<p>  bool ans = false;
  if(left &lt; a[i]) {</p>

<pre><code>ans = dfs(i+1, a[i], right);
</code></pre>

<p>  }
  if(right &lt; a[i]) {</p>

<pre><code>ans = dfs(i+1, left, a[i]);
</code></pre>

<p>  }
  return ans;
}</p>

<p>int main() {
  int n;
  scanf("%d", &amp;n);</p>

<p>  for(int i = 0; i &lt; n; i++) {</p>

<pre><code>for(int j = 0; j &lt; 10; j++) {
  scanf("%d", &amp;a[j]);
}
cout &lt;&lt; (dfs(0, 0, 0) ? "YES" : "NO") &lt;&lt; endl;
</code></pre>

<p>  }
  return 0;
}
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 島の数を数える[AOJ 0067][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/the-number-of-island-algorithm-aoj-0067/"/>
    <updated>2014-05-13T08:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/the-number-of-island-algorithm-aoj-0067</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797329734/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797329734&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797329734&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797329734" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近アルゴリズム勉強・Python/C++の勉強のためにAizu Online Judge(AOJ)を継続しています。今回は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0067">島の数を数える</a></strong>』問題です。</p>

<p>0と1で表されたmap上の島の数を数える問題です。</p>

<p>今回は戦略を思いつかずに、かなり試行錯誤をしました。ただ、こういう問題を通して柔軟な発想と、効率的なアルゴリズムの仕組みを学んでいきたいと思います！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
def remove_island(i, j, map)
  map[i][j] = '0'
  [[0, 1], [1, 0], [0, -1], [-1, 0]].each do |x, y|</p>

<pre><code>next if !(0..11).include?(i + x) || !(0..11).include?(j + y)
if map[i + x][j + y]=='1'
  remove_island(i + x, j + y, map)
end
</code></pre>

<p>  end
end</p>

<p>loop do
  map = 12.times.map{ gets.chomp }
  count = 0
  12.times do |i|</p>

<pre><code>12.times do |j|
  if map[i][j] == '1'
    count += 1
    remove_island(i, j, map)
  end
end
</code></pre>

<p>  end
  puts count
  break if gets.nil?
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
def get_map():
  map = []
  while True:</p>

<pre><code>try:
  tmp = list(raw_input())
  if len(tmp) != 12: break
  map.append(tmp)
except:
  break
</code></pre>

<p>  return map</p>

<p>def remove_island(x, y, map):
  map[x][y] = 0
  move = [[1, 0], [0, 1], [-1, 0], [0, -1]]
  for i, j in move:</p>

<pre><code>if 0 &lt;= x + i &lt;= 11 and 0 &lt;= y + j &lt;= 11 and map[x + i][y + j] == '1':
  map = remove_island(x + i, y + j, map)
</code></pre>

<p>  return map[:]</p>

<p>while True:
  map = get_map()
  if len(map) != 12: break</p>

<p>  count = 0
  for x in range(12):</p>

<pre><code>for y in range(12):
  if map[x][y] == '1':
    count += 1
    map = remove_island(x, y, map)
</code></pre>

<p>  print count
{% endcodeblock %}</p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int m[12][12];</p>

<p>bool valid(int y, int x) {
  if(0 &lt;= y &amp;&amp; y &lt; 12) {</p>

<pre><code>if(0 &lt;= x &amp;&amp; x &lt; 12) {
  if(m[y][x] == 1) return true;
}
</code></pre>

<p>  }
  return false;
}</p>

<p>void remove_island(int y, int x) {
  int nx, ny;
  int dx[4] = {1, 0, -1,  0};
  int dy[4] = {0, 1,  0, -1};</p>

<p>  m[y][x] = 0;
  for(int i = 0; i &lt; 4; i++){</p>

<pre><code>ny = y + dy[i];
nx = x + dx[i];
if(valid(ny, nx)) remove_island(ny, nx);
</code></pre>

<p>  }
}</p>

<p>int main() {
  char c[12];
  int ans;
  while(1){</p>

<pre><code>for(int i = 0; i &lt; 12; i++) {
  if(!(cin &gt;&gt; c)) return 0;
  for(int j = 0; j &lt; 12; j++) {
    m[i][j] = (int)(c[j] - '0');
  }
}

ans = 0;
for(int i = 0; i &lt; 12; i++) {
  for(int j = 0; j &lt; 12; j++) {
    if(valid(i, j)) {
      remove_island(i, j);
      ans++;
    }
  }
}
cout &lt;&lt; ans &lt;&lt; endl;
</code></pre>

<p>  }
  return 0;
}
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 三目並べ ◯x問題の正誤判定[AOJ 0066][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/tic-tac-toe-algorithm-aoj-0066/"/>
    <updated>2014-05-11T18:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/tic-tac-toe-algorithm-aoj-0066</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00I8AT1FO/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00I8AT1FO&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00I8AT1FO&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00I8AT1FO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />引き続きプログラミングの基礎体力づくりと、Python/c++の勉強を兼ねてアルゴリズムを勉強中です。今回は『<strong>三目並べ ◯x問題の正誤判定</strong>』について勉強しました。AIZU Online Judgeで対応している問題は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0066&amp;lang=jp">Tic Tac Toe</a></strong>』です。
pubyやpythonならほんとうに簡単に解けてしまうんですが、c言語のポインタで死ぬほどハマって、最終的に諦めました。やっぱりポインタの概念をちゃんと理解しないと！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>サンプル問題(AOJ)</h2>

<p><strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0066&amp;lang=jp">Tic Tac Toe</a></strong><br/>
Aizu Online Judge。メモされた文章を読み込んで、その中にある数字を合算した結果の「暗証番号」</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
def judge(a,b,c)
  if a == b &amp;&amp; b == c &amp;&amp; a != 's'</p>

<pre><code>return a
</code></pre>

<p>  else</p>

<pre><code>return nil
</code></pre>

<p>  end
end</p>

<p>while gets
  s = $_.chomp.chars
  res = nil
  0.upto(3) do |i|</p>

<pre><code>res = judge(s[i], s[i+3], s[i+6])
break if res
res = judge(s[3*i], s[3*i+1], s[3*i+2])
break if res
</code></pre>

<p>  end
  if s[4] != 's' and (judge(s[0], s[4], s[8]) or judge(s[2], s[4], s[6]))</p>

<pre><code>puts s[4]
</code></pre>

<p>  elsif res.nil?</p>

<pre><code>puts 'd'
</code></pre>

<p>  else</p>

<pre><code>puts res
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
def judge(a, b, c):
  return a if a == b == c and a != 's' else 0</p>

<p>while True:
  try:</p>

<pre><code>s = raw_input()
for i in range(3):
  result = judge(*s[i:9:3])
  if result: break
  result = judge(*s[3*i:3*i+3])
  if result: break
else:
  result = s[4] if s[4] != 's' and (judge(*s[0:9:4]) or judge(*s[2:7:2])) else 'd'
</code></pre>

<p>  except:</p>

<pre><code>break
</code></pre>

<p>  print result
{% endcodeblock %}</p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int abs(int x) {
  return x >= 0 ? x : (-1)*x;
}</p>

<p>int judge(char *s) {
  int map[3][3];
  for( int i=0; i&lt;9; i++) {</p>

<pre><code>  if(s[i]=='o') map[i%3][i/3] = 1;
  if(s[i]=='x') map[i%3][i/3] = -1;
  if(s[i]=='s') map[i%3][i/3] = 0;
</code></pre>

<p>  }</p>

<p>  int sum[8];
  for(int i = 0; i &lt; 8; i++) { sum[i] = 0; }
  for(int i = 0; i &lt; 3; i++) {</p>

<pre><code>sum[0] += map[i][i];
sum[1] += map[i][2-i];
sum[2] += map[0][i];
sum[3] += map[1][i];
sum[4] += map[2][i];
sum[5] += map[i][0];
sum[6] += map[i][1];
sum[7] += map[i][2];
</code></pre>

<p>  }</p>

<p>  if(abs(sum[0])==3) return sum[0]/3;
  if(abs(sum[1])==3) return sum[1]/3;
  if(abs(sum[2])==3) return sum[2]/3;
  if(abs(sum[3])==3) return sum[3]/3;
  if(abs(sum[4])==3) return sum[4]/3;
  if(abs(sum[5])==3) return sum[5]/3;
  if(abs(sum[6])==3) return sum[6]/3;
  if(abs(sum[7])==3) return sum[7]/3;
  return 0;
}</p>

<p>int main() {</p>

<pre><code>int res;
char str[10];
while(cin &gt;&gt; str) {
    res = judge(str);
    cout &lt;&lt; (res != 0 ? ( res &gt; 0 ? "o" : "x" ) : "d") &lt;&lt; endl;
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 文章中に隠れた数字の合算[AOJ 0064][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/secret-number-algorithm-aoj-0064/"/>
    <updated>2014-05-11T10:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/secret-number-algorithm-aoj-0064</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4627012217/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4627012217&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4627012217&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4627012217" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />引き続きプログラミングの基礎体力づくりと、Python/c++の勉強を兼ねてアルゴリズムを勉強中です。今回は『<strong>文章中に隠れた数字の合算</strong>』について勉強しました。AIZU Online Judgeで対応している問題は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0064&amp;lang=jp">Secret Number</a></strong>』です。ライト言語であれば便利な標準ライブラリでワンライナーでも書けちゃうような問題ですが、c++だと、可読性を上げつつ、グローバル変数使わないように。。。とかで結構悩みました。でもプログラムを普段よりも幅広い側面で考えられるので、結構楽しいです＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>サンプル問題(AOJ)</h2>

<p><strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0064&amp;lang=jp">Secret Number</a></strong><br/>
Aizu Online Judge。メモされた文章を読み込んで、その中にある数字を合算した結果の「暗証番号」</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
arr = []
while gets
  arr += $_.chomp.scan(/[0-9]+/)
end
puts arr.map(&amp;:to_i).inject(:+)
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
import re</p>

<p>sum = 0
while True:
  try:</p>

<pre><code>str = raw_input()
r = re.compile(r'[0-9]+')
arr = r.findall(str)
for a in arr:
  sum += int(a)
</code></pre>

<p>  except:</p>

<pre><code>break
</code></pre>

<p>print sum
{% endcodeblock %}</p>

<p>Pythonの正規表現、早く覚えないと。。</p>

<p><strong><a href="http://d.hatena.ne.jp/yumimue/20071220/1198141598">[python]正規表現 - コンパイル、マッチング、マッチした部分の取り出し</a></strong></p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int addCharNum(string s, int <em>i){
  int n = 0;
  int j;
  for (j = </em>i; '0' &lt;= s[j] &amp;&amp; s[j] &lt;= '9' &amp;&amp; j &lt; s.size(); j++){</p>

<pre><code>n *= 10;
n += s[j] - '0';
</code></pre>

<p>  }
  *i = j;
  return n;
}</p>

<p>int main() {
  int sum = 0;
  int i;
  string s;
  while(cin>>s) {</p>

<pre><code>for(i = 0; i &lt; s.size() ; i++) {
  if('0' &lt;= s[i] &amp;&amp; s[i] &lt;= '9') {
    sum += addCharNum(s, &amp;i);
  }
}
</code></pre>

<p>  }
  cout &lt;&lt; sum &lt;&lt; endl;
}
{% endcodeblock %}</p>

<p>いろいろ書いていて悩んでいた<code>using namespace std</code>の意味。</p>

<pre>
c++では、iostream.hはiostreamになって、古いヘッダファイルをインクルードしている既存のプログラムをエラーにせず、 新しいヘッダをインクルードすることで名前空間に包んだ安全な関数を呼び出せるようにするために書く。
</pre>


<p><strong><a href="http://www.geocities.jp/bleis_tift/cpp/badstd.html">using namespace std;の是非</a></strong></p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: カードゲームの判定[AOJ 0060][Ruby/Python/c++]]]></title>
    <link href="http://morizyun.github.io/blog/card-game-algorithm-aoj-0060/"/>
    <updated>2014-05-10T15:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/card-game-algorithm-aoj-0060</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873116694/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873116694&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873116694&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873116694" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />引き続きプログラミングの基礎体力づくりと、Python/c++の勉強を兼ねてアルゴリズムを勉強中です。今回は『<strong>カードゲームの判定</strong>』について勉強しました。AIZU Online Judgeで対応している問題は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0060&amp;lang=jp">Card Game</a></strong>』です。c++は最近購入したアルゴリズム本の解説ソースがc++なのでついでに勉強中ですが、やっぱり処理速度が全然違いますね〜</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>サンプル問題(AOJ)</h2>

<p><strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1173&amp;lang=jp">The Balance of the World</a></strong><br/>
Aizu Online Judge。与えられる文字列は，丸括弧(“( )”)と角括弧(“[ ]”)の二種類の括弧を含むことがある。このカッコの対応関係が正しいかをチェックする問題。</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:ruby %}
while gets do
  c1, c2, c3 = $_.chomp.split(' ').map(&amp;:to_i)
  rem = (1..10).to_a - [c1, c2, c3]
  per = rem.map{ |i| c1 + c2 + i &lt;= 20 ? 1 : 0 }.inject(:+)/7.0
  puts per >= 0.5 ? 'YES' : 'NO'
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:python %}
while True:
  try:</p>

<pre><code>count = 0
c1, c2, c3 = map(int, raw_input().split())
for i in range(1, 11):
  if i in [c1, c2, c3]: continue
  if c1 + c2 + i &lt;= 20: count += 1

if count/7.0 &gt;= 0.5:
  print 'YES'
else:
  print 'NO'
</code></pre>

<p>  except:</p>

<pre><code>break
</code></pre>

<p>{% endcodeblock %}</p>

<h2>c++のサンプルソース</h2>

<p>{% codeblock lang:c %}</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>int main() {</p>

<pre><code>int i;
int c1, c2, c3;
int count;
int sum = 0;

while (cin &gt;&gt; c1 &gt;&gt; c2 &gt;&gt; c3) {
    count = 0;
    for(i = 1; i &lt; 11; i++) {
        if (c1 == i || c2 == i) {
            continue;
        } else if (c1 + c2 + i &lt;= 20) {
            count++;
        }
    }

    if ((double)count/7.0 &gt;= 0.5) {
        cout&lt;&lt;"YES"&lt;&lt;endl;
    } else {
        cout&lt;&lt;"NO"&lt;&lt;endl;
    }
}
return(0);
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
</feed>
