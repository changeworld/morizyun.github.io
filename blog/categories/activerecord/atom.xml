<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActiveRecord | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/activerecord/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-07-05T18:40:53+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java プログラマー Silver 覚えておきたいTips[Oralce][資格勉強]]]></title>
    <link href="http://morizyun.github.io/blog/java-programer-silver-se7-tips-oracle/"/>
    <updated>2015-02-14T08:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/java-programer-silver-se7-tips-oracle</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00ESXY9H0/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00ESXY9H0&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00ESXY9H0&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00ESXY9H0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Oracle社が提供している『<strong><a href="http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-803&amp;p_org_id=70">Java プログラマー Sliver</a></strong>』という資格を2ヶ月ほど少しずつ勉強を続けています。今回はこの資格の勉強中に覚えておくとあとでJavaプログラムを書くときにの基礎になりそうな項目を中心にメモしておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>クラス定義とオブジェクトの生成</h2>

<h3>オーバーロード</h3>

<p>『<strong>オーバーロード</strong>』とは、1つのクラス内に同じ名前のメソッドやコンストラクタを複数定義できることです。ただし『<strong>引数の並び、データ型、数が異なっている</strong>』ことがオーバーロードの条件となります。</p>

<p>オーバーロードのポイントは次の通り。</p>

<p> (1) オーバーロードされたメソッドは、それぞれ別々に定義されたメソッドとして扱われる<br/>
 (2) 同一クラス内に同じ名前のメソッドが2つ以上存在し、これらの引数データ型が異なるか、データ型は同じであっても順番が異なるか、数が異なる場合にはオーバーロードとみなされる<br/>
 (3) オーバーロードされたメソッドは、戻り値の有無、データ型の違いなどの制限はない<br/>
 (4) オーバーロードされたメソッドのいずれが呼び出されるかは、メソッドの呼び出し時に指定された引数を元にコンパイラが判定する<br/>
 (5) オーバーロードされたメソッドは、異なる修飾子を指定できる(修飾子については後述)<br/>
 (6) スーパークラスから継承したメソッドに対してもオーバーロードできる</p>

<h3>アクセス修飾子とカプセル化について</h3>

<pre>
(公開範囲が広い)
public => どのクラスからでも利用可能
↓
protected => このクラスを継承したサブクラス、もしくは同一パッケージ内のクラスから利用できる
↓
デフォルト(指定なし) => 同一パッケージ内のクラスからのみ利用可能
↓
private => 同一クラス内からのみ利用可能
(公開範囲が狭い)
</pre>


<h2>継承とポリモフィズム</h2>

<h3>インターフェースについて</h3>

<p>インターフェースの構文について。</p>

<p> (1) インターフェスで宣言できるメソッドは抽象メソッドのみ<br/>
 (2) インターフェースでは<code>public static</code>な定数を宣言できる。定数のため初期化が必要。初期化しない場合はコンパイルエラーとなる<br/>
 (3) インスタンス化はできない。実装クラスは、抽象メソッドをオーバーライドする<br/>
 (4) 実装クラスを定義するには、<code>implements</code>キーワードを利用する<br/>
 (5) インターフェースを元にサブインターフェースを作成する場合はextendsを利用する</p>

<p>インターフェースの抽象メソッド、変数に付与される修飾子について。</p>

<pre>
 * 抽象メソッド => public abstract 修飾子が付与
 * 変数 => staic final 修飾子が付与(定数となる)
</pre>


<h3>基本データ型の型変換</h3>

<h4>暗黙型変換</h4>

<p>byte値を int型に代入したり、 float値を double型に代入する場合、暗黙的に型変換が行われる</p>

<pre>
byte => short => int => long => float => double
char => int => long => float => double
</pre>


<h4>キャストによる型変換</h4>

<p>int 型をbyte 型の変数に代入したり、 double値をfloat 型の変数に代入する場合は『<strong>キャスト</strong>』が必要。</p>

<pre>
double => float => long => int => short => byte
double => float => long => int => char
</pre>


<h3>参照型の型変換</h3>

<h4>暗黙型変換</h4>

<p>サブクラスのオブジェクトをスーパークラス型で変換した変数で扱える。また、実装クラスのオブジェクトをインターフェースの方で宣言した変数で扱える。</p>

<pre>
サブクラス => スーパークラス
実装クラス => インターフェース
</pre>


<h4>キャストによる型変換</h4>

<p>スーパークラスで宣言した変数で参照しているサブクラスのオブジェクトを、元の型であるサブクラス型で宣言した変数で扱うにはキャストを用いる。</p>

<pre>
スーパークラス => サブクラス
インターフェース => 実装クラス
</pre>


<h3>ポリモフィズム</h3>

<p>オブジェクト指向言語では、共通のインターフェースを持つ操作でも、実際にはオブジェクトごとに振る舞いや動作がことなることをポリモフィズム(多態性、多層性)という。</p>

<h3>arraycopyメソッドについて</h3>

<p>よく勘違いしてしまう、arraycopyメソッドについて。</p>

<pre>
arraycopy(array, originStartNum, copy, copyStartNum, copyElementNum)

array - コピー元の配列名
originStartNum - コピー対象の開始位置
copy - コピー先の配列名
copyStartNum - コピー先の開始位置
copyElement - コピーされる配列要素の数
</pre>


<h2>例外処理</h2>

<h3>例外の種類</h3>

<p>Javaの例外には『<strong>例外処理が必須のchecked例外</strong>』と『例外処理が任意のunchecked例外』がある。</p>

<p> (1) Error クラス及びそのサブクラス => unchecked 例外<br/>
 (2) RuntimeExceptionクラス及びそのサブクラス => unchecked 例外<br/>
 (3) RuntimeExceptionクラス以外のExceptionのサブクラス => checked 例外</p>

<h3>オーバーライドにおける例外処理(throws)の注意点</h3>

<p>メソッドをオーバーライドする際に例外処理(throws)を記述する際のルールについて。</p>

<p> (1) サブクラスのメソッドがスローする例外は、スーパークラスのメソッドがスローする例外クラスと同じか、その例外クラスのサブクラスとする<br/>
 (2) サブクラスのメソッドがスローする例外は、RuntimeException および RuntimeExceptionのサブクラスの例外は、スーパークラスのメソッドに関係なくスローできる<br/>
 (3) スーパークラスのメソッドにthrowsがあっても、サブクラス側でthrowsを記述しないことは可能</p>

<h3>オーバーライドのルール</h3>

<p>例外処理ではないけど、オーバーライドには以下の様なルールがあります。</p>

<p> (1) オーバーライドとは、メソッド名、引数リストがまったく同じメソッドをサブクラスで定義すること<br/>
 (2) 戻り値の型は、スーパークラスと同じものか、もしくはその戻り値の方のサブクラスであれば利用可能<br/>
 (3) アクセス修飾子は、スーパークラスと同じものか、それよりも公開範囲が広いものであれば利用可能<br/>
 (4) throwsには、スーパークラスのメソッドかthrowsに指定した例外クラスとそのサブクラスが指定できる<br/>
 (5) ただし、RuntimeException クラスおよびそのサブクラスは制約なしにthrowsに指定できる<br/>
 (6) スーパークラスのメソッドにthrowsがあっても、throwsをしてしなくてもいい</p>

<h2>その他</h2>

<h3>switch文</h3>

<p>swich文で使えるデータ型は、byte, char, short, int, enum, Stringのいずれかの値である必要がある</p>

<h3>ArrayListクラス</h3>

<p>ArrayListは参照型しか使えない。基本型(int, double)を使うときは参照型のラッパーを使う必要がある</p>

<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(2015-01-05 22:30) 新規作成<br/>
(2015-01-06 21:50) 微調整<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知識ゼロから学ぶ ソフトウェアテストを読みました！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/software-test-knowledge-zero-start-book-review/"/>
    <updated>2015-01-03T20:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/software-test-knowledge-zero-start-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00HQ7S5CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00HQ7S5CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00HQ7S5CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00HQ7S5CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
少しでもバグの無いソフトを作るために、テストを基礎から勉強し直すために、『<strong><a href="http://www.amazon.co.jp/gp/product/B00HQ7S5CA/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00HQ7S5CA&amp;linkCode=as2&amp;tag=morizyun00-22">知識ゼロから学ぶ ソフトウェアテスト</a></strong>』を読みました。この本はソフトウェアのテストに関する大局的な知識がわかりやす言葉で書かれているので、まずテストに入門してみたいという人に読んでみて欲しい本です！</p>

<p>今回はこの中で特に心に残った部分を中心にメモしていきます！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>テストの心得</h2>

<p>『<strong>ソフトウェアテストで重要なのはどの部分にバグが出やすか、そこにどのようなテスト手法を適用すれば十分な品質が得られるかを知ることである。</strong>』これはその通り。闇雲にすべての箇所のテストはできないので、バグので易い場所を見極めて、十分な品質を得られるようにテストをしていくことが大切だと思います。</p>

<h2>ホワイトボックステスト: カバレッジテスト</h2>

<p>カバレッジテストはソフトウェアのすべての箇所を通るようにテストを行う事。ただし、『<strong>エラー処理や使われていないコードなど</strong>』はカバーできないことがあります。特に『<strong>要求仕様の間違い、機能の不足、データに関するバグ</strong>』は発見できないので特に注意してください。</p>

<h2>ブラックボックステスト</h2>

<p>ソフトウェアは『入力の処理、出力の処理、計算処理、データ保存』の4つしか行わない。その振る舞いを適切にテストすればいいというのがブラックボックステストの基本的概念です。ユーザーが使いそうなデータや、プログラムが許す最大値、最小値を使って、必要最低限のパターンのテストを行うことが大切です。</p>

<pre>
(1) 同値分割: 入力を部分集合で分割して、テストパターンをシンプルにする手法。有効値と無効値をテストに使う
(2) 境界値テスト: 同値分割とセットで使われる。有効値と無効値の境界を重点的にテストする
(3) 状態遷移のテスト: 状態遷移のタイミングで、意図していない遷移のバグや、存在しない遷移を検出する
</pre>


<h2>弱いエリアを見つけて重点的にテストする</h2>

<p>データの交換が発生する分野、他のソフトとイベントを共有する機能、エラーや例外処理からの復帰などソフトウェア的に弱い部分、言い換えるとバグを発生させやすい部分を重点的にテストすることで、より確実なテストが実行できます。</p>

<h2>あとがき</h2>

<p><a href="http://www.amazon.co.jp/gp/product/B00HQ7S5CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00HQ7S5CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00HQ7S5CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00HQ7S5CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />この本では比較的規模が大きめのソフトウェアを開発していく上で、必要となる品質管理や、俯瞰的にソフトウェアのテストを解説してくれています。大局的な知識を得ることで、普段のWeb開発の仕事の中で活かせそうな発見も沢山ありました。まず、ソフトウェアのテストについて全体的な知識を知りたいという人にオススメの本です！</p>

<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[switch_point ActiveRecordにメソッドを追加・変更する部分を勉強してみた]]></title>
    <link href="http://morizyun.github.io/blog/switch-point-swithcing-database-connection-readonly-writable-rails-gem/"/>
    <updated>2015-01-02T17:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/switch-point-swithcing-database-connection-readonly-writable-rails-gem</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1RU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1RU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1RU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
昨日DB関連の資料を調べていく中で興味があった『<strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point</a></strong>』がどんなふうに実装されているのかが、興味あって、ソースコードを読んでみました。特に興味があったのは、<code>ActiveRecord::Base</code>などにメソッドを追加したり、既存のメソッドに手を加える部分です。まだわかっていない部分も多いのでメモ書きレベルですが、一応せっかくなのでアウトプットしておきます！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>既存のActiveRecod::Baseにメソッドを生やす</h2>

<p>『<strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point - GitHub</a></strong>』の<code>switch_point/lib/switch_point.rb</code>で既存のActiveRecod::Baseにメソッドを生やす目的で次のようなコードが書かれていました。</p>

<p>{% codeblock lang:ruby %}
require 'active_support/lazy_load_hooks'</p>

<h1>...(省略)...</h1>

<h1>ActiveRecordが読み込まれたら以下のコードを実行する</h1>

<h1>第一引数(active_record)がフックのキー</h1>

<h1>第二引数のブロックが、ブロックを実行するためのコンテキスト</h1>

<p>ActiveSupport.on_load(:active_record) do
  require 'switch_point/model'
  require 'switch_point/connection'</p>

<p>  # SwitchPoint::ModelのメソッドをActiveRecord::Baseにinclude
  ActiveRecord::Base.send(:include, SwitchPoint::Model)</p>

<p>  # class_evalで動的にクラス・メソッドを定義
  ActiveRecord::ConnectionAdapters::AbstractAdapter.class_eval do</p>

<pre><code>include SwitchPoint::Connection

# insert, update, deleteメソッドのメソッドを上書き
# 中ではwritableなDBにつなぎに行っているかのチェックとクエリー・キャッシュをクリアしてからメソッドを実行
SwitchPoint::Connection::DESTRUCTIVE_METHODS.each do |method_name|
  alias_method_chain method_name, :switch_point
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>遅延読み込みフック lazy_load_hooks#on_load について</h2>

<p><code>on_load</code>は、ActiveSupportのLazyLoadの機能の一つで、ライブラリの読み込み後に実行したいコードを登録するための機能だそうです。サンプルとしてはこんなかんじです。</p>

<p>{% codeblock lang:ruby %}
require 'active_support/lazy_load_hooks'</p>

<h1>run_load_hooksが実行されていないので呼ばれない</h1>

<p>ActiveSupport.on_load :fuga do
  puts 'start 1st on load'
  fuga
  puts 'end 1st on load'
end</p>

<p>class Fuga
  def self.fuga</p>

<pre><code>puts 'fugafuga'
</code></pre>

<p>  end
end</p>

<p>puts 'before run_load_hooks'</p>

<h1>run_load_hooksを実行すると、4行目の ActiveSupport.on_load が呼ばれる</h1>

<p>ActiveSupport.run_load_hooks :fuga, Fuga
puts 'after run_load_hooks'</p>

<h1>run_load_hooks が実行されているのですぐに呼ばれる</h1>

<p>ActiveSupport.on_load :fuga do
  puts 'start 2st on load'
  fuga
  puts 'end 2st on load'
end</p>

<h1>実行結果</h1>

<h1>before run_load_hooks</h1>

<h1>start 1st on load</h1>

<h1>fugafuga</h1>

<h1>end 1st on load</h1>

<h1>after run_load_hooks</h1>

<h1>start 2st on load</h1>

<h1>fugafuga</h1>

<h1>end 2st on load</h1>

<p>{% endcodeblock %}</p>

<p>コードにちょこちょこ書いていますが、要はActiveSupport.run_load_hooksが実行されないと呼ばれないし、
ActiveSupport.run_load_hooksが呼ばれれば一緒に実行してくれるということっぽいです。</p>

<p>ここいらは、<strong><a href="">@eiel</a></strong>さんのRails Docの記事『<strong><a href="http://railsdoc.eiel.info/active_support/lazy_load_hooks/">RailsDoc - Lazy Load Hooks</a></strong>』を参考にさせて頂きました。最近Rails Docさんにはお世話になりっぱなしです！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>alias_method_chain について</h2>

<p><code>alias_method_chain</code>は、既存のメソッドを置き換えをしてくれます。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>active_supportのメソッドなのでrequireが必要</h1>

<p>require 'active_support/all'</p>

<p>module LogHelper</p>

<p>  def log(message)</p>

<pre><code>puts message
</code></pre>

<p>  end</p>

<p>  def log_with_timestamp(message)</p>

<pre><code>log_without_timestamp("[#{Time.now}] #{message}")
</code></pre>

<p>  end</p>

<p>  # 以下と同義
  # alias_method :log, :log_with_timestamp
  # alias_method :log_without_timestamp, :log
  alias_method_chain :log, :timestamp
end</p>

<p>include LogHelper
log('Hello') #=> [2015-01-02 11:45:01 +0900] Hello
{% endcodeblock %}</p>

<p>このメソッドには次のルールがあるそうです。</p>

<pre>
 (A) 前提
   alias_method_chain :xxx, :yyy

 (B) ルール
   (1) 上書きして呼び出すメソッドは、 xxx_with_yyy とする
   (2) 元となるメソッドは、 xxx_without_yyy とする
</pre>


<p>ちなみにActiveSupport(v4.2.0)の<code>alias_method_chain</code>のソースコードはこんなかんじです。
(わかりやすい＾＾)</p>

<p>{% codeblock lang:ruby %}
  def alias_method_chain(target, feature)</p>

<pre><code># Strip out punctuation on predicates, bang or writer methods since
# e.g. target?_without_feature is not a valid method name.
aliased_target, punctuation = target.to_s.sub(/([?!=])$/, ''), $1
yield(aliased_target, punctuation) if block_given?

with_method = "#{aliased_target}_with_#{feature}#{punctuation}"
without_method = "#{aliased_target}_without_#{feature}#{punctuation}"

alias_method without_method, target
alias_method target, with_method

case
when public_method_defined?(without_method)
  public target
when protected_method_defined?(without_method)
  protected target
when private_method_defined?(without_method)
  private target
end
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>シナジーマーケティングさんの、<strong><a href="http://www.techscore.com/blog/2013/02/27/rails-alias_method_chain-%E6%97%A2%E5%AD%98%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B%E5%B8%B8%E5%A5%97%E6%89%8B%E6%AE%B5/">» Rails: alias_method_chain: 既存の処理を修正する常套手段 TECHSCORE BLOG</a></strong>
がすごくわかりやすい説明を書いて頂けていたので参考にさせて頂きました。有難うございます！</p>

<h2>module#prepend について</h2>

<p><code>module#prepend</code>自体はswitch_pointには出てきませんが、調べていく中でRuby 2.0で導入されたメソッドの<code>module#prepend</code>は<code>alias_method_chain</code>を置き換える事ができるのを知りました。使い方としてはこんな感じ。</p>

<p>{% codeblock lang:ruby %}
module LoggingWithTimestamp</p>

<p>  def log(message)</p>

<pre><code># 呼び出し元のメソッドを呼び出す
super("[#{Time.now}] #{message}")
</code></pre>

<p>  end</p>

<p>end</p>

<p>class Logging
  # LoggingWithTimestampのlogが、Loggingのlogメソッドよりも優先して呼ばれる
  prepend LoggingWithTimestamp</p>

<p>  def log(message)</p>

<pre><code>puts message
</code></pre>

<p>  end
end</p>

<p>Logging.new.log('Hello') #=> [2015-01-02 12:23:15 +0900] Hello
{% endcodeblock %}</p>

<p><code>include</code>と<code>prepend</code>との使い分けは次の通り。</p>

<pre>
* include: 新しい機能を追加するために使う
  * モジュール側のメソッドはクラスのメソッドを上書きできない
  * クラス側のメソッドはモジュールのメソッドを上書きできる

* prepend: 既存の機能の変更をするために使う
  * モジュール側のメソッドはクラス側のメソッドを上書きでる
  * クラス側のメソッドはモジュール側のメソッドを上書きできない
</pre>


<p>こちらもシナジーマーケティングさんのブログ記事『<strong><a href="http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/">» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？</a></strong>』が図解も含めてすごくわかりやすい解説をしてくれています！</p>

<h2>あとがき</h2>

<p>今までなんの気なしに使ってきたライブラリですが、よく読んでみると色々と勉強になる部分が多くあります。
自分がライブラリ書くときに使えそうなTipsがあってすごい勉強になります！今度はテストとかも読んでみるつもりです！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://qiita.com/seanchas_t/items/ea47a1eb0969afcac2af">Rubyのdefine_method、class_evalで動的に定義されたメソッドの呼出コストを調べてみた - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 複数データベース関連の資料まとめ]]></title>
    <link href="http://morizyun.github.io/blog/multi-database-rails-active-record-model/"/>
    <updated>2015-01-01T23:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/multi-database-rails-active-record-model</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
お仕事で今、Railsアプリで複数DATABASEのサービスを開発していて、色々と悩むことが増えてきたので、勉強を兼ねてネットにあったドキュメントを収集していくつか読み込んでみました。俺得記事です。あともし良い資料とかあれば是非コメント下さい！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>クックパッドにおける最近のActiveRecord運用事情</h2>

<p><strong><a href="http://techlife.cookpad.com/entry/2014/08/28/194147">クックパッドにおける最近のActiveRecord運用事情 - クックパッド開発者ブログ</a></strong></p>

<h3>マイグレーションは使っていない</h3>

<p>1,500以上のモデルがあり、複数人が作業しているため、互いの作業をブロックしないためにもマイングレーションでの運用は行っていない。</p>

<h3>スキーマ管理ツール: Ridgepole</h3>

<h4><strong><a href="https://github.com/winebarrel/ridgepole">winebarrel/ridgepole - GitHub</a></strong></h4>

<p>スキーマ管理ツール。テーブル定義ファイルにカラムを書き足すと、実際のDBのテーブル定義と比較して、
差分があればその分だけ<code>ALTER TABLE</code>を行ってくれるそうです。</p>

<h3>複数 DB、R/W splitting: switch_point</h3>

<h4><strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point</a></strong></h4>

<p>クックパッドでは、複数DBで書き込みはマスター、読み込みはスレーブに振り分けている(R/W Splitting)そうです。
この運用をサポートしてくれるライブラリとして、switch_pointを使っているそうです。</p>

<h3>コネクションプーリングの切断: activerecord-refresh_connection</h3>

<h4><strong><a href="https://github.com/sonots/activerecord-refresh_connection">sonots/activerecord-refresh_connection</a></strong></h4>

<p>複数スレーブに負荷分散したり、MHA でフェイルオーバーするときに、ActiveRecordのコネクションプーリングは相性が悪いそうです。その対策として、DeNAのそのっつさんが作られた『<strong><a href="https://github.com/sonots/activerecord-refresh_connection">sonots/activerecord-refresh_connection</a></strong>
』を使っているそうです。</p>

<p>ちなみに、ActiveRecordのコネクションプーリングの解説はそのっつさんのブログに詳しく書かれています。</p>

<p><strong><a href="http://blog.livedoor.jp/sonots/archives/38797925.html">[Ruby] 例えば、ActiveRecord の connection_pool を止める - sonots:blog</a></strong></p>

<h2>複数DBとRails @ クックパッドさん</h2>

<p><strong><a href="https://speakerdeck.com/eagletmt/fu-shu-dbtorails">複数DBとRails // Speaker Deck</a></strong></p>

<p>こちらは2014年の11月に開催された『<strong><a href="http://connpass.com/event/9560/">Rails複数DB Casual Talk</a></strong>』でのクックパッドの<strong><a href="https://twitter.com/eagletmt">@eagletmt</a></strong>さんの発表スライド。Rails 3.2 => 4.0にアップデートした時の複数DBの課題や、現在の運用上の課題などが中心に書かれています。</p>

<h2>Mobage を支える Ruby の技術 ~ 複数DB編 ~ @ DeNAさん</h2>

<p><strong><a href="http://www.slideshare.net/sonots/mobage-ruby-db">Mobage を支える Ruby の技術 ~ 複数DB編 ~</a></strong></p>

<p>同じく『<strong><a href="http://connpass.com/event/9560/">Rails複数DB Casual Talk</a></strong>』でDeNAの<strong><a href="http://blog.livedoor.jp/sonots/archives/41221632.html">@sonots</a></strong>さんが発表されたスライド。</p>

<p><strong><a href="https://github.com/sonots/resolver_replace">sonots/resolver_replace</a></strong></p>

<p>RubyのDNS resolver(名前解決)の部分を行うためのgem。独自のDNSキャッシュを行う仕組み等がある場合に用いるといいそうです。確かこの辺りの話はPodcastの『<strong><a href="http://admins.bar/3/">Admin Bar #3</a></strong>』でお話されてた気がします。</p>

<p>activerecord-refresh_connectionやswitch_pointが実際に活用されていたり、更なるインフラ要件などの話など内容が充実していました！</p>

<h2>ソーシャルゲームでDB水平分散 @ ドリコムさん</h2>

<p><strong><a href="https://speakerdeck.com/gussan/sosiyarugemudedbshui-ping-fen-san-number-mdb-casual">ソーシャルゲームでDB水平分散 #mdb_casual // Speaker Deck</a></strong></p>

<p>こちらも開催された『<strong><a href="http://connpass.com/event/9560/">Rails複数DB Casual Talk</a></strong>』でのドリコムの<strong><a href="https://twitter.com/gussan">@gussan</a></strong>さんの発表スライド。ソシャゲの場合は、大量のアクセスが来ることを前提としているので、複数DBにアクセスを分散させるための仕組みとして、『<strong><a href="https://github.com/drecom/activerecord-turntable">drecom/activerecord-turntable</a></strong>』を使っているそうです。</p>

<h4><strong><a href="https://github.com/drecom/activerecord-turntable">drecom/activerecord-turntable</a></strong></h4>

<p>この『<strong><a href="https://github.com/drecom/activerecord-turntable">drecom/activerecord-turntable</a></strong>』というGemは、ID単位でアクセスするDBを振り分けているそうです。シャーディングと呼ばれる手法だそうです。ただしシャーディングを行う場合は、機能制限やDB系のプラグインが使えなくなることがあるようです。そのため、シャーディングが必要なほどのアクセスが有る場合は、アプリ全体を組み直す必要があるようです。</p>

<h4><strong><a href="https://github.com/drecom/barrage">drecom/barrage</a></strong></h4>

<p>この『<strong><a href="https://github.com/drecom/barrage">drecom/barrage</a></strong>』は、DB単位でIDを採番すると衝突が発生するため、クラスタ単位でユニークな採番ができるようにするためのライブラリだそうです。</p>

<h2>octopus: データベースのシャーディングGem</h2>

<h4><a href="https://github.com/tchandy/octopus">tchandy/octopus</a></h4>

<p>Rails用のシャーディングのGemの中ではおそらく一番手位有名なライブラリ。</p>

<p>使い方としてはこんな感じだそうな。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>slave_oneを指定して、SQLを実行</h1>

<p>User.where(:name => "Thiago").limit(3).using(:slave_one)</p>

<h1>ブロックでslave_twoを指定して、SQLを実行</h1>

<p>Octopus.using(:slave_two) do
  User.create(:name => "Mike")
end
{% endcodeblock %}</p>

<h2>あとがき</h2>

<p>規模が大きくなっていく過程で、DBをスケールさせるための試みを知ることが出来ました。
前にバズってた時は上辺だけ見ていた気がしましたが、今回じっくり読み込んだおかげでやっと少し内容に追いつけました！あとでソースコード読んでみます＾＾</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(01-01 23:05) 『Mobage を支える Ruby の技術 ~ 複数DB編 ~』を追加</p>
]]></content>
  </entry>
  
</feed>
