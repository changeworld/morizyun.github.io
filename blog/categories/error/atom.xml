<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Error | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/error/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T20:26:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rambulance Rails 4.2時代の簡単 404/500エラー対応]]></title>
    <link href="http://morizyun.github.io/blog/rambulance-error-handling-ruby-gem-rails/"/>
    <updated>2015-02-01T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rambulance-error-handling-ruby-gem-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=477416366X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=477416366X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近作っているRailsアプリで、404/500エラーの対応をしている時に知ったgem 『<strong><a href="https://github.com/yuki24/rambulance">yuki24/rambulance</a></strong>』
の紹介です。</p>

<p>一言で言うと、ものすごく簡単にRailsのエラーハンドリングを行ってくれつつ、エラーページを構築できるgemです。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>インストール手順</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加。</p>

<p>{% codeblock lang:bash %}</p>

<h1>Error handling</h1>

<p>gem 'rambulance'
{% endcodeblock %}</p>

<p>そして以下のコマンドを実行してインストールしてください。(pathは適宜変更)</p>

<p>{% codeblock lang:bash %}
bundle install --path vendor/bundle --jobs=4
{% endcodeblock %}</p>

<h2>環境設定</h2>

<p>エラーページのviewや、設定ファイルを生成してくれます。</p>

<p>{% codeblock lang:bash %}
rails g rambulance:install</p>

<h1>generating templates:</h1>

<h1>create  app/views/errors/bad_request.html.haml</h1>

<h1>create  app/views/errors/forbidden.html.haml</h1>

<h1>create  app/views/errors/internal_server_error.html.haml</h1>

<h1>create  app/views/errors/not_found.html.haml</h1>

<h1>create  app/views/errors/unprocessable_entity.html.haml</h1>

<h1>create  app/views/errors/bad_request.json.jbuilder</h1>

<h1>create  app/views/errors/forbidden.json.jbuilder</h1>

<h1>create  app/views/errors/internal_server_error.json.jbuilder</h1>

<h1>create  app/views/errors/not_found.json.jbuilder</h1>

<h1>create  app/views/errors/unprocessable_entity.json.jbuilder</h1>

<p>#</p>

<h1>generating initializer:</h1>

<h1>create  config/initializers/rambulance.rb</h1>

<p>{% endcodeblock %}</p>

<h2>エラーごとに表示するページを変更</h2>

<p>エラーごとに表示するページを変更するには、<code>config/initializers/rambulance.rb</code>を適宜変更してください。
また、個人的にlayoutは<code>nil</code>にしておくほうがはまりにくいと思います！</p>

<p>{% codeblock lang:ruby %}</p>

<h1>エラーページのハンドリング方法はこんな感じ</h1>

<p>config.rescue_responses = {
  # "ActiveRecord::RecordNotUnique" => :unprocessable_entity,
  # "CanCan::AccessDenied"          => :forbidden,
  # "Pundit::NotAuthorizedError"    => :forbidden,
  # "YourCustomException"           => :not_found
}</p>

<h1>エラーページのレイアウトはnilにしておくのがオススメ</h1>

<p>config.layout_name = nil
{% endcodeblock %}</p>

<h2>開発環境での確認方法</h2>

<p><code>config/environments/development.rb</code>に以下を追記したら、開発環境でエラーが出た際にrambulanceのエラー画面が表示されます。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>--------------------------------</h1>

<h1>Error Handling</h1>

<h1>--------------------------------</h1>

<p>config.consider_all_requests_local = false
{% endcodeblock %}</p>

<h2>エラー処理を独自実装したい場合</h2>

<p>もしエラー処理を独自実装したい場合は以下のコマンドでエラー処理用のひな形を生成してくれます。</p>

<p>{% codeblock lang:bash %}
rails g rambulance:exceptions_app</p>

<h1>create  app/handlers/exceptions_app.rb</h1>

<p>{% endcodeblock %}</p>

<p>ちなみに、最初はエラー通知をAirbrakeで自分でコードを書いて通知させていたんですが、作者の<strong><a href="https://twitter.com/yuki24">@yuki24</a></strong>
から、Airbrakeのミドルウェアがやってくれるから、自作しなくていいという話を教えてもらいました。有難うございます！</p>

<p>まだ、使い始めて日が浅いので間違い等あればコメントよろしくお願いします！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(2015-01-31 11:55) 新規作成
(2015-02-01 11:30) Airbrakeの自作通知ハンドラーを削除</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsの404/500エラーページ、簡単作成手順]]></title>
    <link href="http://morizyun.github.io/blog/custom-error-404-500-page/"/>
    <updated>2015-01-25T11:25:00+09:00</updated>
    <id>http://morizyun.github.io/blog/custom-error-404-500-page</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048867725/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048867725&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048867725&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048867725" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsアプリで簡単に自分で作った404/500エラーページを表示させる手順です。404/500エラーページもユーザビリティの面やコンバージョンの面で非常に重要ですよね！</p>

<p>あるRailsアプリでルーティング系のエラーはルートにリダイレクトするようにしていたのですが、SEO的にはNGだと知りました。『<strong>ソフト404エラー</strong>』と呼ばれており、ルーティングがないのに404ステータスを返さないのは検索エンジンさん的には無しだそうです。ということで、Webサービスを作るときにはルーティングと、エラー時の挙動をしっかり制御したほうがいいと反省中です。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>routes.rbでのルーティングの修正</h2>

<p><code>config/initializers/production.rb</code></p>

<h2>ApplicationControllerにエラー発生時のメソッドを追加</h2>

<p><code>app/controllers/application_controller.rb</code>にエラー発生時のためのメソッドを追加。</p>

<p>{% codeblock lang:ruby %}
class ApplicationController &lt; ActionController::Base
  # 例外ハンドル
  if !Rails.env.development?</p>

<pre><code>rescue_from Exception,                        with: :render_500
rescue_from ActiveRecord::RecordNotFound,     with: :render_404
rescue_from ActionController::RoutingError,   with: :render_404
</code></pre>

<p>  end</p>

<p>  def routing_error</p>

<pre><code>raise ActionController::RoutingError.new(params[:path])
</code></pre>

<p>  end</p>

<p>  def render_404(e = nil)</p>

<pre><code>logger.info "Rendering 404 with exception: #{e.message}" if e

if request.xhr?
  render json: { error: '404 error' }, status: 404
else
  format = params[:format] == :json ? :json : :html
  render template: 'errors/error_404', formats: format, status: 404, layout: 'application', content_type: 'text/html'
end
</code></pre>

<p>  end</p>

<p>  def render_500(e = nil)</p>

<pre><code>logger.info "Rendering 500 with exception: #{e.message}" if e
Airbrake.notify(e) if e # Airbrake/Errbitを使う場合はこちら

if request.xhr?
  render json: { error: '500 error' }, status: 500
else
  format = params[:format] == :json ? :json : :html
  render template: 'errors/error_500', formats: format, status: 500, layout: 'application', content_type: 'text/html'
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p><code>errors/error_404</code>、<code>errors/error_500</code>は動的にページを生成する場合の設定方法です。ちなみに静的なページにしたい場合は上のコードの<code>render</code>の部分を以下のように変更。</p>

<p>{% codeblock lang:bash %}
render file: Rails.root.join('public/404.html'), status: 404, layout: false, content_type: 'text/html'
{% endcodeblock %}</p>

<h2>カスタムエラー用のViewの作成</h2>

<p><code>app/views/errors/error_404.html.haml</code>と<code>app/views/errors/error_500.html.haml</code>を作成して404/500エラー時のViewを作成。</p>

<p>たったこれだけで、404/500エラー発生時のユーザーの印象を改善できると思います。ぜひチャレンジしてみて下さい！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://memo.yomukaku.net/entries/8">Railsでカスタムな404エラーのページを出力する方法 - memo.yomukaku.net</a></strong></p>

<p><strong><a href="http://ar156.dip.jp/tiempo/publish/52">Rails3の全体的な例外ハンドル - Tiempo</a></strong></p>

<p><strong><a href="http://stackoverflow.com/questions/2385799/how-to-redirect-to-a-404-in-rails">http status code 404 - How to redirect to a 404 in Rails? - Stack Overflow</a></strong></p>

<h2>更新履歴</h2>

<p>(12-07 15:40) 変なフォーマットを指定された時の対応</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSLエラー Certificate Verify Failed[RVMエラー][Rails][Mac限定]]]></title>
    <link href="http://morizyun.github.io/blog/rvm-ruby-rails-certificate-verify-failed/"/>
    <updated>2013-06-21T07:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rvm-ruby-rails-certificate-verify-failed</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797371838/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797371838&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797371838&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797371838" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />RVM環境のRailsで<code>https</code>プロトコルのURLにアクセスをしたところ下記のエラーが発生しました。</p>

<p>{% codeblock lang:ruby %}
openssl::ssl::sslerror: ssl_connect returned=1 errno=0 state=sslv3 read server certificate b: certificate verify failed
{% endcodeblock %}</p>

<p>ということで対策法を見つけたので、念のためメモしておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>RVMのSSL証明書を更新</h2>

<p>まずは、RVMを最新に更新。</p>

<p>{% codeblock lang:bash %}
rvm get head
{% endcodeblock %}</p>

<p>つづいて、RVMのSSL証明書を更新。</p>

<p>{% codeblock lang:bash %}
rvm osx-ssl-certs update all</p>

<h1>Updating certificates...と出れば成功</h1>

<p>{% endcodeblock %}</p>

<p>これで私の環境下では<code>https</code>にアクセスできるようになりました。</p>

<h2>自動的にSSL証明書を更新する</h2>

<p>SSL証明書は定期的にダメになるっぽいです。なので、自動でSSLを更新するように設定する方法です。</p>

<p>{% codeblock lang:bash %}
sudo rvm osx-ssl-certs cron install
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://railsapps.github.io/openssl-certificate-verify-failed.html">OpenSSL Errors and Rails – Certificate Verify Failed · RailsApps</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby] Reactorパターンについて]]></title>
    <link href="http://morizyun.github.io/blog/reactor-pattern-ruby/"/>
    <updated>2013-06-20T16:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/reactor-pattern-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4844333755/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4844333755&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4844333755&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4844333755" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Reactorパターンとは、複数の入力による同時並行なリクエストを扱うための並列プログラミングパターンのことです。ネットワークなどのI/O待ち時間の影響を最低限にすることができるそうです。</p>

<p>例えばWebサーバは複数のユーザーのブラウザからリクエストを受けます。この複数のリクエストをうまく一つづつ捌くときなどに活躍してくれます。</p>

<p>今回はこのReactorパターンを勉強した際のメモ的記事です。ツッコミ大歓迎です！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>EventMachine</h2>

<p>RubyのReactorパターンの実装を協力にたすけてくれるフレームワークが「<strong>EventMachine</strong>」です。EventMachineはソケットの受信待機、ネットワーク接続の確立、タイマー処理、長時間かかるタスクをバックグラウンドなスレッドに回すことができるスレッドプールを提供してくれます。</p>

<h2>EventMachine/em-http-request</h2>

<p>では、EventMachineとEventMachineでのHTTPによる通信をサポートしてくれるGem「<strong><a href="https://github.com/igrigorik/em-http-request">em-http-request</a></strong>」をつかって複数のWebサイトにアクセスするサンプルソースを作っていきます。</p>

<p>まずは、Gem <code>em-http-request</code>をinstall。</p>

<p>{% codeblock lang:ruby %}
gem install em-http-request
{% endcodeblock %}</p>

<p>次にWebサイトにアクセスするサンプルソースのコード。</p>

<p>{% codeblock lang:ruby %}
require 'eventmachine'
require 'em-http-request'</p>

<p>URL = 'https://twitter.com'</p>

<p>EM.run do
  1.upto(5) do |i|</p>

<pre><code># 5回URLを取得するリクエストを出す
http = EM::HttpRequest.new(URL).get(
  :path =&gt; '/',
  :query =&gt; '')
# レスポンスが帰ってきたら呼び出される
call_back = proc do
  puts http.response
  EM.stop if i == 5 # 5回レスポンスを取得したら終了
end
http.callback(&amp;call_back)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>テストの際は、自分のサーバに対して行うことをおすすめします。</p>

<p>実際はもう少し例を増やしてまとめたかったんですが、まだまだ勉強不足な点を痛感中。
<strong>Special Thanks</strong>に書いたサイトさん方はとってもわかりやすいんでよかったら、そちらもご覧ください。</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://osamunmun.blogspot.jp/2013/03/ruby-eventmachine.html">osamunmunのblog: [Ruby] Eventmachineを使った非同期処理</a></p>

<p><a href="http://keijinsonyaban.blogspot.jp/2010/12/eventmachine.html">見えないチカラ: 【翻訳】EventMachine入門</a></p>

<p><a href="http://satoryu-diary.cloudfoundry.com/20121113.html#f20121113-01-02">今更だけど、em-http-requestの使い方をまとめておく - Satoryu's Diary(2012-11-13)</a></p>
]]></content>
  </entry>
  
</feed>
