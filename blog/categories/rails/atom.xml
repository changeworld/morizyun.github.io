<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-03T21:42:34+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearchを使ったRialsサンプルアプリの作成]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-rails-tutorial/"/>
    <updated>2016-01-03T21:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-rails-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00J4KDYZU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00J4KDYZU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00J4KDYZU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ElasticsearchをRailsで使うためのサンプルアプリの作成の手順を作りました。入門レベルです！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Elasticsearchの導入</h2>

<p>拙著『<strong><a href="/blog/elasticsearch-kibana-setup-mac/">Elasticsearch 2.1 + Kibana 4.1 + Marvel のMacへのセットアップ</a></strong>』を良ければご参考ください。</p>

<h2>Rails サンプルアプリ</h2>

<p>Railsのサンプルアプリを作成します。今回は <code>Article</code>(記事) のモデルを持つことにします。</p>

<p>```</p>

<h1>Railsアプリの作成</h1>

<p>rails new elasticsearch_sample --skip-bundle</p>

<h1>フォルダを移動</h1>

<p>cd elasticsearch_sample</p>

<h1>DBの作成</h1>

<p>rake db:create</p>

<h1>article テーブルの定義を作成</h1>

<p>bundle exec rails g scaffold article title:string body:text</p>

<h1>article テーブルを作成</h1>

<p>bundle exec rake db:migrate
```</p>

<p>GemfileにElasticsearch用のgemを追加します。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<h1>Elasticsearch</h1>

<p>gem 'elasticsearch-model', git: 'git://github.com/elasticsearch/elasticsearch-rails.git'
gem 'elasticsearch-rails', git: 'git://github.com/elasticsearch/elasticsearch-rails.git'
```</p>

<p>追加したらターミナルで以下のコマンドを実行してgemをインストールします。</p>

<p><code>
bundle install --jobs=4 --path=vendor/bundle
</code></p>

<h2>ModelにElasticsearchを使うための設定</h2>

<p>次に<code>Article</code>モデルにElasticsearchを使うための設定をします。</p>

<p>```ruby</p>

<h1>app/models/article.rb</h1>

<p>class Article &lt; ActiveRecord::Base
  include ArticleSearchable
end
```</p>

<p>今回はconcernにElasticsearchに関する処理を切り出します。</p>

<p>```ruby</p>

<h1>app/models/concerns/article_searcable.rb</h1>

<p>module ArticleSearchable
  extend ActiveSupport::Concern</p>

<p>  included do</p>

<pre><code>include Elasticsearch::Model

# インデックスするフィールドの一覧
INDEX_FIELDS = %w(title body).freeze

# インデックス名
index_name "es_sample_article_#{Rails.env}"

# マッピング情報
settings do
  mappings dynamic: 'false' do # 動的にマッピングを生成しない
    indexes :title, analyzer: 'kuromoji', type: 'string'
    indexes :body,  analyzer: 'kuromoji', type: 'string'
  end
end

# インデックスするデータを生成
# @return [Hash]
def as_indexed_json(option = {})
  self.as_json.select { |k, _| INDEX_FIELDS.include?(k) }
end
</code></pre>

<p>  end</p>

<p>  module ClassMethods</p>

<pre><code># indexの作成メソッド
def create_index!
  client = __elasticsearch__.client
  client.indices.delete index: self.index_name rescue nil
  client.indices.create(index: self.index_name,
                        body: {
                            settings: self.settings.to_hash,
                            mappings: self.mappings.to_hash
                        })
end
</code></pre>

<p>  end
end
```</p>

<p>インデックス名には環境情報をつけておきます。</p>

<p>理由はlocalでのテストをしやすくするためです。</p>

<h2>index作成のrakeタスクを作成</h2>

<p>続いてindexを作成するrake タスクを作ります。</p>

<p>まずはrakeタスクを作成するために、以下のコマンドをターミナルで実行します。</p>

<p><code>
rails g task elasticsearch
</code></p>

<p>作成されたrakeタスクを以下の様に変更します。</p>

<p>```ruby</p>

<h1>lib/tasks/elasticsearch.rake</h1>

<p>namespace :elasticsearch do
  desc 'Elasticsearch のindex作成'
  task :create_index => :environment do</p>

<pre><code>Article.create_index!
</code></pre>

<p>  end</p>

<p>  desc 'Article を Elasticsearch に登録'
  task :import_article => :environment do</p>

<pre><code>Article.import
</code></pre>

<p>  end
end
```</p>

<p>ではインデックスを作成します。</p>

<p><code>
bundle exec rake elasticsearch:create_index
</code></p>

<p><code>http://localhost:9200/_plugin/head/</code> にアクセスして「es_sample_article_development => info => Metadata」
の中身が以下の様になっていたら成功です！</p>

<p><img src="https://farm2.staticflickr.com/1510/24062169671_9781dc7e17_z.jpg" width="556" height="640"></p>

<p>ちなみに、curlコマンドでもマッピングを確認できます。
ターミナルで以下のコマンドを実行してみてください。</p>

<p>```
curl -XGET 'localhost:9200/es_sample_article_development/_mapping/article?pretty=true'
{
  "es_sample_article_development" : {</p>

<pre><code>"mappings" : {
  "article" : {
    "dynamic" : "false",
    "properties" : {
      "body" : {
        "type" : "string",
        "analyzer" : "kuromoji"
      },
      "title" : {
        "type" : "string",
        "analyzer" : "kuromoji"
      }
    }
  }
}
</code></pre>

<p>  }
}
```</p>

<h2>サンプルデータの作成</h2>

<p>サンプルデータを作成します。</p>

<p>```ruby</p>

<h1>db/seeds.rb</h1>

<p>ActiveRecord::Base.transaction do
  # ===========================
  # 記事(Article)
  # ===========================
  Article.delete_all
  10.times do |idx|</p>

<pre><code>Article.create!(
    title: "タイトル #{idx}",
    body: "本文 #{idx}"
)
</code></pre>

<p>  end
end
```</p>

<p>Elasticsearchにデータを登録します。</p>

<p>```</p>

<h1>サンプルデータの生成</h1>

<p>bundle exec rake db:seed</p>

<h1>Elasticsearchへの登録</h1>

<p>bundle exec rake elasticsearch:import_article
```</p>

<p><code>http://localhost:9200/_plugin/head/</code> から「Structured Query」を選択して色々いじるとデータが格納されていることがわかると思います！</p>

<p><img src="https://farm2.staticflickr.com/1607/24037229962_fc29541c95.jpg" width="500" height="346"></p>

<p>ちなみに、<code>rails console</code> からでも色々試せるのでぜひ色々遊んでみてください！</p>

<p>```ruby
Article.search('9').results.count</p>

<h1>=> 1</h1>

<p>Article.search('9').results.first</p>

<h1>=> #&lt;Elasticsearch::Model::Response::Result:0x007fb7ebac0a08 @result=#&lt;Hashie::Mash <em>id="10" </em>index="es_sample_article_development" <em>score=1.1972358 </em>source=#&lt;Hashie::Mash body="本文 9" created_at="2016-01-03T11:02:46.578Z" id=10 title="タイトル 9" updated_at="2016-01-03T11:02:46.578Z"> _type="article">></h1>

<p>Article.search(query: {term: {title: "5"} }).records.first</p>

<h1>=> Article Load (0.1ms)  SELECT "articles".* FROM "articles" WHERE "articles"."id" = 6</h1>

<h1>=> #<Article id: 6, title: "タイトル 5", body: "本文 5", created_at: "2016-01-03 11:02:46", updated_at: "2016-01-03 11:02:46"></h1>

<p>```</p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/k-shogo/items/8657e0a5fdf20a25bba0">Ruby - railsから全文検索エンジンelasticsearchを利用する - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/moriyaman/items/373107a3870c33229bac">既存のRailsアプリの検索にElasticSearchを導入してみる - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/yuku_t/items/d749111f589c88c8315b">Elasticsearch - Qiitaがquery-stringっぽい構文を自前実装した理由 - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rails - Rakeタスクをつくる - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails初学者向け】Nokogiriをつかって他のWebサイトから情報を取得しよう]]></title>
    <link href="http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer/"/>
    <updated>2016-01-01T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797376279/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797376279&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797376279&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797376279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ここでは、Rails初学者向けにWebサイトから情報を収集してくるチュートリアルを紹介します。
Nokogiriを使ったサンプルアプリを作ります！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Nokogiriの基本的な説明</h2>

<p><strong><a href="http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/">Nokogiri を使った Rubyスクレイピング</a></strong></p>

<h2>プロジェクトを作成</h2>

<h3>ローカル開発の場合</h3>

<p>ターミナルで以下のコマンドを実行してください。</p>

<p>```</p>

<h1>新しいRailsアプリを作成</h1>

<p>rails new web_scraping_sample --skip-bundle</p>

<h1>web_scraping_sample のフォルダに移動</h1>

<p>cd web_scraping_sample
```</p>

<h3>Cloud 9の場合</h3>

<ul>
<li>『<strong><a href="https://c9.io/">Cloud9</a></strong>』にログインして新しいworkspaceを作成</li>
<li>公開していい場合は public 、公開したくない場合は private のRailsアプリを作成してください</li>
</ul>


<h2>Gemfileに以下を追加</h2>

<p>プロジェクト直下のGemfileを開いて以下を追加して下さい。</p>

<p>```ruby</p>

<h1>Web Scraping</h1>

<p>gem 'nokogiri'
```</p>

<p>追加したらターミナルで以下のコマンドを実行します。</p>

<p><code>
bundle install --jobs=4 --path=vendor/bundle
</code></p>

<p>Ruby Gemライブラリをインターネットから持ってきて、自動でローカルに保存します。</p>

<h2>rake タスクの作成</h2>

<p>Rakeタスクを作成します。ターミナルで以下のコマンドを実行してください。</p>

<p>```</p>

<h1>railsコマンドで rake タスク を作成(generate)します</h1>

<p>rails g task scrape
```</p>

<p>すると、<code>lib/tasks/scrape.rake</code> が作成されます。</p>

<p>ちなみに、<code>Rake</code> とはRubyで記述されたプログラムをコマンドプロンプト(ターミナル)から呼び出し、実行することができる仕組みのことです。</p>

<p>rakeタスクをもう少し知りたい場合は、「<strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rakeタスクをつくる</a></strong>」がオススメです！</p>

<h2>取得スクリプトを書く</h2>

<p>今回は NaverまとめのTechページからタイトルの一覧を取得する手順です。</p>

<p><code>lib/tasks/scrape.rake</code>を開いて以下の内容を追記してください。</p>

<p>```ruby</p>

<h1>URLにアクセスするためのライブラリの読み込み</h1>

<p>require 'open-uri'</p>

<p>namespace :scrape do</p>

<p>  desc 'NaverまとめのTechページからタイトルを取得'
  task :naver_title => :environment do</p>

<pre><code># スクレイピング先のURL
url = 'http://matome.naver.jp/tech'

charset = nil
html = open(url) do |f|
  charset = f.charset # 文字種別を取得
  f.read # htmlを読み込んで変数htmlに渡す
end

# htmlをパース(解析)してオブジェクトを作成
doc = Nokogiri::HTML.parse(html, nil, charset)

doc.xpath('//li[@class="mdTopMTMList01Item"]').each do |node|
  # タイトルの取得
  puts node.css('h3').inner_text
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>これを実行すると以下の様になります。</p>

<p>```
bundle exec rake scrape:naver_title</p>

<h1>=> 写真撮って探しものができるアプリ3選</h1>

<h1>=> 洋楽好き必見！！音楽の世界が広がるアプリ７選</h1>

<h1>=> スマホやPCの「ブルーライト」の量が破壊的！健康対策は大丈夫？</h1>

<h1>=> 趣味はかどるわー！ディープなSNSがこんなにあった(ﾟдﾟ)</h1>

<h1>=> ちょっとしたシーンで役立つ１０のショートカットキー</h1>

<h1>=> ネイルでスマホを操れる？『爪センサー』が画期的</h1>

<h1>=> 壁を有効活用したい・・！お洒落な「壁掛けアイテム」たち</h1>

<h1>=> Googleも開始。「パスワードなし」でログインの時代キタ？</h1>

<h1>=> イヤホンの音がクリアに…！身近ガジェットの簡単お手入れ法</h1>

<h1>=> 日本にもこれ欲しい！海外で発売されている斬新な便利グッズ</h1>

<h1>=> 次々と数億円を集めるスタートアップが魅力的だった</h1>

<h1>=> ３Dじゃない方のプリンターも面白いのがたくさんあった</h1>

<h1>=> なにこれスゴい！自転車を盗んだヤツを見つける最新グッズ</h1>

<h1>=> トラックボールで作業効率UP！もうマウスなんて使わない！</h1>

<h1>=> 可視化でわかりやすく！医療の見える化が思った以上に見えている！</h1>

<h1>=> 眠れない夜にさよなら「本当に熟睡出来る」評判の快眠アプリ5選</h1>

<h1>=> エネループの代わりになる「おしゃれな」充電池たち</h1>

<h1>=> なにこれすごい…アメリカ軍の開発が未来を先取りしてる</h1>

<h1>=> 手に着けるだけのリストバンド型ガジェットで健康を記録する</h1>

<h1>=> AppleWatchピンチ？進化したスマートウォッチのいま</h1>

<p>```</p>

<h2>Nokogiriで参考になりそうなサイト</h2>

<p>実際にNokogiriのコードを書くときに役に立ちそうなチートシート的なサイトを紹介しておきます。</p>

<ul>
<li><strong><a href="http://d.hatena.ne.jp/otn/20090509/p1">スクレイピングのためのNokogiri利用メモ</a></strong></li>
</ul>


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://www.u-ziq.com/blog/2007/12/ruby_on_rails.html">初心者向けのRuby on Railsの用語説明</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/rails-learning-start-dash-slide/"/>
    <updated>2015-12-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-learning-start-dash-slide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774178020/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774178020&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774178020&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774178020" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
2015/12/22に社内勉強会で「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表をしてきました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>発表スライド</h2>

<p>まずは発表スライドはこちら！</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/h23sQZZPbyzwK6" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2>特に伝えたかったこと</h2>

<ul>
<li>Web開発は、git/javascript/css/ruby/CI等々覚えることたくさんで大変</li>
<li>新しい技術もどんどん生まれていくので、学び続けることが大切</li>
<li>学び続けるためには、「楽しむこと」。楽しめるものを見つけよう</li>
<li>Railsは日本語ドキュメント充実してるから、Web 開発を始めたいなという人におすすめ</li>
</ul>


<h2>オススメリンク</h2>

<ul>
<li>(開発環境)

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac / Rails開発環境構築手順</a></strong></li>
<li><strong><a href="https://c9.io/">Windows / Cloud9</a></strong></li>
</ul>
</li>
<li>(最初) <strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファーストガイド</a></strong></li>
<li>(脱初心者) <strong><a href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/">Ruby on Rails を仕事にしていくための第一歩(Rails Tutorialの巻末掲載)</a></strong></li>
<li>(神ポスト) <strong><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに 使えそうなイディオムとか便利メソッドとか</a></strong></li>
<li>(オススメ書籍) <strong><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873115655&amp;linkCode=as2&amp;tag=morizyun00-22">リーダブルコード</a></strong></li>
<li>(オススメ書籍) <strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecに よるRailsテスト入門</a></strong></li>
<li>(Gemの検索) <strong><a href="https://www.ruby-toolbox.com/">The Ruby toolbox</a></strong></li>
</ul>


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review/"/>
    <updated>2015-01-12T22:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review</id>
    <content type="html"><![CDATA[<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
が、RSpec3に対応したとの噂を聞いて1年ぶりに読み直しました。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアル
としてRspecの実践的な使い方が習得できる素晴らしい本です。</p>

<p>今回は『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
を読んでいく中で、特に印象に残った部分を中心にピックアップしていきます。ブログ駆動勉強ですw</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Everyday Railsのサンプルソース</h2>

<p><strong><a href="https://github.com/everydayrails/rspec_rails_4">everydayrails/rspec_rails_4 - GitHub</a></strong></p>

<p>この書籍ではできるだけRspecやテストに集中できるようにサンプルソースが用意されています。しかもRails4対応と至れり尽くせりです。素晴らしい！
ターミナルで以下のコマンドを実行すると、ローカルにソースコードをダウンロードできます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/everydayrails/rspec_rails_4.git
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>自分でコードを書く</h2>

<p>勉強をするときにコピペをするのではなく、自分でコードをタイピングしていくべき。
これは最近学習によって得られる知識がかなり変わることを実感しているのですごく共感できます！</p>

<h2>テスト設計について</h2>

<p>TDDで動くコードを書く前にRSpecのexample(itで始まる行)まで書いてテスト設計する。
いつもテストが先か、コードが先かで悩んでいました。この理由の一つは動かない状態のテストの設計をどこに
書くかでしたが、この本を読んでいく中でこういうふうに先に設計すればTDDの流れの中で開発できるんだと感激ました＾＾</p>

<h2>絶対に覚えておきたいRSpecを書くときの基本</h2>

<pre>
* Specアウトラインをベースに考える
* example(itで始まる行)は原因究明しやすいように結果を1つに絞る
* 期待する結果は能動形、具体的に記述すること
* 「起きてほしいこと、起きてほしくないこと」の両方のテストを書くこと
* 境界値テストをすること
* スペックの可読性を高めることに努めること
</pre>


<h2>コントローラスペックについて</h2>

<p>feature specに比べてコントローラスペックのほうが、少ないコストでテストできる。
コントローラのテストは、自動生成されていないコードで、テストにコストをかけて効果が高そうなものを選定するといい。
その結果しっかりテストされたコントローラがあれば、アプリ全体のテスト網羅率を向上させることができる。</p>

<h2>FactoryGirlのテクニック</h2>

<p>以下のようにファクトリを書くことで、<code>home_phone</code>と<code>work_phone</code>を使わける事ができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:phone</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;association :contact</span>
</span><span class='line'><span class="sr">phone &#39;123-555-1234&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">factory :home_phone do</span>
</span><span class='line'><span class="sr">  phone_type: &#39;home&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">factory :work_phone do</span>
</span><span class='line'><span class="sr">  phone_type: &#39;work&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>また、『<strong><a href="https://github.com/stympy/faker">stympy/faker</a></strong>』を使うと、
住所やURL、メールアドレスなどのリアルなダミーデータを生成してくれます。</p>

<p>ただ日本語のふりがななどに対応しようと思うと『<strong><a href="https://github.com/willnet/gimei">willnet/gimei</a></strong>』
がオススメです。日本語のリアルな住所を組み合わせたダミーデータも簡単に作成する事ができます。</p>

<p>FactoryGirlはテストを遅くすることがあるそうなので、必要なときに適切に使う事が重要とのことです。</p>

<h2>shared_examples</h2>

<p><code>shared_exmamples</code>とは、いくつかのテストをグループ化して、メソッドのように何度も呼び出せる機能です。
下は公式サンプルのテストですが、これを見るとひと目でわかると思います！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;set&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.shared_examples &quot;a collection&quot; do</span>
</span><span class='line'><span class="sr">  let(:collection) { described_class.new([7, 2, 4]) }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">context</span> <span class="s2">&quot;initialized with 3 items&quot;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;it &quot;says it has three items&quot; do</span>
</span><span class='line'><span class="sr">  expect(collection.size).to eq(3)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">context</span> <span class="s2">&quot;with an an item that is in the collection&quot;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;it &quot;returns true&quot; do</span>
</span><span class='line'><span class="sr">  expect(collection.include?(7)).to be_truthy</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="nb">Array</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ↓shared_examplesを関数のように呼び出している</span>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="s2">&quot;a collection&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; Array&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>   <span class="n">behaves</span> <span class="n">like</span> <span class="n">a</span> <span class="n">collection</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;     initialized with 3 items&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>       <span class="n">says</span> <span class="n">it</span> <span class="n">has</span> <span class="n">three</span> <span class="n">items</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;     with an an item that is in the collection&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>       <span class="n">returns</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.describe Set do</span>
</span><span class='line'><span class="sr">  # ↓shared_examplesを関数のように呼び出している</span>
</span><span class='line'><span class="sr">  it_behaves_like &quot;a collection&quot;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="no">Set</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;   behaves like a collection&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>     <span class="n">initialized</span> <span class="n">with</span> <span class="mi">3</span> <span class="n">items</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;       says it has three items&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>     <span class="n">with</span> <span class="n">an</span> <span class="n">an</span> <span class="n">item</span> <span class="n">that</span> <span class="n">is</span> <span class="k">in</span> <span class="n">the</span> <span class="n">collection</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;       returns true&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>FactoryGirlでローカルのファイルを指定する方法</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;ローカルのファイルを指定する方法&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;avatar { File.new(&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sr">/s</span><span class="n">pec</span><span class="o">/</span><span class="n">factories</span><span class="o">/</span><span class="n">avatar</span><span class="o">.</span><span class="n">png</span><span class="s2">&quot;) }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Rspecの便利マッチャー</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;正規表現でのチェック&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="s2">&quot;a string&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">match</span> <span class="sr">/a regex/</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;配列のチェック&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match_array</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>テストで特定の時間を指定する方法</h2>

<p><strong><a href="https://github.com/travisjeffery/timecop">travisjeffery/timecop - GitHub</a></strong></p>

<p>特定の曜日や日にちに依存する処理がある場合に、そのテストをすることができる。また、時間を止めることができるのでタイムスタンプが正しく動いているかのテストなどができる。</p>

<h2>メールのテスト</h2>

<p><strong><a href="https://github.com/bmabey/email-spec/">bmabey/email-spec -GitHub</a></strong></p>

<p>EmailについてテストをするためのGem。知らなかったけどこれはすごい使えそう。今度試してみます！</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>変更来歴</h2>

<p>(2015-01-12 22:30) 既存記事から分離して新規作成<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fog + carrierwaveでAWS S3に画像をアップロード]]></title>
    <link href="http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws/"/>
    <updated>2014-08-08T22:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774165166&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774165166&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/fog/fog">fog</a></strong>』はRubyのクラウドサービス向けのライブラリ(gem)です。
このfogと「<strong><a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a></strong>」を使うと、ユーザー向けの画像アップロードフォーム => S3への画像アップロードが、超簡単に実装できてしまいます！</p>

<p>「<strong><a href="http://morizyun.github.io/blog/short.works-parttimer-sidejob-iphone-app/">アルバイトを10秒で探せるiPhone/Androidアプリ Short.Works</a></strong>」でも画像アップロードの部分に活用しています！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>目次</h2>

<p>今回はcarriewave + Rails 4.1にfogを追加してS3にアップロードする部分を中心に説明します。</p>

<pre>
1) AWS でアクセスキーとシークレットキーを取得
2) S3 のブラケット作成
3) Carrierwave + Railsの基本実装
4) fogの導入(gem)
5) アップローダー(xxx_uploader.rb)の実装
6) carrierwave 設定ファイルの実装
</pre>


<h2>1) AWS でアクセスキーとシークレットキーを取得</h2>

<p>「<strong><a href="http://aws.amazon.com/jp/console/">AWSのコンソール</a></strong>」にログイン。</p>

<p>AWSにログインしたら右の自分のユーザー名 => <code>Security Credencial</code>を選択。</p>

<p><img src="https://farm6.staticflickr.com/5580/14851160675_37732ec8a3_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-07_21_04_19"></p>

<p>その中で、アクセスキーとシークレットキーを選択・作成。</p>

<p><img src="https://farm4.staticflickr.com/3859/14851143595_d2b31afcb8_z.jpg" width="640" height="351" alt="aws console"></p>

<p>このコードをあとでRails側で設定します。</p>

<h2>2) S3 のバケット作成</h2>

<p>S3のバケット(Bucket)を作成します。まずはS3を選択。</p>

<p><img src="https://farm4.staticflickr.com/3867/14875686133_c655bc19d8_z.jpg" width="640" height="349" alt="スクリーンショット_2014-08-08_9_58_41"></p>

<p>S3でバケットを作成。</p>

<p><img src="https://farm4.staticflickr.com/3897/14669129150_af82e98148_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-08_10_02_39"></p>

<h2>3) Carrierwave + Railsの基本実装</h2>

<p>Carrierwave + Rails 4.1での基本的な実装は拙著『<strong><a href="http://morizyun.github.io/blog/carrierwave-image-uploader-rails/">Carrierwave + Rails 4.1 画像アップローダー</a></strong>』をご参照頂ければ幸いです！</p>

<p>ここでは、上記の実装まで完了している前提で、<code>fog</code>を組み込む部分を中心に説明を書いていきます。</p>

<h2>4) fogの導入(gem)</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;fog&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>5) アップローダー(xxx_uploader.rb)の実装</h2>

<p><code>uploaders/xxx_uploader.rb</code>を以下のように変更。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">storage</span> <span class="ss">:file</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;↓ 以下のように変更&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">storage</span> <span class="ss">:fog</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>6) carrierwave 設定ファイルの実装</h2>

<p><code>config/initialize/carrierwave.rb</code>のファイルを作成して以下のように記述。</p>

<p>ACCESS_KEYとSECRET_KEYは「1) AWS でアクセスキーとシークレットキーを取得」で取得したものを貼り付け。</p>

<p>リージョンは『<strong><a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints - Amazon Web Services</a></strong>』を参照。ちなみに東京リージョンなら<code>ap-northeast-1</code>。</p>

<p><code>config.fog_directory</code>や<code>config.asset_host</code>には、S3のバケットの名前を入れる。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarrierWave</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_credentials</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  :provider               =&amp;gt; &#39;AWS&#39;,</span>
</span><span class='line'><span class="sr">  :aws_access_key_id      =&amp;gt; &#39;ACCESS_KEY&#39;,</span>
</span><span class='line'><span class="sr">  :aws_secret_access_key  =&amp;gt; &#39;SECRET_KEY&#39;,</span>
</span><span class='line'><span class="sr">  :region                 =&amp;gt; &#39;REGION&#39;,</span>
</span><span class='line'><span class="sr">  :path_style             =&amp;gt; true,</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">config</span><span class="o">.</span><span class="n">fog_public</span>     <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_attributes</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Cache-Control&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;public, max-age=86400&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  case Rails.env&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">when</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/example.com&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;staging&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;stg.example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/stg.example.com&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;dev.example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/dev.example.com&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;test.example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/test.example.com&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これで画像がS3にアップロードされるようになるはずデス！</p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Special Thanks</h2>

<p><a href="http://www.workabroad.jp/posts/1186">RailsとCarrierWaveでAmazon S3に画像を保存する | Workabroad.jp</a></p>

<p><a href="http://blog.cloudpack.jp/2014/08/04/allow-other-account-to-write-to-amazon-s3/">Amazon S3に別アカウントから書き込みを許可する場合の設定 | cloudpack技術情報サイト</a></p>
]]></content>
  </entry>
  
</feed>
