<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-19T23:40:03+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arproxy ActiveRecordが発行したSQLを加工できるGem]]></title>
    <link href="http://morizyun.github.io/blog/brakeman-rails-security-checker.1/"/>
    <updated>2016-01-19T23:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/brakeman-rails-security-checker.1</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4U/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4U&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4U&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/cookpad/arproxy">cookpad/arproxy - GitHub</a></strong>』は、
Arproxy ActiveRecordが発行したSQLを加工できるGemです。
Slow Queryを調査したり、SQLにコメントを付与したり、SQLをReadonlyに制限したりできます！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>group :development do
  # ActiveRecordのSQLを加工
  gem 'arproxy'
end
```</p>

<h2>SQLをログに出力</h2>

<p>以下のようになSQLを実行する部分をProxyします。</p>

<p><code>
+-------------------------+                       +------------------+
| ActiveRecord::Base#find |--execute(sql, name)--&gt;| Database Adapter |
+-------------------------+                       +------------------+
</code></p>

<p>SQLをログに出力するサンプルはこちら。</p>

<p>```ruby
class QueryTracer &lt; Arproxy::Base
  def execute(sql, name=nil)</p>

<pre><code>Rails.logger.debug sql
Rails.logger.debug caller(1).join("\n")
super(sql, name)
</code></pre>

<p>  end
end</p>

<p>Arproxy.configure do |config|
  config.adapter = "mysql2" # A DB Apdapter name which is used in your database.yml
  config.use QueryTracer
end
Arproxy.enable!
```</p>

<h2>Slow Queryのログを出力</h2>

<p>Slow Queryのログを出力する場合はこちら。</p>

<p>```ruby
class SlowQueryLogger &lt; Arproxy::Base
  def initialize(slow_ms)</p>

<pre><code>@slow_ms = slow_ms
</code></pre>

<p>  end</p>

<p>  def execute(sql, name=nil)</p>

<pre><code>result = nil
ms = Benchmark.ms { result = super(sql, name) }
if ms &gt;= @slow_ms
  Rails.logger.info "Slow(#{ms.to_i}ms): #{sql}"
end
result
</code></pre>

<p>  end
end</p>

<p>Arproxy.configure do |config|
  config.use SlowQueryLogger, 1000
end
```</p>

<h2>SQLにコメントを差し込む</h2>

<p>SQLにコメントを差し込む場合はこちら。</p>

<p>```ruby
class CommentAdder &lt; Arproxy::Base
  def execute(sql, name=nil)</p>

<pre><code>sql += " /*this_is_comment*/"
super(sql, name)
</code></pre>

<p>  end
end
```</p>

<p>これは面白いかも！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brakeman Railsのセキュリティチェックを行うためのGem]]></title>
    <link href="http://morizyun.github.io/blog/brakeman-rails-security-checker/"/>
    <updated>2016-01-18T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/brakeman-rails-security-checker</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4K/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4K&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4K&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4K" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/presidentbeef/brakeman">presidentbeef/brakeman - GitHub</a></strong>』は、
Railsのセキュリティの問題点等をコマンド1つでチェックしてくれるGemです。
企業等のサイト開発などでも気軽に使えるので是非試してみてください。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>サンプル</h2>

<p>こんな感じでコマンド一つでアプリのセキュリティをチェックしてくれます。</p>

<p>```bash
bundle exec brakeman</p>

<p>+BRAKEMAN REPORT+</p>

<p>Application path: /path/to/rails_app
Rails version: 4.2.5
Brakeman version: 3.1.4
Started at 2016-01-18 23:46:28 +0900
Duration: 0.805318 seconds
Checks run: BasicAuth, ContentTag, CreateWith, CrossSiteScripting, DefaultRoutes, Deserialize, DetailedExceptions, DigestDoS, EscapeFunction, Evaluation, Execute, FileAccess, FileDisclosure, FilterSkipping, ForgerySetting, HeaderDoS, I18nXSS, JRubyXML, JSONEncoding, JSONParsing, LinkTo, LinkToHref, MailTo, MassAssignment, ModelAttrAccessible, ModelAttributes, ModelSerialize, NestedAttributes, NumberToCurrency, QuoteTableName, Redirect, RegexDoS, Render, RenderDoS, RenderInline, ResponseSplitting, SQL, SQLCVEs, SSLVerify, SafeBufferManipulation, SanitizeMethods, SelectTag, SelectVulnerability, Send, SendFile, SessionManipulation, SessionSettings, SimpleFormat, SingleQuotes, SkipBeforeFilter, StripTags, SymbolDoSCVE, TranslateBug, UnsafeReflection, ValidationRegex, WithoutProtection, XMLDoS, YAMLParsing</p>

<p>+SUMMARY+</p>

<p>+-------------------+-------+
| Scanned/Reported  | Total |
+-------------------+-------+
| Controllers       | 6     |
| Models            | 5     |
| Templates         | 26    |
| Errors            | 0     |
| Security Warnings | 0 (0) |
+-------------------+-------+
```</p>

<p>結果はファイルやjsonで出力できますし、JenkinsなどのCIなどと連携して出力させる事もできます。</p>

<p>ちなみに、『<strong><a href="http://brakemanscanner.org/docs/jenkins/">Jenkinsのプラグイン</a></strong>』はこちらです。</p>

<p><a href="http://brakemanscanner.org/docs/jenkins/" target="_blank">
  <img src="http://brakemanscanner.org/images/brakeman_trend_graph.png" />
</a></p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>group :development do
  # セキュリティチェック
  gem 'brakeman', require: false
end
```</p>

<h2>application.js の変更</h2>

<p>あとは以下のコマンドを実行するだけ。</p>

<p><code>bash
bundle exec brakeman
</code></p>

<p>これで安心して仕事を進められそうです！</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/joker1007/items/be5dc3f3b1e93132a4f7">俺がGitHubでスターを付けたリポジトリ一覧 - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xray-rails Railsのviewがどこに表示されているかをわかりやすくする]]></title>
    <link href="http://morizyun.github.io/blog/xray-rails-view-checker-ui-bone/"/>
    <updated>2016-01-17T19:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/xray-rails-view-checker-ui-bone</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00WJQCVPU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00WJQCVPU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00WJQCVPU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00WJQCVPU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/brentd/xray-rails">brentd/xray-rails - GitHub</a></strong>』RailsのテンプレートやBackboneのviewが画面上のどこに表示されているかを視覚的に表示してくれるGemです。</p>

<p>Railsの開発時に便利なのでぜひ使ってみてください。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>サンプル</h2>

<p><img src="http://f.cl.ly/items/1A0o3y1y3Q13103V3F1l/xray-rails-large.gif" /></p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>group :development do
  # viewの構造を表示 (cmd+shift+x)
  gem 'xray-rails'
end
```</p>

<h2>キャッシュクリア</h2>

<p>一旦キャッシュを削除</p>

<p><code>bash
$ rm -rf tmp/cache/assets
</code></p>

<h2>application.js の変更</h2>

<p>あとは以下を追加するだけ。</p>

<p><code>javascript
// application.js
//= require jquery
//= require xray
...
// 以下、backboneを使っている場合のみ
//= require backbone
//= require xray-backbone
</code></p>

<p>これは開発捗りそう♪</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/joker1007/items/be5dc3f3b1e93132a4f7">俺がGitHubでスターを付けたリポジトリ一覧 - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveModelを使って、Classにバリデーションなどの便利機能を追加 [Rails4.2]]]></title>
    <link href="http://morizyun.github.io/blog/activemodel-rails-basic-usage/"/>
    <updated>2016-01-11T21:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/activemodel-rails-basic-usage</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00NM7VROQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00NM7VROQ&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00NM7VROQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00NM7VROQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
RailsのModelで便利に使っているバリデーションなどの機能をオブジェクトに追加する際には、<code>include ActiveModel::Model</code> がお手軽で便利ですよというお話です。
ちょっとボケて失念してしまっていたので、念のためメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>できること</h2>

<p>この <code>include ActiveModel::Model</code> でできることはこちら。</p>

<ul>
<li><code>Hoge.new({fuga: pugi})</code> みたいなイニシャライズができる</li>
<li>attributeのバリデーションを作れる</li>
<li><code>form_for</code> などで使える</li>
</ul>


<h2>実装例</h2>

<p>オブジェクトの実装はこちら。</p>

<p>```ruby</p>

<h1>app/forms/non_model.rb</h1>

<p>class Form::NonModel
  # ------------------------------------------------------------------
  # Modules
  # ------------------------------------------------------------------
  include ActiveModel::Model # Modelの便利機能とか</p>

<p>  # ------------------------------------------------------------------
  # Attributes
  # ------------------------------------------------------------------
  attr_accessor :foo, :bar</p>

<p>  # ------------------------------------------------------------------
  # Validations
  # ------------------------------------------------------------------
  validates :foo, presence: true
  validates :bar, presence: true
end
```</p>

<p>オブジェクトを使う際はこちら。</p>

<p>```ruby</p>

<h1>バリデーションOKのオブジェクト</h1>

<p>vaiid_form = Form::NonModel.new(foo: 'foooo', bar: 'baaaan!')
vaiid_form.valid? #=> true</p>

<h1>バリデーションNGのオブジェクト</h1>

<p>invalid_form = Form::NonModel.new(foo: 'foooo')
invalid_form.valid? #=> false
invalid_form.errors #=> #&lt;ActiveModel::Errors:0x007fe6bb19df58 @base=#&lt;Form::NonModel:0x007fe6beec6038 @errors=#&lt;ActiveModel::Errors:0x007fe6bb19df58 ...>, @foo="foooo", @validation_context=nil>, @messages={:bar=>["を入力してください。"]}>
```</p>

<p>地味だけど、便利です。Fat Modelを避けるために、責務に応じたオブジェクトを作る際に適用範囲は広いです。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>あどがき</h2>

<p>「<strong><a href="http://qiita.com/kbaba1001/items/e265ad1e40f238931468">Ruby - Rails のアーキテクチャ設計を考える - Qiita</a></strong>」も勉強になる。
チームへの導入コスト等も考えつつ、検討していきたい！</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://tanihiro.hatenablog.com/entry/2014/01/09/193720">【ruby】ActiveModelを使ってDBと関係ないFormを作成する【Rails】 - tanihiro.log</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[figaro HerokuやDokkuの環境変数の管理に便利！]]></title>
    <link href="http://morizyun.github.io/blog/figaro-config-heroku-dokku-rails-ruby/"/>
    <updated>2016-01-09T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/figaro-config-heroku-dokku-rails-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00NXMTLHK/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00NXMTLHK&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00NXMTLHK&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00NXMTLHK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
HerokuやDokkuで使う環境変数を管理するGem「<strong><a href="https://github.com/laserlemon/figaro">laserlemon/figaro</a></strong>」の紹介です。
モダンなWebアプリケーションの設計の指針とも言える「<strong><a href="http://12factor.net/ja/">Twelve-Factor App</a></strong>」を実現するのを手助けしてくれる素晴らしいGemです。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Twelve-Factor App</h2>

<p>「<strong><a href="http://12factor.net/ja/">Twelve-Factor App</a></strong>」にある通り、次の設計指針のことです。
今回のFigaroは(3)の設定を環境変数に格納するためのものです。</p>

<pre>
(1) コードベース : バージョン管理されている1つのコードベースがあり、それにより複数の環境にデプロイできる
(2) 依存関係 : 依存関係を明示的に宣言し分離する
(3) 設定 : 設定を環境変数に格納する
(4) バックエンドサービス : バックエンドのサービスをアタッチされたリソースとして扱う
(5) ビルド、リリース、実行 : ビルド、リリース、実行の3つのステージをちゃんと分離する
(6) プロセス : アプリケーションを1つもしくは複数のステートレスなプロセスとして実行する
(7) ポートバインディング : ポートバインディングを通してサービスを公開する
(8) 並行性 : プロセスモデルによってスケールアウトする
(9) 廃棄容易性 : 高速な起動とグレースフルシャットダウンで堅牢性を最大化する
(10) 開発/本番一致 : 開発、ステージング、本番環境をできるだけ一致させた状態を保つ
(11) ログ : ログをイベントストリームとして扱う
(12) 管理プロセス : 管理タスクを1回限りのプロセスとして実行する
</pre>


<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行してください。
下記は用途に合わせてどちらかをお使いください。</p>

<p>```ruby</p>

<h1>公式のものを使う場合(Dokku非対応の公式のものを使う場合はこちら)</h1>

<p>gem 'figaro'</p>

<h1>Dokku対応を行ったバージョンです(PR中なのでそのうち本体に取り込まれるかも)</h1>

<p>gem 'figaro', github: 'morizyun/figaro'
```</p>

<h2>設定方法</h2>

<p>以下の様に設定してください。</p>

<p>```ruby</p>

<h1>config/application.yml</h1>

<p>pusher_app_id: "2954"
pusher_key: "7381a978f7dd7f9a1117"
pusher_secret: "abdc3b896a0ffb85d373"</p>

<p>test:
  pusher_app_id: "5112"
  pusher_key: "ad69caf9a44dcac1fb28"
  pusher_secret: "83ca7aa160fedaf3b350"
```</p>

<p>Railsアプリ側からは次のように扱います。</p>

<p>```ruby</p>

<h1>config/initializers/pusher.rb</h1>

<h1>一般的には以下の様に使います</h1>

<p>Pusher.app_id = ENV["pusher_app_id"]
Pusher.key    = ENV["pusher_key"]
Pusher.secret = ENV["pusher_secret"]</p>

<h1>こんな風に Figaro.envで使うこともできます</h1>

<p>Figaro.env.pusher_app_id # => "5112"
Figaro.env.pusher_app_id? # => true
```</p>

<h2>Herokuへの設定</h2>

<p>「<strong><a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a></strong>」をインストールして、Herokuのアプリを作成し、
Railsアプリ側をデプロイする段階になったら、以下のコマンドで環境変数に設定を登録します。</p>

<p>```bash</p>

<h1>手動で個別登録</h1>

<p>$ heroku config:set google_analytics_key=UA-35722661-5</p>

<h1>ファイルから一括登録</h1>

<p>$ figaro heroku:set -e production</p>

<h1>使い方の詳細はこちら</h1>

<p>$ figaro help heroku:set
```</p>

<h2>Dokkuへの設定</h2>

<p>Dokkuの設定もほぼ同じです。<code>dokku-cli</code>をインストールして、gitリポジトリを設定したら、herokuとほぼ同じことを実行できます。</p>

<p>```bash</p>

<h1>dokku の git を登録</h1>

<p>$ git remote add dokku dokku@example-dokku-server.com:example-app</p>

<h1>dokku-cli をインストール</h1>

<p>$ gem install dokku-cli</p>

<h1>手動で個別登録</h1>

<p>$ dokku config:set google_analytics_key=UA-35722661-5</p>

<h1>ファイルから一括登録</h1>

<p>$ figaro dokku:set -e production</p>

<h1>使い方の詳細はこちら</h1>

<p>$ figaro help dokku:set
```</p>

<h2>おまけ</h2>

<p>正直 <code>Dokku</code> で使おうと思ったら、すでに拡張してくれている人がいたのでうほーいと思ったら、
Travis CIのRSpecがコケてて散々悩みながら、デバックしてたら夜中の2時でしたww</p>

<p><strong><a href="https://github.com/laserlemon/figaro/pull/227">Support dokku cli by morizyun · Pull Request #227 · laserlemon/figaro</a></strong></p>

<p><code>Pull Request</code> うまくいくといいなぁ</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://xoyip.hatenablog.com/entry/2014/04/09/214405">Rails4.1のsecrets.ymlはfigaroと違うの？ - PILOG</a></strong></li>
</ul>

]]></content>
  </entry>
  
</feed>
