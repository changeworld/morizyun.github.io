<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:08:25+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/rails-learning-start-dash-slide/"/>
    <updated>2015-12-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-learning-start-dash-slide</id>
    <content type="html"><![CDATA[Liquid error: invalid byte sequence in UTF-8]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review/"/>
    <updated>2015-01-12T22:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review</id>
    <content type="html"><![CDATA[<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
が、RSpec3に対応したとの噂を聞いて1年ぶりに読み直しました。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアル
としてRspecの実践的な使い方が習得できる素晴らしい本です。</p>

<p>今回は『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
を読んでいく中で、特に印象に残った部分を中心にピックアップしていきます。ブログ駆動勉強ですw</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Everyday Railsのサンプルソース</h2>

<p><strong><a href="https://github.com/everydayrails/rspec_rails_4">everydayrails/rspec_rails_4 - GitHub</a></strong></p>

<p>この書籍ではできるだけRspecやテストに集中できるようにサンプルソースが用意されています。しかもRails4対応と至れり尽くせりです。素晴らしい！
ターミナルで以下のコマンドを実行すると、ローカルにソースコードをダウンロードできます。</p>

<p>{% codeblock lang:bash %}
git clone https://github.com/everydayrails/rspec_rails_4.git
{% endcodeblock %}</p>

<h2>自分でコードを書く</h2>

<p>勉強をするときにコピペをするのではなく、自分でコードをタイピングしていくべき。
これは最近学習によって得られる知識がかなり変わることを実感しているのですごく共感できます！</p>

<h2>テスト設計について</h2>

<p>TDDで動くコードを書く前にRSpecのexample(itで始まる行)まで書いてテスト設計する。
いつもテストが先か、コードが先かで悩んでいました。この理由の一つは動かない状態のテストの設計をどこに
書くかでしたが、この本を読んでいく中でこういうふうに先に設計すればTDDの流れの中で開発できるんだと感激ました＾＾</p>

<h2>絶対に覚えておきたいRSpecを書くときの基本</h2>

<pre>
* Specアウトラインをベースに考える
* example(itで始まる行)は原因究明しやすいように結果を1つに絞る
* 期待する結果は能動形、具体的に記述すること
* 「起きてほしいこと、起きてほしくないこと」の両方のテストを書くこと
* 境界値テストをすること
* スペックの可読性を高めることに努めること
</pre>


<h2>コントローラスペックについて</h2>

<p>feature specに比べてコントローラスペックのほうが、少ないコストでテストできる。
コントローラのテストは、自動生成されていないコードで、テストにコストをかけて効果が高そうなものを選定するといい。
その結果しっかりテストされたコントローラがあれば、アプリ全体のテスト網羅率を向上させることができる。</p>

<h2>FactoryGirlのテクニック</h2>

<p>以下のようにファクトリを書くことで、<code>home_phone</code>と<code>work_phone</code>を使わける事ができます。</p>

<p>{% codeblock lang:ruby %}
FactoryGirl.define do
  factory :phone do</p>

<pre><code>association :contact
phone '123-555-1234'

factory :home_phone do
  phone_type: 'home'
end

factory :work_phone do
  phone_type: 'work'
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>また、『<strong><a href="https://github.com/stympy/faker">stympy/faker</a></strong>』を使うと、
住所やURL、メールアドレスなどのリアルなダミーデータを生成してくれます。</p>

<p>ただ日本語のふりがななどに対応しようと思うと『<strong><a href="https://github.com/willnet/gimei">willnet/gimei</a></strong>』
がオススメです。日本語のリアルな住所を組み合わせたダミーデータも簡単に作成する事ができます。</p>

<p>FactoryGirlはテストを遅くすることがあるそうなので、必要なときに適切に使う事が重要とのことです。</p>

<h2>shared_examples</h2>

<p><code>shared_exmamples</code>とは、いくつかのテストをグループ化して、メソッドのように何度も呼び出せる機能です。
下は公式サンプルのテストですが、これを見るとひと目でわかると思います！</p>

<p>{% codeblock lang:ruby %}
require "set"</p>

<p>RSpec.shared_examples "a collection" do
  let(:collection) { described_class.new([7, 2, 4]) }</p>

<p>  context "initialized with 3 items" do</p>

<pre><code>it "says it has three items" do
  expect(collection.size).to eq(3)
end
</code></pre>

<p>  end</p>

<p>  context "with an an item that is in the collection" do</p>

<pre><code>it "returns true" do
  expect(collection.include?(7)).to be_truthy
end
</code></pre>

<p>  end
end</p>

<p>RSpec.describe Array do
  # ↓shared_examplesを関数のように呼び出している
  it_behaves_like "a collection"
end</p>

<h1>=> Array</h1>

<h1>=>   behaves like a collection</h1>

<h1>=>     initialized with 3 items</h1>

<h1>=>       says it has three items</h1>

<h1>=>     with an an item that is in the collection</h1>

<h1>=>       returns true</h1>

<p>RSpec.describe Set do
  # ↓shared_examplesを関数のように呼び出している
  it_behaves_like "a collection"
end</p>

<h1>=> Set</h1>

<h1>=>   behaves like a collection</h1>

<h1>=>     initialized with 3 items</h1>

<h1>=>       says it has three items</h1>

<h1>=>     with an an item that is in the collection</h1>

<h1>=>       returns true</h1>

<p>{% endcodeblock %}</p>

<h2>FactoryGirlでローカルのファイルを指定する方法</h2>

<p>{% codeblock lang:ruby %}</p>

<h1>ローカルのファイルを指定する方法</h1>

<p>FactoryGirl.define do
  factory :user do</p>

<pre><code>avatar { File.new("#{Rails.root}/spec/factories/avatar.png") }
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Rspecの便利マッチャー</h2>

<p>{% codeblock lang:ruby %}</p>

<h1>正規表現でのチェック</h1>

<p>expect("a string").not_to match /a regex/</p>

<h1>配列のチェック</h1>

<p>expect([1, 2, 3]).to match_array [2, 1, 3]
{% endcodeblock %}</p>

<h2>テストで特定の時間を指定する方法</h2>

<p><strong><a href="https://github.com/travisjeffery/timecop">travisjeffery/timecop - GitHub</a></strong></p>

<p>特定の曜日や日にちに依存する処理がある場合に、そのテストをすることができる。また、時間を止めることができるのでタイムスタンプが正しく動いているかのテストなどができる。</p>

<h2>メールのテスト</h2>

<p><strong><a href="https://github.com/bmabey/email-spec/">bmabey/email-spec -GitHub</a></strong></p>

<p>EmailについてテストをするためのGem。知らなかったけどこれはすごい使えそう。今度試してみます！</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(2015-01-12 22:30) 既存記事から分離して新規作成<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fog + carrierwaveでAWS S3に画像をアップロード]]></title>
    <link href="http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws/"/>
    <updated>2014-08-08T22:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774165166&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774165166&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/fog/fog">fog</a></strong>』はRubyのクラウドサービス向けのライブラリ(gem)です。
このfogと「<strong><a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a></strong>」を使うと、ユーザー向けの画像アップロードフォーム => S3への画像アップロードが、超簡単に実装できてしまいます！</p>

<p>「<strong><a href="http://morizyun.github.io/blog/short.works-parttimer-sidejob-iphone-app/">アルバイトを10秒で探せるiPhone/Androidアプリ Short.Works</a></strong>」でも画像アップロードの部分に活用しています！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>目次</h2>

<p>今回はcarriewave + Rails 4.1にfogを追加してS3にアップロードする部分を中心に説明します。</p>

<pre>
1) AWS でアクセスキーとシークレットキーを取得
2) S3 のブラケット作成
3) Carrierwave + Railsの基本実装
4) fogの導入(gem)
5) アップローダー(xxx_uploader.rb)の実装
6) carrierwave 設定ファイルの実装
</pre>


<h2>1) AWS でアクセスキーとシークレットキーを取得</h2>

<p>「<strong><a href="http://aws.amazon.com/jp/console/">AWSのコンソール</a></strong>」にログイン。</p>

<p>AWSにログインしたら右の自分のユーザー名 => <code>Security Credencial</code>を選択。</p>

<p><img src="https://farm6.staticflickr.com/5580/14851160675_37732ec8a3_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-07_21_04_19"></p>

<p>その中で、アクセスキーとシークレットキーを選択・作成。</p>

<p><img src="https://farm4.staticflickr.com/3859/14851143595_d2b31afcb8_z.jpg" width="640" height="351" alt="aws console"></p>

<p>このコードをあとでRails側で設定します。</p>

<h2>2) S3 のバケット作成</h2>

<p>S3のバケット(Bucket)を作成します。まずはS3を選択。</p>

<p><img src="https://farm4.staticflickr.com/3867/14875686133_c655bc19d8_z.jpg" width="640" height="349" alt="スクリーンショット_2014-08-08_9_58_41"></p>

<p>S3でバケットを作成。</p>

<p><img src="https://farm4.staticflickr.com/3897/14669129150_af82e98148_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-08_10_02_39"></p>

<h2>3) Carrierwave + Railsの基本実装</h2>

<p>Carrierwave + Rails 4.1での基本的な実装は拙著『<strong><a href="http://morizyun.github.io/blog/carrierwave-image-uploader-rails/">Carrierwave + Rails 4.1 画像アップローダー</a></strong>』をご参照頂ければ幸いです！</p>

<p>ここでは、上記の実装まで完了している前提で、<code>fog</code>を組み込む部分を中心に説明を書いていきます。</p>

<h2>4) fogの導入(gem)</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:ruby %}
gem 'fog'
{% endcodeblock %}</p>

<h2>5) アップローダー(xxx_uploader.rb)の実装</h2>

<p><code>uploaders/xxx_uploader.rb</code>を以下のように変更。</p>

<p>{% codeblock lang:ruby %}
storage :file</p>

<h1>↓ 以下のように変更</h1>

<p>storage :fog
{% endcodeblock %}</p>

<h2>6) carrierwave 設定ファイルの実装</h2>

<p><code>config/initialize/carrierwave.rb</code>のファイルを作成して以下のように記述。</p>

<p>ACCESS_KEYとSECRET_KEYは「1) AWS でアクセスキーとシークレットキーを取得」で取得したものを貼り付け。</p>

<p>リージョンは『<strong><a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints - Amazon Web Services</a></strong>』を参照。ちなみに東京リージョンなら<code>ap-northeast-1</code>。</p>

<p><code>config.fog_directory</code>や<code>config.asset_host</code>には、S3のバケットの名前を入れる。</p>

<p>{% codeblock lang:ruby %}
CarrierWave.configure do |config|
  config.fog_credentials = {</p>

<pre><code>  :provider               =&gt; 'AWS',
  :aws_access_key_id      =&gt; 'ACCESS_KEY',
  :aws_secret_access_key  =&gt; 'SECRET_KEY',
  :region                 =&gt; 'REGION',
  :path_style             =&gt; true,
</code></pre>

<p>  }</p>

<p>  config.fog_public     = true
  config.fog_attributes = {'Cache-Control' => 'public, max-age=86400'}</p>

<p>  case Rails.env</p>

<pre><code>when 'production'
  config.fog_directory = 'example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/example.com'
when 'staging'
  config.fog_directory = 'stg.example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/stg.example.com'
when 'development'
  config.fog_directory = 'dev.example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/dev.example.com'
when 'test'
  config.fog_directory = 'test.example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/test.example.com'
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>これで画像がS3にアップロードされるようになるはずデス！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://www.workabroad.jp/posts/1186">RailsとCarrierWaveでAmazon S3に画像を保存する | Workabroad.jp</a></p>

<p><a href="http://blog.cloudpack.jp/2014/08/04/allow-other-account-to-write-to-amazon-s3/">Amazon S3に別アカウントから書き込みを許可する場合の設定 | cloudpack技術情報サイト</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-kitchenでインフラのTDDに挑戦[Rails/Nginx/MySQL/rbenv]]]></title>
    <link href="http://morizyun.github.io/blog/test-kitchen-vagrant-rails-rbenv-chef-serverspec/"/>
    <updated>2014-05-02T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/test-kitchen-vagrant-rails-rbenv-chef-serverspec</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774162868/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774162868&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774162868&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774162868" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />これまでVagrantやChefをつかってインフラのコード化を勉強してきましたが、今回は更に一歩進めてserverspecを使ったインフラのテストと、『<strong><a href="http://kitchen.ci/">test-kitchen</a></strong>』を使ったTDDにチャレンしてみました！</p>

<p>慣れてくるとtest-kitchenの<code>コマンドで設定をやり直し => インフラのテスト</code>がソースコードを書くような感覚で、インフラを構築できるのがすごく心地よかったです。</p>

<p>ようやくですが、localのvagrantと『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』、『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』に対応しました。コマンド一つでChefを適用したり、serverspecでリモートの環境をテストすることができます！</p>

<p><strong>(05-02 08:35) Rubyサーバ・デプロイまでのチェックリストを追加</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>今回のソースコード</h2>

<p>Vagrant/Degital Oclean/AWS EC2上にNginx/MySQL/rbenv/Ruby 2.1.0/Ubuntu 12.04のおなじみのサーバ構成の構築/テストを行うtest-kitchenのソースコードをGitHubに公開しました。また、Vagrant x CentOS 6.5 /Nginx/MySQL/rbenv/Ruby 2.1.0も作成しました。</p>

<p><strong><a href="https://github.com/morizyun/test-kitchen-rails">morizyun/test-kitchen-rails</a></strong></p>

<p>手っ取り早くVagrantでRailsサーバを立ち上げたり、serverspecでテストしてみたい方は是非使ってみてください！Pull Requestも大歓迎です＾＾</p>

<h2>環境準備</h2>

<h3>Vagrant</h3>

<p><strong><a href="http://www.vagrantup.com/">Vagrant 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<p>vagrantをインストールしたら、boxでchefを使えるようにするためのプラグインをインストール。</p>

<p>{% codeblock lang:bash %}
vagrant plugin install vagrant-omnibus
{% endcodeblock %}</p>

<h3>VirtualBox</h3>

<p><strong><a href="https://www.virtualbox.org/">VirtualBox 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<h2>簡単なtest-kitchen環境の作り方</h2>

<h3>Cookbookの作成</h3>

<p>{% codeblock lang:bash %}
berks cookbook test-kitchen &amp;&amp; cd test-kitchen
{% endcodeblock %}</p>

<h3>Gemfileのセットアップ</h3>

<p>次に<code>vim Gemfile</code>でセットアップ。</p>

<p>{% codeblock lang:bash %}
source 'https://rubygems.org'</p>

<p>gem 'berkshelf'
gem 'foodcritic'
gem 'rubocop'
gem 'busser'
gem 'serverspec'
gem 'dotenv'</p>

<h1>test-kitchen</h1>

<p>gem 'test-kitchen'
gem 'kitchen-vagrant'
gem 'kitchen-digitalocean'
gem 'kitchen-ec2'
{% endcodeblock %}</p>

<p>完了したらbundlerでgemを導入。</p>

<p>{% codeblock lang:bash %}
bundle install --binstubs=bin
{% endcodeblock %}</p>

<p><code>vim bin/kitchen</code>でdotenvを読み込むように設定を追記。</p>

<p>{% codeblock lang:bash %}
require 'dotenv'
Dotenv.load
{% endcodeblock %}</p>

<p>この設定は本来は良くないと思います。<code>bundle install</code>のたびに設定を描き直さないといけないので、もっといい方法があれば是非教えて下さい！</p>

<h3>busserプラグインの設定</h3>

<p>次にプラグインの設定。</p>

<p>{% codeblock lang:bash %}
busser plugin install serverspec
{% endcodeblock %}</p>

<h3>Berksfileのセットアップ</h3>

<p><code>vim Berksfile</code>でBerkshelfの設定。<br/>
(まだ試行錯誤中なので、最新はGitHubをご参照ください)</p>

<p>{% codeblock lang:bash %}
site :opscode</p>

<p>metadata</p>

<p>cookbook "apt",
  git: "https://github.com/opscode-cookbooks/apt.git"
cookbook "build-essential",
  git: "https://github.com/opscode-cookbooks/build-essential.git"
cookbook "git",
  git: "https://github.com/opscode-cookbooks/git.git"
cookbook "nginx",
  git: "https://github.com/opscode-cookbooks/nginx.git"
cookbook "vim",
  git: "https://github.com/opscode-cookbooks/vim.git"
cookbook "mysql",
  git: "https://github.com/myplanetdigital-experimental/chef-mysql.git"
cookbook 'rbenv',
  git: "https://github.com/fnichol/chef-rbenv.git"
cookbook 'database',
  git: "https://github.com/opscode-cookbooks/database.git"</p>

<p>cookbook 'base', path: 'site-cookbooks/base'
{% endcodeblock %}</p>

<p>設定画完了したら、Berkshelfの設定を反映。</p>

<p>{% codeblock lang:bash %}
bundle exec berks vendor cookbooks
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h3>.kitchen.ymlの設定</h3>

<p><code>vim .kitchen.yml</code>でtest-kitchen用の設定。</p>

<h2>{% codeblock lang:bash %}</h2>

<p>provisioner:
  name: chef_solo</p>

<p>driver_config:
  require_chef_omnibus: true</p>

<p>platforms:
  - name: va-ubuntu-12.04</p>

<pre><code>driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.33.33"}]
  synced_folders:
    - ["vagrant", "/usr/share/nginx", "create: true, type: :nfs"]
provider: virtualbox
driver_config:
  box: opscode-ubuntu-12.04
  box_url: https://opscode-vm.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04_provisionerless.box
  customize:
    memory: 1024
    cpuexecutioncap: 100
</code></pre>

<ul>
<li> name: va-centos-6.5
driver:
  name: vagrant
  network:

<pre><code>- ["private_network", {ip: "192.168.33.32"}]
</code></pre>

  synced_folders:

<pre><code>- ["vagrant", "/usr/share/nginx", "create: true, type: :nfs"]
</code></pre>

<p>driver_config:
  box: opscode-centos-6.5
  box_url: http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-6.5_chef-provisionerless.box</p></li>
</ul>


<p>suites:
  - name: rails</p>

<pre><code>run_list:
  - recipe[base::prepare]
  - recipe[build-essential]
  - recipe[git]
  - recipe[vim]
  - recipe[nginx]
  - recipe[mysql::server]
  - recipe[mysql::client]
  - recipe[ruby_build]
  - recipe[rbenv::system]
  - recipe[base]
  - recipe[base::rails]
attributes:
  git:
    version: 1.9.1
  nginx:
    application_name: 'sample'
  mysql:
    server_debian_password: "passw0rd"
    server_root_password: "passw0rd"
    server_repl_password: "passw0rd"
  rbenv:
    rubies: ['2.1.0']
    global: '2.1.0'
    gems:
      '2.1.0':
        - name: 'bundler'
          options: '--no-ri --no-rdoc'
        - name: 'gem'
          options: '--no-ri --no-rdoc'
        - name: 'rails'
          options: '--no-ri --no-rdoc'
        - name: 'rake'
          options: '--no-ri --no-rdoc'
        - name: 'therubyracer'
          options: '--no-ri --no-rdoc'
</code></pre>

<p>{% endcodeblock %}</p>

<h2>Vagrant/Ubuntu編</h2>

<p>まずはvagrantでローカルにubuntuを立ち上げます。</p>

<h3>セットアップ</h3>

<p>vagrantのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-va-ubuntu-1204
{% endcodeblock %}</p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-va-ubuntu-1204</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-va-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>Vagrant/CentOS編</h2>

<p>まずはvagrantでローカルにCentOSを立ち上げます。</p>

<h3>セットアップ</h3>

<p>vagrantのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-va-centos-65
{% endcodeblock %}</p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-va-centos-65</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-va-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>Degital Ocean編</h2>

<p>次は『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』に鯖を立ち上げます。</p>

<h3>事前準備</h3>

<p>以下、『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』での作業。</p>

<pre>
1) Degital Oceanでユーザー登録
2) ユーザー画面内の左メニュー「Billing」からPayPalで$5を支払い
3) ユーザー画面内の左メニュー「API」で"Client ID"と"API Key"を作成
4) ユーザー画面内の左メニュー「SSH Keys」でSSHキーを登録
</pre>


<p>事前準備で取得した"Client ID"と"API Key"を元にSSH Key IDを取得。</p>

<p>{% codeblock lang:bash %}
wget -q -O- https://api.digitalocean.com/ssh_keys/?client_id=[Client ID]&amp;api_key=[API Key]
{% endcodeblock %}</p>

<h3>登録した情報を.envに登録</h3>

<p>取得した情報を<code>vim .env</code>で登録。DIGITALOCEAN_SSH_KEY_PATHにはDegital Oceanに登録したSSHキーの秘密鍵へのパスを設定。</p>

<p>{% codeblock lang:bash %}
DIGITALOCEAN_CLIENT_ID="1234"
DIGITALOCEAN_API_KEY="5678"
SSH_KEY_IDS="1234, 5678"
DIGITALOCEAN_SSH_KEY_PATH="~/.ssh/id_rsa"
{% endcodeblock %}</p>

<h3>.kitchen.ymlを設定</h3>

<p>{% codeblock lang:bash %}
platforms:
  - name: do-ubuntu-12.04</p>

<pre><code>driver:
  name: digitalocean
  ssh_key: &lt;%= ENV['DIGITALOCEAN_SSH_KEY_PATH'] %&gt;
driver_config:
  image_id: 3101045
  region: San Francisco 1
  flavor: 512MB
  private_networking: false
</code></pre>

<p>{% endcodeblock %}</p>

<h3>セットアップ</h3>

<p>Degital Oceanのインスタンスのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-do-ubuntu-1204
{% endcodeblock %}</p>

<p>Degital Oceanのユーザー画面内の左メニュー「Droplets」で立ち上がっているインスタンスを確認することができます。</p>

<p><img src="https://farm4.staticflickr.com/3774/13790615893_c5e211f897.jpg" width="500" height="282" alt="スクリーンショット_2014-04-12_12_38_11"></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-do-ubuntu-1204</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-do-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>AWS EC2編</h2>

<p>次は『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』に鯖を立ち上げます。</p>

<h3>事前準備</h3>

<p>以下、『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』での作業。</p>

<pre>
1) AWS EC2でユーザー登録
2) EC2 => 自分が作成するリージョン(Tokyo)でセキュリティグループを作成
3) EC2 => Key Pairで鍵を作成(もしくはImportして登録)
4) 右上のメニュー「Security Credential」=> Access Keyを作成
</pre>


<h3>登録した情報を.envに登録</h3>

<p>取得した情報を<code>vim .env</code>で登録。DIGITALOCEAN_SSH_KEY_PATHにはDegital Oceanに登録したSSHキーの秘密鍵へのパスを設定。</p>

<p>{% codeblock lang:bash %}
AWS_ACCESS_KEY_ID="xxxx"
AWS_FLAVOR_ID="m1.small"
AWS_IMAGE_ID="ami-f397eef2"
AWS_SECRET_ACCESS_KEY="xxxx"
AWS_SECURITY_GROUP_ID="sg-xxxxx"
AWS_SSH_KEY="~/.ssh/aws.pem"
AWS_SSH_KEY_ID="xxxx"
{% endcodeblock %}</p>

<h3>.kitchen.ymlを設定</h3>

<p>{% codeblock lang:bash %}
platforms:
  - name: ec2-ubuntu-12.04</p>

<pre><code>driver:
  name: ec2
  region:  ap-northeast-1
  availability_zone: ap-northeast-1c
  flavor_id: &lt;%= ENV['AWS_FLAVOR_ID'] %&gt;
  image_id: &lt;%= ENV['AWS_IMAGE_ID'] %&gt;
  aws_ssh_key_id: &lt;%= ENV['AWS_SSH_KEY_ID'] %&gt;
  aws_access_key_id: &lt;%= ENV['AWS_ACCESS_KEY_ID'] %&gt;
  ssh_key: &lt;%= ENV['AWS_SSH_KEY'] %&gt;
  aws_secret_access_key: &lt;%= ENV['AWS_SECRET_ACCESS_KEY'] %&gt;
  username: ubuntu
  security_group_ids: ["&lt;%= ENV['AWS_SECURITY_GROUP_ID'] %&gt;"]
  port: 22
  ebs_optimized: false
</code></pre>

<p>{% endcodeblock %}</p>

<h3>セットアップ</h3>

<p>EC2のインスタンスのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-ec2-ubuntu-1204
{% endcodeblock %}</p>

<p>AWSマネージメントコンソール => EC2画面で立ち上がっているインスタンスを確認することができます。</p>

<p><img src="https://farm4.staticflickr.com/3724/13792234173_ac92f453a8.jpg" width="500" height="117" alt="スクリーンショット_2014-04-12_15_01_08"></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-ec2-ubuntu-1204</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-do-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>サーバのセットアップ完了 => Railsアプリデプロイまでの手順</h2>

<pre>
(1) test-kitchenの実行 => テスト実行

(2) Elastic Block Storeを設定

(3) 鯖側にdeploy用のキーを作成 => 公開鍵をGitHubに登録

(4) MySQLのユーザー作成
GRANT ALL PRIVILEGES ON DB_NAME.* TO USER_NAME@localhost IDENTIFIED BY ‘PASSWORD';
FLUSH PRIVILEGES;

(5) ローカルでcapistranoを使ったデプロイ
cap production deploy:starting
cap production deploy:check
cap production deploy # dbがないのでコケる

(6) 鯖のreleaseフォルダで、bundle exec rake RAILS_ENV=production db:create

(7)cap production deploy
</pre>


<p>初回デプロイ時にDBが無いときに先にDBを作成する方法は、もっといい方法があるはずなのでご存じの方がいれば、コメントを頂ければ幸いです！</p>

<p><strong><a href="http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/">Capistrano 3系でRails4.1のデプロイ</a></strong><br/>
Capistrano 3の設定はこちらがおすすめ。</p>

<h2>次のステップ</h2>

<p>残念ながら今回は挫折しましたが、Dokkuをまる２日位ためしてみました。まだまだ実用レベルとは言いづらいですが、可能性をすごく感じるプロダクトです！今回は調査していた中で見つけたサイトをメモがてら書いておきます。</p>

<h2>ChefでDocker&amp;Dokkuをインストール</h2>

<p><strong><a href="https://github.com/fgrehm/chef-dokku">fgrehm/chef-dokku - GitHub</a></strong></p>

<p><strong><a href="https://github.com/bflad/chef-docker">bflad/chef-docker - GitHub</a></strong></p>

<p><strong><a href="https://github.com/progrium/dokku">progrium/dokku - GitHub</a></strong></p>

<p><strong><a href="https://github.com/rlister/chef-dokku-simple">rlister/chef-dokku-simple - GitHub</a></strong></p>

<p><strong><a href="https://github.com/hughfletcher/dokku-mysql-plugin">hughfletcher/dokku-mysql-plugin - GitHub</a></strong></p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://engineer.wantedly.com/2014/03/27/setup-elasticsearch-cluster-on-ec2-with-chef.html">Chef で Elasticsearch クラスタを EC2 上に作る</a></strong><br/>
こちらのブログでtest-kitchenの使い方を知ることが出来ました。多謝です！</p>

<p><strong><a href="http://blog.glidenote.com/blog/2014/02/26/vagrant-dotenv/">dotenvを利用して環境ごとでVagrantfileの設定値を変更してみる</a></strong><br/></p>

<p><strong><a href="https://github.com/test-kitchen/kitchen-digitalocean">test-kitchen/kitchen-digitalocean</a></strong><br/></p>

<h2>変更来歴</h2>

<p>(04/12 12:45) Degital OceanとAWS EC2を適用<br/>
(04/14 23:35) Docker &amp; Dokkuに関するメモ書きを追記<br/>
(04/23 22:50) CentOS 6.5 x Vagrantを追加、バグフィックス<br/>
(04/25 23:00) ちょこちょこミスがあった点を修正<br/>
(05-02 08:35) Rubyサーバ・デプロイまでのチェックリストを追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec初心者向けの資料まとめ[Ruby][Everyday Rails書評]]]></title>
    <link href="http://morizyun.github.io/blog/rspec-beginner-bdd-tdd-test-first/"/>
    <updated>2014-05-02T08:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rspec-beginner-bdd-tdd-test-first</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798121932&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798121932&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798121932" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近、RspecやCapybaraでRailsのテストを書くたびに、ちょっとした書き方がわからずググったり、冗長なテストを書くことに結構悩んでいました。ということで、思い切ってRspec再入門として、『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』を読みました！Rails/Rubyはどんどんバージョンアップするので、紙媒体の書籍だと情報が古くなってしまっている場合があります。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアルとしてRspecの実践的な使い方を習得できる書籍です。</p>

<p>またこの本を読むにあたってRSpecのドキュメントやWebサイトを読みなおしたので、合わせてRSpec初学者向けのマトメを作りました！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<h2>Everyday Rails - RSpecによるRailsテスト入門</h2>

<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>
もしも体系的な知識を獲得したいなら、やはりこの『<a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a>』
一択だと思います。この本の中で特に印象に残った部分を『<strong><a href="/blog/everyday-rails-beginner-rspec-book-review">Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！</a></strong>』がオススメす。
良かったら是非読んでみてください＾＾</p>

<br style="clear:both;"/>


<h2>おすすめドキュメント</h2>

<h3>TDD/BDDとは？</h3>

<p><strong><a href="http://www.atmarkit.co.jp/ait/articles/1404/30/news022.html">TDD/BDDにおける「振る舞い」の意味するところとは何なのか</a></strong><br/>
Rspecに限定された記事ではないですが、BDDの根本的な概念の「振る舞い」についてまとめられた記事。初心者向けなので、かなり説明が丁寧で分かりやすいです！</p>

<h3>Rspec/Capybara</h3>

<p><strong><a href="http://magazine.rubyist.net/?0021-Rspec">スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)</a></strong><br/>
<strong><a href="http://magazine.rubyist.net/?0023-Rspec">スはスペックのス 【第 2 回】 RSpec on Rails (コントローラとビュー編)</a></strong><br/>
RSpecの説明やテスト駆動開発の入門的記事。</p>

<p><strong><a href="http://www.oiax.jp/rails/rspec_capybara_primer.html">RSpec/Capybara入門</a></strong><br/></p>

<blockquote>
Railsを学習中の初心者がテスト駆動開発(TDD)あるいはビヘイビア駆動開発(BDD)を実践するための基礎的な知識や考え方を説明していきます。
</blockquote>


<p><strong><a href="http://qiita.com/awakia/items/d880250adc8cdbe7a32f">RSpecのshouldはもう古い！新しい記法expectを使おう！</a></strong><br/>
RSpecの今風の書き方についてのバイブル的な記事。10回以上は読んでいますw</p>

<p><strong><a href="http://magazine.rubyist.net/?0035-RSpecInPractice">改めて学ぶ RSpec</a></strong><br/>
一歩すすんで、 it や describe やテストの実行の仕方などを知った人が実践の中で使っていくために必要なノウハウを中心にまとめてくれています！</p>

<p><strong><a href="http://betterspecs.org/jp/">Better Spec</a></strong><br/>
Better Specsは開発者達の経験を、体系化したドキュメントです。中級者の人が、さらにRSpecでのテストを書けるようになりたいときにぜひ読んでほしい資料です！</p>

<h2>モック・スタブについて</h2>

<p><strong><a href="http://morizyun.github.io/blog/rspec-model-controller-ruby-rails/">RSpec でテストを作るのに役立つ「モック/スタブ」のシンプルな説明</a></strong><br/>
メソッド同士の依存関係を疎に保つのに役に立つのがモックやスタブといった機能です。少しテストを書くのに慣れてきたら是非読んでみてください。</p>

<h2>FactoryGirl</h2>

<p><strong><a href="http://o.inchiki.jp/obbr/159">RailsでFactoryGirlを使ってみるメモ</a></strong><br/>
体系的にFactoryGirlの使い方をまとめているドキュメント。初心者の人のとっかかりから、ちょっと凝った使い方まで網羅されています。素晴らしい！</p>

<p><strong><a href="http://qiita.com/yui-knk/items/bf5ec1bf382e965660b2">factory_girlの使い方 - Qiita</a></strong><br/>
テストのときのFixtureとして有名なfactory_girlの使い方をサンプルソースとセットで説明をしてくれています。FactoryGirlを使いはじめるときに読んでおくと捗るかも。</p>

<p><strong><a href="http://qiita.com/torshinor/items/383691344ec4a2233fe5">Rails - Factory Girl 3.x メモ - Qiita</a></strong><br/>
FactoryGirlの応用的な使い方を中心に説明。初心者むけというよりはFactoryGirlを使っていく中でより、使いこなしたいと思う人にオススメのドキュメント。</p>

<p><strong><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md"> factory_girl / GETTING_STARTED.md</a></strong><br/>
英語が読めるなら、FactoryGirlの本家スタートガイドがおすすめ。洗練されていて一番わかりやすい！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>変更来歴</h2>

<p>(2014-04-17 18:00) 新規作成<br/>
(2014-05-02 08:05) TDD/BDDとは？を追加<br/>
(2015-01-12 22:30) Everyday Railsの書評部分を分離<br/></p>
]]></content>
  </entry>
  
</feed>
