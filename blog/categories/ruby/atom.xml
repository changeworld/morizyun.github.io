<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-05T21:00:31+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第6章 コードを記述するコード[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code/"/>
    <updated>2015-12-05T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter6-class-coding-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>6章 クラス定義</h2>

<h3>オブジェクトの汚染</h3>

<p>外部から来た安全ではないをブジェクを「オブジェクトの汚染」という。
この汚染を判定するメソッドが<code>#tainted?</code>である。</p>

<p>```ruby
user_input = "User input: #{gets()}"
puts "user_input.tainted? => #{ user_input.tainted? }"</p>

<p>only_code_object = 1
puts "only_code_object.tainted? => #{ only_code_object.tainted? }"</p>

<h1>ruby 6.2.4.tainted_code.rb</h1>

<h1>&lt;= 1</h1>

<h1>user_input.tainted? => true</h1>

<h1>only_code_object.tainted? => false</h1>

<p>```</p>

<h3>ERB内のRubyコードの評価メソッド</h3>

<p>ERBの中でRubyのコードを書くとそのコードが<code>eval</code>で評価される。</p>

<p>```ruby
class ERB
  def result(b=new_toplevel)</p>

<pre><code>if @safe_level
  proc {
    $SAFE = @safe_level
    eval(@src, b, (@filename || '(erb)'), 0)
  }.call
else
  eval(@scr, b, (@filename || '(erb)'), 0)
end
</code></pre>

<p>  end
end
```</p>

<p>ユーザーが<code>@safe_level</code>を設定していれば、サンドボックスの中で、コードを評価する。
また、<code>$SAFE</code>はprocの中だけで有効になっており、全体の設定を変更しないようにしている。</p>

<h2>フックメソッド</h2>

<p>Rubyにはいくつかのイベントが発生した時にフックするメソッドが存在する。</p>

<h3>継承にフック</h3>

<p>```ruby
class String
  def self.inherited(subclass)</p>

<pre><code>puts "#{self} は #{subclass} に継承されたよ！"
</code></pre>

<p>  end
end</p>

<p>class MyString &lt; String; end</p>

<h1>=> "String は MyString に継承されたよ！"</h1>

<p>```</p>

<h3>include にフック</h3>

<p>```ruby
module M1
  def self.included(othermod)</p>

<pre><code>puts "#{self} は #{othermod} にincludeされたよ！"
</code></pre>

<p>  end
end</p>

<p>class C
  include M1
end</p>

<h1>=> M1 は C にincludeされたよ！</h1>

<p>```</p>

<h3>prepend にフック</h3>

<p>```ruby
module M2
  def self.prepended(othermod)</p>

<pre><code>puts "#{self} は #{othermod} にprependされたよ！"
</code></pre>

<p>  end
end</p>

<p>class C
  prepend M2
end</p>

<h1>=> M2 は C にprependされたよ！</h1>

<p>```</p>

<p>その他以下のようなメソッドもある。</p>

<pre>
Module#method_added - メソッドを追加した時に呼ばれる
Module#method_removed - メソッドがModule#remove_method により削除された時に呼ばれる
Module#method_undefined - メソッドがModule#undef_method によって削除されるか、 undef 文により未定義になったら呼ばれる

# 特異メソッドのイベントをキャッチする
Kernel#singleton_method_added - 特異メソッドが追加された時に呼ばれる
Karnel#singleton_method_removed - 特異メソッドが削除された時に呼ばれる
Karnel#singleton_method_undefined - 特異メソッドがundefinedになった時に呼ばれる
</pre>


<h2>アトリビュートのチェック</h2>

<h3>全Classで <code>attr_checked</code> を使えるようにする</h3>

<p>classやmoduleのアトリビュートをチェックするようなDSL <code>attr_checked</code>を追加する例。</p>

<p>```ruby
require 'test/unit'</p>

<p>class Class
  def attr_checked(attribute, &amp;validation)</p>

<pre><code>define_method "#{attribute}=" do |value|
  raise 'Invalid attribute' if value.nil? || !value || !validation.call(value)
  instance_variable_set("@#{attribute}", value)
end

define_method attribute do
  instance_variable_get("@#{attribute}")
end
</code></pre>

<p>  end
end</p>

<p>class Person
  attr_checked :age do |v|</p>

<pre><code>v &gt;= 18
</code></pre>

<p>  end
end</p>

<p>class TestCheckedAttribute &lt; Test::Unit::TestCase
  def setup</p>

<pre><code>@bob = Person.new
</code></pre>

<p>  end</p>

<p>  def test_accepts_valid_values</p>

<pre><code>@bob.age = 18
assert_equal 18, @bob.age
</code></pre>

<p>  end</p>

<p>  def test_refuses_invalid_values</p>

<pre><code>assert_raises RuntimeError, 'Invalid attribute' do
  @bob.age = 17
end
</code></pre>

<p>  end</p>

<p>  def test_refuses_nil_values</p>

<pre><code>assert_raises RuntimeError, 'Invalid attribute' do
  @bob.age = nil
end
</code></pre>

<p>  end</p>

<p>  def test_refuses_false_values</p>

<pre><code>assert_raises RuntimeError, 'Invalid attribute' do
  @bob.age = false
end
</code></pre>

<p>  end
end
```</p>

<p>なるほど、これでできるのかとちょっと感激！</p>

<h3>include した時だけ使えるようにする</h3>

<p>```ruby
require 'test/unit'</p>

<p>module CheckedAttributes
  def self.included(base)</p>

<pre><code>base.extend ClassMethods
</code></pre>

<p>  end</p>

<p>  module ClassMethods</p>

<pre><code>def attr_checked(attribute, &amp;validation)
  define_method "#{attribute}=" do |value|
    raise 'Invalid attribute' if value.nil? || !value || !validation.call(value)
    instance_variable_set("@#{attribute}", value)
  end

  define_method attribute do
    instance_variable_get("@#{attribute}")
  end
end
</code></pre>

<p>  end
end</p>

<p>class Person
  include CheckedAttributes</p>

<p>  attr_checked :age do |v|</p>

<pre><code>v &gt;= 18
</code></pre>

<p>  end
end</p>

<p>class TestCheckedAttribute &lt; Test::Unit::TestCase
  def setup</p>

<pre><code>@bob = Person.new
</code></pre>

<p>  end</p>

<p>  def test_accepts_valid_values</p>

<pre><code>@bob.age = 18
assert_equal 18, @bob.age
</code></pre>

<p>  end</p>

<p>  def test_refuses_invalid_values</p>

<pre><code>assert_raises RuntimeError, 'Invalid attribute' do
  @bob.age = 17
end
</code></pre>

<p>  end</p>

<p>  def test_refuses_nil_values</p>

<pre><code>assert_raises RuntimeError, 'Invalid attribute' do
  @bob.age = nil
end
</code></pre>

<p>  end</p>

<p>  def test_refuses_false_values</p>

<pre><code>assert_raises RuntimeError, 'Invalid attribute' do
  @bob.age = false
end
</code></pre>

<p>  end
end
```</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第5章 クラス定義[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition/"/>
    <updated>2015-11-29T19:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter5-class-definition</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第5章の「クラス定義」で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>5章 クラス定義</h2>

<h3>カレントクラスとは？</h3>

<pre>
- プログラムのトップレベルでは「カレントクラス」はmainクラスのObjectになる
- classキーワードでクラスをオープンするとそのクラスが「カレントクラス」となる
- メソッドの中では、カレントオブジェクトのクラスがカレントクラスとなる
</pre>


<h3>class_evalを使ったメソッドの定義</h3>

<p>```ruby
def add_method_to(a_class)
  a_class.class_eval do</p>

<pre><code>def greet
  puts 'Hello'
end
</code></pre>

<p>  end
end</p>

<p>add_method_to String</p>

<p>'bcd'.greet #=> Hello
```</p>

<h3>カレントクラスのまとめ</h3>

<pre>
- Rubyのインタプリタはカレントクラスの参照を追跡する。defで定義されたメソッドはカレントクラスのインスタンスメソッドとなる
- クラス定義内では、カレントオブジェクト self と カレントクラスは同義である
- クラスへの参照を持っていれば、クラスはclass_eval(module_eval)でオープンできる
</pre>


<h3>クラスインスタンス変数</h3>

<p>```ruby
class MyClass
  @my_var = 1 # クラスインスタンス変数</p>

<p>  def self.read</p>

<pre><code>@my_var # クラスインスタンス変数
</code></pre>

<p>  end</p>

<p>  def write(arg_num)</p>

<pre><code>@my_var = (arg_num) # インスタンス変数
</code></pre>

<p>  end</p>

<p>  def read</p>

<pre><code>@my_var # インスタンス変数
</code></pre>

<p>  end
end</p>

<p>obj = MyClass.new
obj.read #=> nil
obj.write(3) #=> 3
obj.read #=> 3
MyClass.read #=> 1
```</p>

<h3>クラス変数の癖</h3>

<p>```ruby
@@v = 1</p>

<p>class MyClass
  @@v = 2
end</p>

<p>puts @@v #=> 2
```</p>

<p>実行結果はこちら。</p>

<p><code>
ruby xxx.rb
xxx.rb:1: warning: class variable access from toplevel
xxx.rb:7: warning: class variable access from toplevel
2
</code></p>

<p>警告は出ているが、<code>@@v</code>の内容が書き換えられている事がわかる。</p>

<h3>クラスメソッド</h3>

<p>クラス・メソッドは『<strong>クラスの特異メソッド</strong>』。</p>

<p>```ruby
class MyClass
  def self.method</p>

<pre><code># メソッドの中身
</code></pre>

<p>  end
end
```</p>

<p>確かに言われてみれば、特異メソッドと言えるかも。</p>

<h2>クラス拡張</h2>

<p>以下の実装をクラス拡張という。</p>

<p>```ruby
module MyModule
  def my_method; 'good evening'; end
end</p>

<p>class MyClass
  class &lt;&lt; self</p>

<pre><code>include MyModule
</code></pre>

<p>  end
end</p>

<p>MyClass.my_method #=> "good evening"
```</p>

<p>このクラス拡張のためのメソッドが、<code>extend</code>。(<code>extend</code>がなくても自分で実装できる)</p>

<p>```ruby
module MyModule
  def my_method; 'good morning'; end
end</p>

<p>class MyClass
  extend MyModule
end</p>

<p>puts MyClass.my_method #=> "good morning"
```</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第4章 ブロック[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block/"/>
    <updated>2015-11-18T20:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第4章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>4章 ブロック</h2>

<h3>ブロックの基礎</h3>

<p>メソッドに block を渡して、簡単に実行させることができます。</p>

<p>```ruby
def a_method
  return yield if block_given?
  'ブロックがありません'
end</p>

<p>puts a_method #=> ブロックがありません
puts a_method { 'ブロックがあります！' } #=> ブロックがあります！
```</p>

<h3>用語: クロージャー</h3>

<p>『<a href="http://language-and-engineering.hatenablog.jp/entry/20101118/p1">Rubyの動かないコード （初級編） ブロックとクロージャの性質 - 主に言語とシステム開発に関して</a>』
の説明が非常に分かりやすかったので、お借りしました。まずはクロージャの説明。</p>

<pre>
- クロージャの外の(より広いスコープで定義された)変数はクロージャの中からでも参照可能
- クロージャの中で定義された変数はクロージャの外からは参照できない。
</pre>


<p>これってつまりはブロックと同じようなものということ。</p>

<pre>
- Rubyのブロックは、ブロック定義時のコンテキスト(変数とか)を保持する
- Rubyのブロック内で宣言された変数は、ブロック内でのみ参照可能な変数となる
</pre>


<h3>instance_eval</h3>

<p><code>instance_eval</code>は、渡されたブロックをレシーバのインスタンスの元で実行します。
private メソッドや@vなどのインスタンス変数にもアクセスできます。</p>

<p>```ruby
class MyClass
  def initialize</p>

<pre><code>@v = 1
</code></pre>

<p>  end
end</p>

<p>obj = MyClass.new</p>

<p>obj.instance_eval do
  puts self #=> &lt;MyClass:0x007ff9f89dcde0>
  puts @v #=> 1
end
```</p>

<h3>instance_exec</h3>

<p>次の例は<code>instance_eval</code> だと、Cのインスタンス変数にしかアクセス出来ないが、
<code>instance_exec</code> を使えば ブロックに引数を渡せます。</p>

<p>```ruby
class C
  def initialize</p>

<pre><code>@x = 1
</code></pre>

<p>  end
end</p>

<p>class D
  def twisted_method</p>

<pre><code>@y = 2
C.new.instance_eval { "@x : #{@x}, @y : #{@y}" }
</code></pre>

<p>  end
end</p>

<p>puts D.new.twisted_method #=> @x : 1, @y :</p>

<p>class E
  def twisted_method</p>

<pre><code>@y = 2
C.new.instance_exec (@y) { |y| "@x : #{@x}, @y : #{y}" }
</code></pre>

<p>  end
end</p>

<p>puts E.new.twisted_method #=> @x : 1, @y : 2
```</p>

<h3>Procオブジェクト</h3>

<p>```ruby
inc = Proc.new { |x| x + 1 }
puts inc.call(2) # => 3</p>

<h1>lambdaの別記法</h1>

<p>inc2 = ->(x) { x - 1 }
puts inc2.call(2) #=> 1
```</p>

<h3>＆修飾</h3>

<p>ブロックを引数として渡したい場合によく使うのが <code>&amp;修飾</code>。</p>

<p>```ruby
def math(a, b)
  yield(a, b)
end</p>

<p>def do_math(a, b, &amp;block)
  math(a, b, &amp;block)
end</p>

<h1>block を Proc(オブジェクト)に変換して渡す</h1>

<p>puts do_math(2, 3) { |x, y| x + y } #=> 5</p>

<h1>Procをブロックに戻す</h1>

<p>def my_method(greeting)
  "#{greeting}, #{yield}!"
end</p>

<p>my_proc = proc { "Bill" }
puts my_method("Hello", &amp;my_proc) #=> "Hello Bill!"
```</p>

<h3>あとで評価の例</h3>

<p><code>highline</code> は lambdaを渡すと、それをユーザーが質問に回答した後に実行してくれる。</p>

<p>```ruby
require 'highline'</p>

<p>hl = HighLine.new
friends = hl.ask('友達を入力してください', lambda { |s| s.split(',') })
puts "友達一覧：#{friends.inspect}"</p>

<h1>=> 友達を入力してください</h1>

<h1>&lt;= hoge,fuga</h1>

<h1>=> 友達一覧：["hoge", "fuga"]</h1>

<p>```</p>

<h3>Procとlambdaの差</h3>

<p>Procとlambdaは次のような違いがある。lambdaのほうがメソッドに挙動が近いので、
特別な事情がない限りはlambdaを使うほうが良さそう。</p>

<pre>
- Proc
  - Procが定義されたスコープから戻る
  - 引数が少なかったり、多すぎた場合によしなに処理をしてくれる
- lambda
  - return した場合、単に lambdaから戻る
  - 引数の数が異なるとArgumentErrorを出す
</pre>


<h3>はじめてのDSL</h3>

<p>DSLの初歩を実践してみる。まずは <code>redflag.rb</code> を作成する。</p>

<p>```ruby
def setup(&amp;block)
  @setups &lt;&lt; block
end
def event(description, &amp;block)
  @events &lt;&lt; { description: description, condition: block }
end</p>

<p>@setups = []
@events = []
load 'event.rb'</p>

<p>@events.each do |event|
  @setups.each do |setup|</p>

<pre><code>setup.call
</code></pre>

<p>  end
  puts "ALERT: #{event[:description]}" if event[:condition].call
end
```</p>

<p>次に <code>event.rb</code> を作成する。</p>

<p>```ruby
setup do
  puts '空の高さを設定'
  @sky_height = 100
end</p>

<p>setup do
  puts '山の高さを設定'
  @mountains_height = 200
end</p>

<p>event '空が落ちてくる' do
  @sky_height &lt; 300
end</p>

<p>event '空が近づいている' do
  @sky_height &lt; @mountains_height
end</p>

<p>event 'もうダメだ....手遅れになってしまった...' do
  @sky_height &lt; 0
end
```</p>

<p>で実行すると次のような結果になる。</p>

<pre>
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が落ちてくる
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が近づいている
#=> 空の高さを設定
#=> 山の高さを設定
</pre>


<p>期待する挙動はしているが、実質的なグローバル変数があり、他の仕組みに影響を与えてしまう可能性がある。</p>

<h2>グローバル変数を排除した実装</h2>

<p>グローバル変数を排除して、クリーンルームを使って実装したのがこちら。</p>

<p>```ruby
lambda {
  setups = []
  events = []</p>

<p>  Kernel.send :define_method, :setup do |&amp;block|</p>

<pre><code>setups &lt;&lt; block
</code></pre>

<p>  end</p>

<p>  Kernel.send :define_method, :event do |description, &amp;block|</p>

<pre><code>events &lt;&lt; { description: description, condition: block }
</code></pre>

<p>  end</p>

<p>  Kernel.send :define_method, :each_setup do |&amp;block|</p>

<pre><code>setups.each do |setup|
  block.call setup
end
</code></pre>

<p>  end</p>

<p>  Kernel.send :define_method, :each_event do |&amp;block|</p>

<pre><code>events.each do |event|
  block.call event
end
</code></pre>

<p>  end
}.call</p>

<p>load '4.6.event.rb'</p>

<p>each_event do |event|
  env = Object.new
  each_setup do |setup|</p>

<pre><code>env.instance_eval &amp;setup
</code></pre>

<p>  end</p>

<p>  puts "ALERT: #{event[:description]}" if env.instance_eval &amp;(event[:condition])
end</p>

<h1>空の高さを設定</h1>

<h1>山の高さを設定</h1>

<h1>ALERT: 空が落ちてくる</h1>

<h1>空の高さを設定</h1>

<h1>山の高さを設定</h1>

<h1>ALERT: 空が近づいている</h1>

<h1>空の高さを設定</h1>

<h1>山の高さを設定</h1>

<p>```</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第3章 メソッド[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3/"/>
    <updated>2015-11-09T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第3章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>3章 メソッド</h2>

<h3>動的メソッドを使ったリファクタリング</h3>

<p>まずは修正前の変更。</p>

<p>```ruby
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
</code></pre>

<p>  end</p>

<p>  def mouse</p>

<pre><code>info = @data_source.get_mouse_info(@id)
price = @data_source.get_mouse_price(@id)
result = "Mouse: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  def cpu</p>

<pre><code>info = @data_source.get_cpu_info(@id)
price = @data_source.get_cpu_price(@id)
result = "Cpu: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  def keyboard</p>

<pre><code>info = @data_source.get_keyboard_info(@id)
price = @data_source.get_keyboard_price(@id)
result = "keyboard: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end
end
```</p>

<p>動的メソッドを使ってリファクタリングを行った結果。</p>

<p>```ruby
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
data_source.methods.grep(/^get_(.*)_info$/) { Computer.define_component $1 }
</code></pre>

<p>  end</p>

<p>  def self.define_component(name)</p>

<pre><code>define_method(name) do
  info = @data_source.get_keyboard_info(@id)
  price = @data_source.get_keyboard_price(@id)
  result = "keyboard: #{info} ($#{price})"
  price &gt;= 100 ? "* #{result}" : result
end
</code></pre>

<p>  end
end
```</p>

<h3>method_missing を使った リファクタリング</h3>

<p>さきほどの <code>Computer</code> クラスを <code>method_missing</code> でリファクタリングした場合。</p>

<p>```ruby
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
</code></pre>

<p>  end</p>

<p>  def method_missing(name)</p>

<pre><code>super if !@data_source.respond_to?("get_#{name}_info")
info = @data_source.send("get_#{name}_info", @id)
price = @data_source.send("get_#{name}_price", @id)
result = "#{name.capitalize}: #{info} ($#{price})"
price &gt;= 100 ? "* #{result}" : result
</code></pre>

<p>  end</p>

<p>  def respond_to_missing?(method, include_private = false)</p>

<pre><code>@data_source.respond_to?("get_#{method}_info") || super
</code></pre>

<p>  end
end
```</p>

<p>ただし、 <code>method_missing</code> はバグが発生した場合に気づきにくい特徴があるので利用には注意が必要。
あと、<code>method_missing</code> よりも、<code>respond_to_missing?</code> のほうが適切というお話もあります。</p>

<p><strong><a href="https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding">Always Define respond_to_missing? When Overriding method_missing</a></strong></p>

<p>ゴーストメソッドの最大の問題点は、本物のメソッドではないという点だ。
振る舞いはメソッドなのに、 <code>Object#methods</code> に含まれないのだ。</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第2章 オブジェクトモデル[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review/"/>
    <updated>2015-10-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第2章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>メタプログラミングとは</h2>

<p>コードを記述するためのコードを書くことである</p>

<h2>2章</h2>

<h3>オープンクラス</h3>

<p>```ruby
require "monetize"</p>

<p>standard_price = 100.to_money('USD')
standard_price.format #=> $100.00
```</p>

<p>とある場合、 <code>to_money</code> は以下のように <code>Numeric</code> クラスを拡張して実装されている。</p>

<p>```ruby
class Numeric
  def to_money(currency = nil)</p>

<pre><code>Monetize.from_numeric(self, currency || Money.default_currency)
</code></pre>

<p>  end
end
```</p>

<p>Rubyは標準クラスでも気軽に拡張できる。これをモンキーパッチと呼ぶ。
しかし例えば拡張したメソッドが標準クラスのメソッドだった場合、その影響範囲が大きくなってしまう。
モンキーパッチの代替案としては、<code>Refinements</code> などを使うことである。</p>

<h3>Classの親クラスは Module</h3>

<p><code>ruby
Class.superclass #=&gt; Module
</code></p>

<p>Class はオブジェクトの生成やクラスを継承するためのインスタンスメソッド new, allocate superclass を追加したモジュールである。</p>

<h3>load と require の違い</h3>

<pre>
- load => loadはコードを実行するために使う。呼び出す度にファイルを実行する
- require => requireはライブラリをインポートするために使う。ファイルは一度しか読み込まない。
</pre>


<h3>モジュールの継承関係</h3>

<p>継承チェーンはクラスからスーパークラスに向かって進む。
それだけではなく、継承チェーンにはモジュールも含まれる。</p>

<p>```ruby
module M1
  def my_method</p>

<pre><code>'M1#my_method()'
</code></pre>

<p>  end
end</p>

<p>module M2
  def my_method_second</p>

<pre><code>'M2#my_method_second()'
</code></pre>

<p>  end
end</p>

<p>class C
  include M1
  prepend M2
end</p>

<p>class D &lt; C; end</p>

<h1>継承関係を見るメソッド</h1>

<p>puts D.ancestors.to_s # => [D, M2, C, M1, Object, Kernel, BasicObject]
```</p>

<p>このようにM1やKernelなどのModuleも継承関係に含まれている事がわかる。</p>

<p>ちなみに、モジュールがすでにチェーンに存在していた場合は、2回目の挿入を無視する。
(何度も継承チェーンに同じオブジェクトが含まれることはない)</p>

<h3>Rubyにおける private について</h3>

<p>```ruby
class C
  def public_method_no_self</p>

<pre><code>private_method
</code></pre>

<p>  end</p>

<p>  def public_method_with_self</p>

<pre><code>self.private_method
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def private_method</p>

<pre><code>'called private method'
</code></pre>

<p>  end
end</p>

<p>puts C.new.public_method_no_self</p>

<p>puts C.new.public_method_with_self
```</p>

<h3>Refinementsについて</h3>

<p>module で限定されたスコープの中でのみ、Stringを限定して拡張できる。</p>

<p>```ruby
module StringExtensions
  refine String do</p>

<pre><code>def reverse
  'esrever'
end
</code></pre>

<p>  end
end</p>

<p>module Strings
  using StringExtensions</p>

<p>  puts 'my_string'.reverse #=> esrever
end</p>

<p>puts 'my_string'.reverse #=> gnirts_ym
```</p>

<p>これにより、モンキーパッチで発生するようなグローバルな変更を避けることができる。
ただし、<code>Refinements</code>は新しい機能で、将来挙動が変わる可能性がある。
そのことを理解したうえで、プログラムを書くべきである。</p>

<h3>まとめ</h3>

<ul>
<li>オブジェクトは複数のインスタンス変数とクラスへのリンクで構成</li>
<li>インスタンス目ドッドはオブジェクトの Class に住んでいる</li>
<li>クラスは Class クラスのオブジェクトである。クラスは単なる定数である</li>
<li>Class は Module のサブクラスである</li>
<li>Module は基本的にはメソッドをまとめたものである</li>
<li>クラスは new でインスタンス化したり、 superclass で階層構造を作ったりできる</li>
<li>クラスはそれぞれ、BasicObject まで続く継承チェーンを持っている</li>
<li>クラスにモジュールをinclude(prepend)すると、そのクラスの継承チェーンの真上(下)にモジュールが挿入される</li>
<li>メソッドを呼び出すときには、レシーバがselfになる</li>
<li>モジュール(あるいはクラス)を定義するときには、そのモジュールがselfになる</li>
<li>インスタンス変数は常にselfのインスタンス変数とみなされる</li>
</ul>


<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
</feed>
