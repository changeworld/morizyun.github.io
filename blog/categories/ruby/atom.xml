<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-11-20T10:19:44+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第4章 ブロック[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block/"/>
    <updated>2015-11-18T20:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter4-block</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第4章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>4章 ブロック</h2>

<h3>ブロックの基礎</h3>

<p>メソッドに block を渡して、簡単に実行させることができます。</p>

<p>```ruby
def a_method
  return yield if block_given?
  'ブロックがありません'
end</p>

<p>puts a_method #=> ブロックがありません
puts a_method { 'ブロックがあります！' } #=> ブロックがあります！
```</p>

<h3>用語: クロージャー</h3>

<p>『<a href="http://language-and-engineering.hatenablog.jp/entry/20101118/p1">Rubyの動かないコード （初級編） ブロックとクロージャの性質 - 主に言語とシステム開発に関して</a>』
の説明が非常に分かりやすかったので、お借りしました。まずはクロージャの説明。</p>

<pre>
- クロージャの外の(より広いスコープで定義された)変数はクロージャの中からでも参照可能
- クロージャの中で定義された変数はクロージャの外からは参照できない。
</pre>


<p>これってつまりはブロックと同じようなものということ。</p>

<pre>
- Rubyのブロックは、ブロック定義時のコンテキスト(変数とか)を保持する
- Rubyのブロック内で宣言された変数は、ブロック内でのみ参照可能な変数となる
</pre>


<h3>instance_eval</h3>

<p><code>instance_eval</code>は、渡されたブロックをレシーバのインスタンスの元で実行します。
private メソッドや@vなどのインスタンス変数にもアクセスできます。</p>

<p>```ruby
class MyClass
  def initialize</p>

<pre><code>@v = 1
</code></pre>

<p>  end
end</p>

<p>obj = MyClass.new</p>

<p>obj.instance_eval do
  puts self #=> &lt;MyClass:0x007ff9f89dcde0>
  puts @v #=> 1
end
```</p>

<h3>instance_exec</h3>

<p>次の例は<code>instance_eval</code> だと、Cのインスタンス変数にしかアクセス出来ないが、
<code>instance_exec</code> を使えば ブロックに引数を渡せます。</p>

<p>```ruby
class C
  def initialize</p>

<pre><code>@x = 1
</code></pre>

<p>  end
end</p>

<p>class D
  def twisted_method</p>

<pre><code>@y = 2
C.new.instance_eval { "@x : #{@x}, @y : #{@y}" }
</code></pre>

<p>  end
end</p>

<p>puts D.new.twisted_method #=> @x : 1, @y :</p>

<p>class E
  def twisted_method</p>

<pre><code>@y = 2
C.new.instance_exec (@y) { |y| "@x : #{@x}, @y : #{y}" }
</code></pre>

<p>  end
end</p>

<p>puts E.new.twisted_method #=> @x : 1, @y : 2
```</p>

<h3>Procオブジェクト</h3>

<p>```ruby
inc = Proc.new { |x| x + 1 }
puts inc.call(2) # => 3</p>

<h1>lambdaの別記法</h1>

<p>inc2 = ->(x) { x - 1 }
puts inc2.call(2) #=> 1
```</p>

<h3>＆修飾</h3>

<p>ブロックを引数として渡したい場合によく使うのが <code>&amp;修飾</code>。</p>

<p>```ruby
def math(a, b)
  yield(a, b)
end</p>

<p>def do_math(a, b, &amp;block)
  math(a, b, &amp;block)
end</p>

<h1>block を Proc(オブジェクト)に変換して渡す</h1>

<p>puts do_math(2, 3) { |x, y| x + y } #=> 5</p>

<h1>Procをブロックに戻す</h1>

<p>def my_method(greeting)
  "#{greeting}, #{yield}!"
end</p>

<p>my_proc = proc { "Bill" }
puts my_method("Hello", &amp;my_proc) #=> "Hello Bill!"
```</p>

<h3>あとで評価の例</h3>

<p><code>highline</code> は lambdaを渡すと、それをユーザーが質問に回答した後に実行してくれる。</p>

<p>```ruby
require 'highline'</p>

<p>hl = HighLine.new
friends = hl.ask('友達を入力してください', lambda { |s| s.split(',') })
puts "友達一覧：#{friends.inspect}"</p>

<h1>=> 友達を入力してください</h1>

<h1>&lt;= hoge,fuga</h1>

<h1>=> 友達一覧：["hoge", "fuga"]</h1>

<p>```</p>

<h3>Procとlambdaの差</h3>

<p>Procとlambdaは次のような違いがある。lambdaのほうがメソッドに挙動が近いので、
特別な事情がない限りはlambdaを使うほうが良さそう。</p>

<pre>
- Proc
  - Procが定義されたスコープから戻る
  - 引数が少なかったり、多すぎた場合によしなに処理をしてくれる
- lambda
  - return した場合、単に lambdaから戻る
  - 引数の数が異なるとArgumentErrorを出す
</pre>


<h3>はじめてのDSL</h3>

<p>DSLの初歩を実践してみる。まずは <code>redflag.rb</code> を作成する。</p>

<p>```ruby
def setup(&amp;block)
  @setups &lt;&lt; block
end
def event(description, &amp;block)
  @events &lt;&lt; { description: description, condition: block }
end</p>

<p>@setups = []
@events = []
load 'event.rb'</p>

<p>@events.each do |event|
  @setups.each do |setup|</p>

<pre><code>setup.call
</code></pre>

<p>  end
  puts "ALERT: #{event[:description]}" if event[:condition].call
end
```</p>

<p>次に <code>event.rb</code> を作成する。</p>

<p>```ruby
setup do
  puts '空の高さを設定'
  @sky_height = 100
end</p>

<p>setup do
  puts '山の高さを設定'
  @mountains_height = 200
end</p>

<p>event '空が落ちてくる' do
  @sky_height &lt; 300
end</p>

<p>event '空が近づいている' do
  @sky_height &lt; @mountains_height
end</p>

<p>event 'もうダメだ....手遅れになってしまった...' do
  @sky_height &lt; 0
end
```</p>

<p>で実行すると次のような結果になる。</p>

<pre>
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が落ちてくる
#=> 空の高さを設定
#=> 山の高さを設定
#=> ALERT: 空が近づいている
#=> 空の高さを設定
#=> 山の高さを設定
</pre>


<p>期待する挙動はしているが、実質的なグローバル変数があり、他の仕組みに影響を与えてしまう可能性がある。</p>

<h2>グローバル変数を排除した実装</h2>

<p>グローバル変数を排除して、クリーンルームを使って実装したのがこちら。</p>

<p>```ruby
lambda {
  setups = []
  events = []</p>

<p>  Kernel.send :define_method, :setup do |&amp;block|</p>

<pre><code>setups &lt;&lt; block
</code></pre>

<p>  end</p>

<p>  Kernel.send :define_method, :event do |description, &amp;block|</p>

<pre><code>events &lt;&lt; { description: description, condition: block }
</code></pre>

<p>  end</p>

<p>  Kernel.send :define_method, :each_setup do |&amp;block|</p>

<pre><code>setups.each do |setup|
  block.call setup
end
</code></pre>

<p>  end</p>

<p>  Kernel.send :define_method, :each_event do |&amp;block|</p>

<pre><code>events.each do |event|
  block.call event
end
</code></pre>

<p>  end
}.call</p>

<p>load '4.6.event.rb'</p>

<p>each_event do |event|
  env = Object.new
  each_setup do |setup|</p>

<pre><code>env.instance_eval &amp;setup
</code></pre>

<p>  end</p>

<p>  puts "ALERT: #{event[:description]}" if env.instance_eval &amp;(event[:condition])
end</p>

<h1>空の高さを設定</h1>

<h1>山の高さを設定</h1>

<h1>ALERT: 空が落ちてくる</h1>

<h1>空の高さを設定</h1>

<h1>山の高さを設定</h1>

<h1>ALERT: 空が近づいている</h1>

<h1>空の高さを設定</h1>

<h1>山の高さを設定</h1>

<p>```</p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第3章 メソッド[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3/"/>
    <updated>2015-11-09T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-review-chapter3</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第3章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>3章 メソッド</h2>

<h3>動的メソッドを使ったリファクタリング</h3>

<p>まずは修正前の変更。</p>

<p>```ruby
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
</code></pre>

<p>  end</p>

<p>  def mouse</p>

<pre><code>info = @data_source.get_mouse_info(@id)
price = @data_source.get_mouse_price(@id)
result = "Mouse: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  def cpu</p>

<pre><code>info = @data_source.get_cpu_info(@id)
price = @data_source.get_cpu_price(@id)
result = "Cpu: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  def keyboard</p>

<pre><code>info = @data_source.get_keyboard_info(@id)
price = @data_source.get_keyboard_price(@id)
result = "keyboard: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end
end
```</p>

<p>動的メソッドを使ってリファクタリングを行った結果。</p>

<p>```ruby
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
data_source.methods.grep(/^get_(.*)_info$/) { Computer.define_component $1 }
</code></pre>

<p>  end</p>

<p>  def self.define_component(name)</p>

<pre><code>define_method(name) do
  info = @data_source.get_keyboard_info(@id)
  price = @data_source.get_keyboard_price(@id)
  result = "keyboard: #{info} ($#{price})"
  price &gt;= 100 ? "* #{result}" : result
end
</code></pre>

<p>  end
end
```</p>

<h3>method_missing を使った リファクタリング</h3>

<p>さきほどの <code>Computer</code> クラスを <code>method_missing</code> でリファクタリングした場合。</p>

<p>```ruby
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
</code></pre>

<p>  end</p>

<p>  def method_missing(name)</p>

<pre><code>super if !@data_source.respond_to?("get_#{name}_info")
info = @data_source.send("get_#{name}_info", @id)
price = @data_source.send("get_#{name}_price", @id)
result = "#{name.capitalize}: #{info} ($#{price})"
price &gt;= 100 ? "* #{result}" : result
</code></pre>

<p>  end</p>

<p>  def respond_to_missing?(method, include_private = false)</p>

<pre><code>@data_source.respond_to?("get_#{method}_info") || super
</code></pre>

<p>  end
end
```</p>

<p>ただし、 <code>method_missing</code> はバグが発生した場合に気づきにくい特徴があるので利用には注意が必要。
あと、<code>method_missing</code> よりも、<code>respond_to_missing?</code> のほうが適切というお話もあります。</p>

<p><strong><a href="https://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding">Always Define respond_to_missing? When Overriding method_missing</a></strong></p>

<p>ゴーストメソッドの最大の問題点は、本物のメソッドではないという点だ。
振る舞いはメソッドなのに、 <code>Object#methods</code> に含まれないのだ。</p>

<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第2章 オブジェクトモデル[勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review/"/>
    <updated>2015-10-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第2章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>メタプログラミングとは</h2>

<p>コードを記述するためのコードを書くことである</p>

<h2>2章</h2>

<h3>オープンクラス</h3>

<p>```ruby
require "monetize"</p>

<p>standard_price = 100.to_money('USD')
standard_price.format #=> $100.00
```</p>

<p>とある場合、 <code>to_money</code> は以下のように <code>Numeric</code> クラスを拡張して実装されている。</p>

<p>```ruby
class Numeric
  def to_money(currency = nil)</p>

<pre><code>Monetize.from_numeric(self, currency || Money.default_currency)
</code></pre>

<p>  end
end
```</p>

<p>Rubyは標準クラスでも気軽に拡張できる。これをモンキーパッチと呼ぶ。
しかし例えば拡張したメソッドが標準クラスのメソッドだった場合、その影響範囲が大きくなってしまう。
モンキーパッチの代替案としては、<code>Refinements</code> などを使うことである。</p>

<h3>Classの親クラスは Module</h3>

<p><code>ruby
Class.superclass #=&gt; Module
</code></p>

<p>Class はオブジェクトの生成やクラスを継承するためのインスタンスメソッド new, allocate superclass を追加したモジュールである。</p>

<h3>load と require の違い</h3>

<pre>
- load => loadはコードを実行するために使う。呼び出す度にファイルを実行する
- require => requireはライブラリをインポートするために使う。ファイルは一度しか読み込まない。
</pre>


<h3>モジュールの継承関係</h3>

<p>継承チェーンはクラスからスーパークラスに向かって進む。
それだけではなく、継承チェーンにはモジュールも含まれる。</p>

<p>```ruby
module M1
  def my_method</p>

<pre><code>'M1#my_method()'
</code></pre>

<p>  end
end</p>

<p>module M2
  def my_method_second</p>

<pre><code>'M2#my_method_second()'
</code></pre>

<p>  end
end</p>

<p>class C
  include M1
  prepend M2
end</p>

<p>class D &lt; C; end</p>

<h1>継承関係を見るメソッド</h1>

<p>puts D.ancestors.to_s # => [D, M2, C, M1, Object, Kernel, BasicObject]
```</p>

<p>このようにM1やKernelなどのModuleも継承関係に含まれている事がわかる。</p>

<p>ちなみに、モジュールがすでにチェーンに存在していた場合は、2回目の挿入を無視する。
(何度も継承チェーンに同じオブジェクトが含まれることはない)</p>

<h3>Rubyにおける private について</h3>

<p>```ruby
class C
  def public_method_no_self</p>

<pre><code>private_method
</code></pre>

<p>  end</p>

<p>  def public_method_with_self</p>

<pre><code>self.private_method
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def private_method</p>

<pre><code>'called private method'
</code></pre>

<p>  end
end</p>

<p>puts C.new.public_method_no_self</p>

<p>puts C.new.public_method_with_self
```</p>

<h3>Refinementsについて</h3>

<p>module で限定されたスコープの中でのみ、Stringを限定して拡張できる。</p>

<p>```ruby
module StringExtensions
  refine String do</p>

<pre><code>def reverse
  'esrever'
end
</code></pre>

<p>  end
end</p>

<p>module Strings
  using StringExtensions</p>

<p>  puts 'my_string'.reverse #=> esrever
end</p>

<p>puts 'my_string'.reverse #=> gnirts_ym
```</p>

<p>これにより、モンキーパッチで発生するようなグローバルな変更を避けることができる。
ただし、<code>Refinements</code>は新しい機能で、将来挙動が変わる可能性がある。
そのことを理解したうえで、プログラムを書くべきである。</p>

<h3>まとめ</h3>

<ul>
<li>オブジェクトは複数のインスタンス変数とクラスへのリンクで構成</li>
<li>インスタンス目ドッドはオブジェクトの Class に住んでいる</li>
<li>クラスは Class クラスのオブジェクトである。クラスは単なる定数である</li>
<li>Class は Module のサブクラスである</li>
<li>Module は基本的にはメソッドをまとめたものである</li>
<li>クラスは new でインスタンス化したり、 superclass で階層構造を作ったりできる</li>
<li>クラスはそれぞれ、BasicObject まで続く継承チェーンを持っている</li>
<li>クラスにモジュールをinclude(prepend)すると、そのクラスの継承チェーンの真上(下)にモジュールが挿入される</li>
<li>メソッドを呼び出すときには、レシーバがselfになる</li>
<li>モジュール(あるいはクラス)を定義するときには、そのモジュールがselfになる</li>
<li>インスタンス変数は常にselfのインスタンス変数とみなされる</li>
</ul>


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv を update して最新のRuby バージョンをインストール[Homebrew]]]></title>
    <link href="http://morizyun.github.io/blog/rbenv-update-brew-new-ruby-version/"/>
    <updated>2015-10-25T11:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rbenv-update-brew-new-ruby-version</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774175676/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774175676&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774175676&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774175676" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />MacでRuby/Railsの開発をしていると定期的にローカルのRubyのバージョンアップをする事になります。
Homebrewでrbenv, rbenv-buildをインストールしている環境で最新の Ruby バージョンをインストールするための手順をたまに困るのでメモしておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>rbenv-buildのアップデート手順</h2>

<p>```ruby</p>

<h1>Homebrewをアップデート</h1>

<p>brew update</p>

<h1>ruby-buildをアップデート</h1>

<p>brew upgrade ruby-build</p>

<h1>インストール可能なrubyのバージョンを確認</h1>

<p>rbenv install --list</p>

<h1>Rubyの指定したバージョン(今回は2.2.3)をインストール</h1>

<p>rbenv install 2.2.3</p>

<h1>通常使う Rubyを設定</h1>

<p>rbenv global 2.2.3</p>

<h1>設定結果を確認</h1>

<p>rbenv versions
```</p>

<h2>rbenvの新規インストール手順</h2>

<p>Macへのrbenvのインストールがまだの場合はこちらをご覧ください。</p>

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac Yosemite Rails 最新環境 詳解 構築手順 </a></strong></li>
</ul>


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Speical Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/yujiroarai/items/56f40b0a1fecff2cd11c">brewでインストールしたrbenvをupgradeしてruby2.0.0をインストールする - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review/"/>
    <updated>2015-01-12T22:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review</id>
    <content type="html"><![CDATA[<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
が、RSpec3に対応したとの噂を聞いて1年ぶりに読み直しました。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアル
としてRspecの実践的な使い方が習得できる素晴らしい本です。</p>

<p>今回は『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
を読んでいく中で、特に印象に残った部分を中心にピックアップしていきます。ブログ駆動勉強ですw</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Everyday Railsのサンプルソース</h2>

<p><strong><a href="https://github.com/everydayrails/rspec_rails_4">everydayrails/rspec_rails_4 - GitHub</a></strong></p>

<p>この書籍ではできるだけRspecやテストに集中できるようにサンプルソースが用意されています。しかもRails4対応と至れり尽くせりです。素晴らしい！
ターミナルで以下のコマンドを実行すると、ローカルにソースコードをダウンロードできます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/everydayrails/rspec_rails_4.git
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>自分でコードを書く</h2>

<p>勉強をするときにコピペをするのではなく、自分でコードをタイピングしていくべき。
これは最近学習によって得られる知識がかなり変わることを実感しているのですごく共感できます！</p>

<h2>テスト設計について</h2>

<p>TDDで動くコードを書く前にRSpecのexample(itで始まる行)まで書いてテスト設計する。
いつもテストが先か、コードが先かで悩んでいました。この理由の一つは動かない状態のテストの設計をどこに
書くかでしたが、この本を読んでいく中でこういうふうに先に設計すればTDDの流れの中で開発できるんだと感激ました＾＾</p>

<h2>絶対に覚えておきたいRSpecを書くときの基本</h2>

<pre>
* Specアウトラインをベースに考える
* example(itで始まる行)は原因究明しやすいように結果を1つに絞る
* 期待する結果は能動形、具体的に記述すること
* 「起きてほしいこと、起きてほしくないこと」の両方のテストを書くこと
* 境界値テストをすること
* スペックの可読性を高めることに努めること
</pre>


<h2>コントローラスペックについて</h2>

<p>feature specに比べてコントローラスペックのほうが、少ないコストでテストできる。
コントローラのテストは、自動生成されていないコードで、テストにコストをかけて効果が高そうなものを選定するといい。
その結果しっかりテストされたコントローラがあれば、アプリ全体のテスト網羅率を向上させることができる。</p>

<h2>FactoryGirlのテクニック</h2>

<p>以下のようにファクトリを書くことで、<code>home_phone</code>と<code>work_phone</code>を使わける事ができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:phone</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;association :contact</span>
</span><span class='line'><span class="sr">phone &#39;123-555-1234&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">factory :home_phone do</span>
</span><span class='line'><span class="sr">  phone_type: &#39;home&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">factory :work_phone do</span>
</span><span class='line'><span class="sr">  phone_type: &#39;work&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>また、『<strong><a href="https://github.com/stympy/faker">stympy/faker</a></strong>』を使うと、
住所やURL、メールアドレスなどのリアルなダミーデータを生成してくれます。</p>

<p>ただ日本語のふりがななどに対応しようと思うと『<strong><a href="https://github.com/willnet/gimei">willnet/gimei</a></strong>』
がオススメです。日本語のリアルな住所を組み合わせたダミーデータも簡単に作成する事ができます。</p>

<p>FactoryGirlはテストを遅くすることがあるそうなので、必要なときに適切に使う事が重要とのことです。</p>

<h2>shared_examples</h2>

<p><code>shared_exmamples</code>とは、いくつかのテストをグループ化して、メソッドのように何度も呼び出せる機能です。
下は公式サンプルのテストですが、これを見るとひと目でわかると思います！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;set&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.shared_examples &quot;a collection&quot; do</span>
</span><span class='line'><span class="sr">  let(:collection) { described_class.new([7, 2, 4]) }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">context</span> <span class="s2">&quot;initialized with 3 items&quot;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;it &quot;says it has three items&quot; do</span>
</span><span class='line'><span class="sr">  expect(collection.size).to eq(3)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">context</span> <span class="s2">&quot;with an an item that is in the collection&quot;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;it &quot;returns true&quot; do</span>
</span><span class='line'><span class="sr">  expect(collection.include?(7)).to be_truthy</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="nb">Array</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ↓shared_examplesを関数のように呼び出している</span>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="s2">&quot;a collection&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; Array&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>   <span class="n">behaves</span> <span class="n">like</span> <span class="n">a</span> <span class="n">collection</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;     initialized with 3 items&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>       <span class="n">says</span> <span class="n">it</span> <span class="n">has</span> <span class="n">three</span> <span class="n">items</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;     with an an item that is in the collection&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>       <span class="n">returns</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.describe Set do</span>
</span><span class='line'><span class="sr">  # ↓shared_examplesを関数のように呼び出している</span>
</span><span class='line'><span class="sr">  it_behaves_like &quot;a collection&quot;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="no">Set</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;   behaves like a collection&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>     <span class="n">initialized</span> <span class="n">with</span> <span class="mi">3</span> <span class="n">items</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;       says it has three items&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>     <span class="n">with</span> <span class="n">an</span> <span class="n">an</span> <span class="n">item</span> <span class="n">that</span> <span class="n">is</span> <span class="k">in</span> <span class="n">the</span> <span class="n">collection</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;       returns true&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>FactoryGirlでローカルのファイルを指定する方法</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;ローカルのファイルを指定する方法&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;avatar { File.new(&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sr">/s</span><span class="n">pec</span><span class="o">/</span><span class="n">factories</span><span class="o">/</span><span class="n">avatar</span><span class="o">.</span><span class="n">png</span><span class="s2">&quot;) }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Rspecの便利マッチャー</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;正規表現でのチェック&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="s2">&quot;a string&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">match</span> <span class="sr">/a regex/</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;配列のチェック&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match_array</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>テストで特定の時間を指定する方法</h2>

<p><strong><a href="https://github.com/travisjeffery/timecop">travisjeffery/timecop - GitHub</a></strong></p>

<p>特定の曜日や日にちに依存する処理がある場合に、そのテストをすることができる。また、時間を止めることができるのでタイムスタンプが正しく動いているかのテストなどができる。</p>

<h2>メールのテスト</h2>

<p><strong><a href="https://github.com/bmabey/email-spec/">bmabey/email-spec -GitHub</a></strong></p>

<p>EmailについてテストをするためのGem。知らなかったけどこれはすごい使えそう。今度試してみます！</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>変更来歴</h2>

<p>(2015-01-12 22:30) 既存記事から分離して新規作成<br/></p>
]]></content>
  </entry>
  
</feed>
