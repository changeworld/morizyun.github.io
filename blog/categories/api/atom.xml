<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:56:30+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RequestBin respondto.it エンドポイントへのHTTPテスト用サービス]]></title>
    <link href="http://morizyun.github.io/blog/endpoint-http-testing-api-json/"/>
    <updated>2014-10-19T12:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/endpoint-http-testing-api-json</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048915134/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048915134&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048915134&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048915134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
APIへのアクセスのあるiPhoneアプリなどのクライアントを作るときに、まだAPIがない。。。なんてときに重宝するサービス、『<strong><a href="http://requestb.in/">RequestBin</a></strong>』と『<strong><a href="http://respondto.it/">respondto.it</a></strong>』の紹介です。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>RequestBin</h2>

<p><img src="https://farm4.staticflickr.com/3947/15562851452_91197ff3e1_z.jpg" width="640" height="343"></p>

<p>『<strong><a href="http://requestb.in/">RequestBin</a></strong>』はテスト用のエンドポイントを簡単に作る事ができるサービスです。
このサービスを使うと、クライアントからどんなリクエスト(パラメータ)があったかをWeb画面上から簡単に確認できます。
まだAPIがないようなクライアントでもどんなアクセスをしているかを簡単に確認することができます。<br/>
(ドキュメントを読みきれていませんが、たしか1日だけ使えるURLとかRebuild.fmで言ってたハズ)</p>

<h2>respondto.it</h2>

<p><img src="https://farm4.staticflickr.com/3950/15383384060_86bd6113e8_z.jpg" width="640" height="424"></p>

<p>『<strong><a href="http://respondto.it/">respondto.it</a></strong>』もRequestBinとほぼ同じく、テスト用のエンドポイントを作れます。
respondto.it のいいところは、</p>

<pre>
* jsonやxmlのエンドポイントも作れる
* Responseの値を自由に決められる
</pre>


<p>という点です。僕の用途ではrespondto.itがフィットしました！</p>

<h2>おまけ</h2>

<p>今回は触っていませんが、こんなのもアルっぽいです。</p>

<p><a href="http://www.jsontest.com/">JSON Test by jsontest</a></p>

<p><a href="http://httpbin.org/">httpbin(1): HTTP Client Testing Service</a></p>

<h2>あとがき</h2>

<p>一ヶ月近くブログを書けていませんでしたorz... これからはできるだけブログを書く習慣を取り戻していきたいお。</p>

<h2>Special Thanks</h2>

<p><a href="http://www.lornajane.net/posts/2013/endpoints-for-http-testing">Endpoints for HTTP Testing | LornaJane</a></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英和・和英辞書APIのデ辞蔵を呼び出すRubyコードのサンプル]]></title>
    <link href="http://morizyun.github.io/blog/dejizo-api-dictionary-api-ruby/"/>
    <updated>2013-12-28T09:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/dejizo-api-dictionary-api-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774149802/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774149802&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774149802&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774149802" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />この前のハッカソンで、英和・和英辞書のAPIを公開しているサービスを教えてもらって実際に使ってみたところ、なかなか面白かったのでメモがてらRubyのサンプルソースを共有します！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>英和・和英辞書APIのデ辞蔵 公式サイト</h2>

<p>デ辞蔵さんのサービスの紹介ページがこちら。</p>

<p><strong><a href="http://dejizo.jp/dev/index.html">デ辞蔵Webサービスとは - デ辞蔵</a></strong></p>

<p>でもって、REST APIの使用紹介はこちら。</p>

<p><strong><a href="http://dejizo.jp/dev/rest.html">REST版API - デ辞蔵</a></strong></p>

<p>取得できるのはXMLのみですが、シンプルな仕様なので、簡単に習得できます。</p>

<h2>英単語 => 日本語訳のサンプルソース(英和)</h2>

<p>ということで説明は苦手なので早速コードを。</p>

<p>まずは、英単語を和訳するための</p>

<p>{% codeblock lang:ruby %}
 def translate_en_to_jp(word_en)</p>

<pre><code># (1) 英単語の単語ItemIdを取得
enc_word = URI.encode(word_en)
url = "http://public.dejizo.jp/NetDicV09.asmx/SearchDicItemLite?Dic=EJdict&amp;Word=#{enc_word}&amp;Scope=HEADWORD&amp;Match=EXACT&amp;Merge=OR&amp;Prof=XHTML&amp;PageSize=20&amp;PageIndex=0"
xml = open(url).read
doc = Nokogiri::XML(xml)
item_id = doc.search('ItemID').first.inner_text rescue nil
return nil unless item_id

# (2)英単語のItemIdから翻訳を取得
url = "http://public.dejizo.jp/NetDicV09.asmx/GetDicItemLite?Dic=EJdict&amp;Item=#{item_id}&amp;Loc=&amp;Prof=XHTML"
xml = open(url).read
doc = Nokogiri::XML(xml)
text = doc.search('Body').inner_text rescue nil
text.gsub!(/(\r\n|\r|\n|\t|\s)/, '')
return text
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>デ辞蔵さんのAPIではこんなふうに、単語のItemIdを取得してからその日本語訳を取得するようになります。2段階のアクセスですが、XMLがシンプルなので使いやすいです！</p>

<h2>日本語の単語 => 英単語のサンプルソース(和英)</h2>

<p>続いて、日本語の単語から対応する英単語を取得する和英辞書のサンプルソースです。</p>

<p>{% codeblock lang:ruby %}
  def translate_jp_to_en(word_jp)</p>

<pre><code># 日本語単語のItemIdを取得
enc_word = URI.encode(word_jp)
url = "http://public.dejizo.jp/NetDicV09.asmx/SearchDicItemLite?Dic=EdictJE&amp;Word=#{enc_word}&amp;Scope=HEADWORD&amp;Match=EXACT&amp;Merge=OR&amp;Prof=XHTML&amp;PageSize=20&amp;PageIndex=0"
xml = open(url).read
doc = Nokogiri::XML(xml)
item_id = doc.search('ItemID').first.inner_text rescue nil
return item_id unless item_id

# 日本語単語のItemIdから英単語を取得
url = "http://public.dejizo.jp/NetDicV09.asmx/GetDicItemLite?Dic=EdictJE&amp;Item=#{item_id}&amp;Loc=&amp;Prof=XHTML"
xml = open(url).read
doc = Nokogiri::XML(xml)
text = doc.search('Body').inner_text rescue nil
text.gsub!(/(\r\n|\r|\n|\t|\s)/, '')
return text
</code></pre>

<p>  end
{% endcodeblock %}</p>

<p>ということでかんたんですがサンプルソースのご紹介でした。</p>

<p>ソースコードにツッコミ大歓迎です。コメント頂けたら、泣いて喜びますw</p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのテストやRails4.1のChange Logについて【Rails東京 第90回】]]></title>
    <link href="http://morizyun.github.io/blog/rspec-changelog-rails-tokyo-90/"/>
    <updated>2013-12-21T20:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rspec-changelog-rails-tokyo-90</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798121932&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798121932&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798121932" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />12/21(土)に開催された<strong><a href="http://railsmeetingtokyo.doorkeeper.jp/events/7642">Rails東京 第90回</a></strong>の勉強会のレポート記事です。</p>

<p>この勉強会は全員参加型で議論し合うので、そこで出た多様な意見や答えを通して、考えを広げることができます。本当にためになる勉強会です＾＾</p>

<p>今回は僕が参加した次の2つのセッションについてレポートします。</p>

<pre>
(1) Railsのテストについて
(2) Rails 4.1のChangeLogについて
</pre>


<p>この記事は基本的には僕の忘備録なので、読みにくいかもです。こうして欲しいなどのリクエストがあればどんどんコメントください。あと、病み上がりで若干ぼけてたので、変なところがあればツッコミよろしくお願いします！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>(1) Railsのテストについて</h2>

<h3>テストの種類や代表的なツール</h3>

<p>テストの種類を大きく分けると2つ。</p>

<pre>
(A) MVCの動作を保証するためのテスト(カバレッジを上げるためのテストなど)
(B) Acceptance Test(受け入れテスト)について
</pre>


<p>MVCのテストフレームワークとして代表的なものは、<strong><a href="http://rspec.info/">Rspec</a>, <a href="https://github.com/seattlerb/minitest">Mini Test</a>、<a href="http://pivotal.github.io/jasmine/">Jasmin</a></strong>などなど。</p>

<p>受け入れテストとして代表的なのは、<a href="http://cukes.info/">Cucumber</a>、<a href="https://github.com/jnicklas/turnip">Turnip</a>、<strong><a href="https://github.com/jnicklas/capybara">Capybara</a>、<a href="http://www.seleniumhq.org/">Selenium</a>、<a href="https://github.com/thoughtbot/capybara-webkit">Capybara-webkit</a>、<a href="http://phantomjs.org/">PhantomJS</a>、<a href="https://github.com/jonleighton/poltergeist">Poltergeist</a></strong>など。</p>

<p>ちなみにテスト周りではこちらの記事がオススメ。</p>

<p><strong><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">Rubyist Magazine - エンドツーエンドテストの自動化は Cucumber から Turnip へ</a></strong></p>

<p><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip"><img src="http://farm6.staticflickr.com/5510/11474622583_0d3a87a503_z.jpg"/></a></p>

<h2>カバレッジについて</h2>

<p>テストは「振る舞い」を確実に記述するようにする。カバレッジは100%を目指す必要はなくって、低い時に確認をするための指針にする。コスト見合いでシステムに応じて着地点を見出す。</p>

<h2>受け入れテストについて</h2>

<p>受け入れテストは、Request spec よりもCapybaraやTurnipなどで書いたほうがシナリオとして記述できるのでわかりやすくなる。その際にテストの記述が複雑になる場合は、custom matcherを別途つくるのもあり。</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>(2) Rails 4.1 の Change Logについて</h2>

<h3>Change Logsのリスト</h3>

<p>ということでChange Logsのリスト。細かくすると結構なボリューム。</p>

<p><strong><a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html#railties">Ruby on Rails 4.1 Release Notes — Ruby on Rails Guides</a></strong></p>

<p><strong><a href="http://coherence.io/blog/2013/12/17/whats-new-in-rails-4-1.html">What's new in Rails 4.1 - Coherence Blog</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/actionmailer/CHANGELOG.md">rails/actionmailer/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/actionpack/CHANGELOG.md">rails/actionpack/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/tree/master/actionview">rails/actionview at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/actionview/CHANGELOG.md">rails/actionview/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/activemodel/CHANGELOG.md">rails/activemodel/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/activerecord/CHANGELOG.md">rails/activerecord/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/activesupport/CHANGELOG.md">rails/activesupport/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/railties/CHANGELOG.md">rails/railties/CHANGELOG.md at master · rails/rails</a></strong></p>

<p>ここからは実際に読み合わせをしてみて特に気になった新機能について。</p>

<h3>Preloaderの『spring』が標準搭載に</h3>

<p><strong><a href="https://github.com/jonleighton/spring/blob/master/README.md">Spring</a></strong>が標準搭載になりました。これでRailsのrakeやrspecが早くなりそう！</p>

<p>{% codeblock lang:bash %}
$ bin/spring status
Spring is running:</p>

<p> 1182 spring server | my_app | started 29 mins ago
 3656 spring app    | my_app | started 23 secs ago | test mode
 3746 spring app    | my_app | started 10 secs ago | development mode
{% endcodeblock %}</p>

<h3>Viewの切り分けが簡単に</h3>

<p><code>action pack variants</code>を使うことでViewの使い分けがより簡単に。イメージ的にはjp-mobileの機能の一部がRailsの標準になった感じです。</p>

<p>こちらが<code>app/contorller/application.rb</code>。</p>

<p>{% codeblock lang:ruby %}
class ApplicationController &lt; ActionController::Base
  before_action :device_variant</p>

<p>private</p>

<pre><code>def device_variant
  request.variant = :tablet if request.user_agent =~ /iPad/
end
</code></pre>

<p>end
{% endcodeblock %}</p>

<p>でView側ではこんなふうに振り分けができます。</p>

<p>{% codeblock lang:ruby %}
respond_to do |format|
  format.html do |html|</p>

<pre><code>html.tablet #=&gt; app/views/projects/show.html+tablet.erb
html.phone  #=&gt; app/views/projects/show.html+phone.erb
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h3>メールのプレビュー機能がついた</h3>

<p><code>http://localhost:3000/rails/mailers/notifier/welcome</code>にアクセスするとプレビュー機能がつかえるようになるみたい。</p>

<p>{% codeblock lang:ruby %}
class NotifierPreview &lt; ActionMailer::Preview
  def welcome</p>

<pre><code>Notifier.welcome(User.first)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>ちなみに個この話題の中ででたサービス。無料で使える開発専門のSTMPサーバ。便利便利！</p>

<p><a href="http://mailtrap.io/"><img src="http://farm6.staticflickr.com/5504/11477175444_2b02dc58a6_z.jpg"></a></p>

<h3>concerningの書き方が増えた?</h3>

<p>これは僕が勘違いしてるような気もしますが、<code>concerning</code>がこんな風に書けるようになったみたいです。</p>

<p>{% codeblock lang:ruby %}
class Todo &lt; ActiveRecord::Base
  concerning :EventTracking do</p>

<pre><code>included do
  has_many :events
end

def latest_event
  ...
end

private
  def some_internal_method
    ...
  end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h3>User FriendlyなURLを作りやすくなった</h3>

<p><code>to_param</code>でSEOに適したPretty URLをかけるようになった。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>example</h1>

<p>user = User.find_by(name: 'Fancy Pants')
user.id       # => 123
user.to_param # => "123-fancy-pants"
{% endcodeblock %}</p>

<p>他にもたくさんありますが、PostgreSQLのサポートが手厚くなったのとメール関係の機能が増えたのが印象的でした。</p>

<h2>おまけ: Railsの設計について</h2>

<p>こちらのセッションは僕は参加できなかったんですが、<strong><a href="https://twitter.com/tchikuba">@tchikuba</a></strong>さんのブログ記事『<strong><a href="http://tchikuba.github.io/blog/2013/12/21/rails-study-tokyo-90/">Rails勉強会@東京#90に参加してきました</a></strong>』にわかりやすい説明をアップして頂いています。ありがとうございます＾＾</p>

<p>せっかくなので、その話題の中で出たリンクも一応共有。</p>

<h3>オブジェクト指向エクササイズのススメ</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/1033616" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yojik/ss-1033616" title="オブジェクト指向エクササイズのススメ" target="_blank">オブジェクト指向エクササイズのススメ</a> </strong> from <strong><a href="http://www.slideshare.net/yojik" target="_blank">Yoji Kanno</a></strong> </div></p>

<p><a href="http://techracho.bpsinc.jp/hachi8833/2013_11_19/14738"><img src="http://farm6.staticflickr.com/5501/11476913024_53857486eb_z.jpg" /></a></p>

<p><strong><a href="http://qiita.com/joker1007/items/2a03500017766bdb0234">Ruby - てめえらのRailsはオブジェクト指向じゃねえ！まずはCallbackクラス、Validatorクラスを活用しろ！</a></strong></p>

<h2>おまけ：認証系のGem Sorceryについて</h2>

<p>Deviseと似たGemで、面白そうなGem『<strong><a href="https://github.com/NoamB/sorcery">Sorcery</a></strong>』を教えてもらいました。今度試してみます！</p>

<h3>参考リンク</h3>

<p><strong><a href="http://eureka-me.tumblr.com/post/35560016573/rails-sorcery">Railsのプラグインを勉強した。[Sorcery編] - NOT SO BAD</a></strong></p>

<p><strong><a href="http://ja.asciicasts.com/episodes/283-authentication-with-sorcery">ASCIIcasts - “Episode 283 - Sorceryで認証”</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grape - RailsでスピーディにAPIを作成！]]></title>
    <link href="http://morizyun.github.io/blog/rails-grepe-api-heroku-ruby/"/>
    <updated>2013-12-14T09:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-grepe-api-heroku-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048687158/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048687158&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048687158&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048687158" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />RailsやSinatra、RubyでAPIを作成する際に便利なGem『<strong><a href="https://github.com/intridea/grape">Grape</a></strong>』の紹介です。</p>

<p>このGemは簡単にjson、xml、txtなどのAPIを作成できます。それだけではなく、APIのバージョン管理やパラメータのバリデーション、モジュール化など、本格的なAPIを作る上で必要になる機能も持っています。</p>

<p>今回はハッカソンの中で初めてGrapeを使ってJSON APIを作ったので内容は浅めですが、備忘録として残しておきます！もしなにかお気づきの点等有ればコメントください。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>API Support</h1>

<p>gem 'grape'
{% endcodeblock %}</p>

<h2>APIのサンプル</h2>

<p>Twitterを模倣したサンプル(?)が、公式のGitHubのREADMEに書かれていたので転載。</p>

<p><code>app/api/twitter.rb</code>を作成して、以下のようなコードを書きます。</p>

<p>{% codeblock lang:ruby %}
module Twitter
  class API &lt; Grape::API</p>

<pre><code># versionは:headerや、:paramなどもあり
version 'v1', using: :path, vendor: 'twitter'
format :json

helpers do
  def current_user
    @current_user ||= User.authorize!(env)
  end

  def authenticate!
    error!('401 Unauthorized', 401) unless current_user
  end
end

resource :statuses do
  desc "Return a public timeline."
  get :public_timeline do
    Status.limit(20)
  end

  desc "Return a personal timeline."
  get :home_timeline do
    authenticate!
    current_user.statuses.limit(20)
  end

  desc "Return a status."
  params do
    requires :id, type: Integer, desc: "Status id."
  end
  route_param :id do
    get do
      Status.find(params[:id])
    end
  end

  desc "Create a status."
  params do
    requires :status, type: String, desc: "Your status."
  end
  post do
    authenticate!
    Status.create!({
      user: current_user,
      text: params[:status]
    })
  end

  desc "Update a status."
  params do
    requires :id, type: String, desc: "Status ID."
    requires :status, type: String, desc: "Your status."
  end
  put ':id' do
    authenticate!
    current_user.statuses.find(params[:id]).update({
      user: current_user,
      text: params[:status]
    })
  end

  desc "Delete a status."
  params do
    requires :id, type: String, desc: "Status ID."
  end
  delete ':id' do
    authenticate!
    current_user.statuses.find(params[:id]).destroy
  end
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>パラメータの必須・任意の制御</h2>

<p>APIでパラメータを必須にする場合と、任意にする場合はこちらのDSLで制御。</p>

<p>{% codeblock lang:ruby %}
requires :id, type: String # => 必須
optional :text, type: String #=> 任意
optional :status, type: String regexp: /<sup>[a-z]+$/</sup> #=> regexpで正規表現チェック
optional :color, type: String, default: 'blue' #=> defaultで初期値
{% endcodeblock %}</p>

<p>バリデーションはAPIの要なので、かなり考えられている印象です。詳しくは、<strong><a href="https://github.com/intridea/grape#parameter-validation-and-coercion">公式GitHub</a></strong>の説明がわかりやすいです。</p>

<h2>Rails側への設定</h2>

<p>Railsでapiファイルを自動で読み込むように、<code>config/application.rb</code>に以下のコードを追加。</p>

<p>{% codeblock lang:ruby %}
config.paths.add "app/api", glob: "<em><em>/</em>.rb"
config.autoload_paths += Dir["#{Rails.root}/app/api/</em>"]
{% endcodeblock %}</p>

<p>APIのルーティングを追加。</p>

<p>{% codeblock lang:ruby %}
mount Twitter::API => '/'
{% endcodeblock %}</p>

<h2>まとめ</h2>

<p>ということでAPIを簡単・スピーディに構築できました。 また別のプロジェクトでAPIを作成したら、内容を追加していきます！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/intridea/grape/wiki">intridea/grape Wiki</a></strong></p>

<p><strong><a href="http://qiita.com/anoworl/items/756f01cc3d188ebad139">Ruby - RailsとGrapeで行う最高のWeb API開発</a></strong></p>

<p><strong><a href="http://qiita.com/milkcocoa/items/5a4656ee1fd51e86e57e">Grape + RSpec + json_expressions で Awesome な API の受け入れテスト</a></strong></p>

<p><strong><a href="http://qiita.com/fakestarbaby/items/fa03cf333744b7c70e72">Rails - Grape | API生成マイクロフレームワーク</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuの無料枠でTwitter Stream APIを常時監視 => DBに保存するRubyコード]]></title>
    <link href="http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/"/>
    <updated>2013-12-12T22:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00GJGOPU0/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00GJGOPU0&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00GJGOPU0&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00GJGOPU0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><strong><a href="https://dev.twitter.com/docs/streaming-apis">TwitterのStreaming API</a></strong>を使うと、流れてくるTweetを常時監視することができます。</p>

<p>監視する対象は特定のキーワードだったり、特定のユーザーだったり、特定のサイトを指定したりすることができます。ユーザーの場合はユーザーのツイートに対するリプライも取得できるので、使って見るとかなり夢が広がるAPIです。</p>

<p>今回はこのTwitter Stream APIをHerokuで無料で監視しつつ、DBに蓄積するPGを書いたのでその紹介をしていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>ソースコード</h2>

<p>今回作成したソースコードはこちら。</p>

<p>詳細の説明は省きますが、基本的には環境変数に「TwitterのAPIのキー情報」と「DBへの接続情報」を書いて、後はAPIをEventMachineで監視 => Tweetが取得できたらDBに書き込むようになっています。</p>

<p>今回はこのソースを<code>tweetscan.rb</code>とします。</p>

<p>{% codeblock lang:ruby %}
require 'rubygems'
require 'bundler'
require 'mysql2'
require 'json'</p>

<p>Bundler.require</p>

<p>require 'twitter/json_stream'</p>

<h1>TwitterのAPIキー情報を環境変数から取得</h1>

<p>TWITTER_CONSUMER_KEY        ||= ENV['TWITTER_CONSUMER_KEY']
TWITTER_CONSUMER_SECRET     ||= ENV['TWITTER_CONSUMER_SECRET']
TWITTER_OAUTH_TOKEN         ||= ENV['TWITTER_OAUTH_TOKEN']
TWITTER_OAUTH_TOKEN_SECRET  ||= ENV['TWITTER_OAUTH_TOKEN_SECRET']
FOLLOWS                     ||= ENV['FOLLOWS']</p>

<h1>DBへの接続情報を環境変数から取得</h1>

<p>DB_HOSTNAME   ||= ENV['DB_HOSTNAME']
DB_USER_NAME  ||= ENV['DB_USER_NAME']
DB_PASSWORD   ||= ENV['DB_PASSWORD']
DB_NAME       ||= ENV['DB_NAME']</p>

<p>EventMachine::run {
  stream = Twitter::JSONStream.connect(</p>

<pre><code>:path    =&gt; "/1.1/statuses/filter.json?follow=#{FOLLOWS}",
:oauth =&gt; {
  :consumer_key    =&gt; TWITTER_CONSUMER_KEY,
  :consumer_secret =&gt; TWITTER_CONSUMER_SECRET,
  :access_key      =&gt; TWITTER_OAUTH_TOKEN,
  :access_secret   =&gt; TWITTER_OAUTH_TOKEN_SECRET
},
:ssl =&gt; true
</code></pre>

<p>  )</p>

<p>  stream.each_item do |item|</p>

<pre><code>$stdout.print "item: #{item}\n"
$stdout.flush

# MySQLへ接続(Postgresなどを使う場合は適宜変更)
client = Mysql2::Client.new(:host =&gt; DB_HOSTNAME, :username =&gt; DB_USER_NAME, :password =&gt; DB_PASSWORD || '', :database =&gt; DB_NAME)

# Tweetのjsonをパース
tw_json = JSON.parse(item)

# DBに格納するためにエンコーディング
user_id                         = client.escape(tw_json['user']['id_str'])
user_name                       = client.escape(tw_json['user']['name'])
user_screen_name                = client.escape(tw_json['user']['screen_name'])
user_image                      = client.escape(tw_json['user']['profile_image_url'])
user_description                = client.escape(tw_json['user']['description']) rescue nil
text                            = client.escape(tw_json['text'])
post_media_url                  = client.escape(tw_json['entities']['media'].first['media_url']) rescue nil
twitter_status_id               = client.escape(tw_json['id_str'])
twitter_reply_status_id         = client.escape(tw_json['in_reply_to_status_id_str']) rescue nil
twitter_reply_user_id           = client.escape(tw_json['in_reply_to_user_id_str'])   rescue nil
twitter_reply_user_screen_name  = client.escape(tw_json['in_reply_to_screen_name'])   rescue nil

# tweetsテーブルに書き込み
client.query("INSERT INTO tweets (user_id, user_name, user_screen_name, text, post_media_url, user_image, user_description, twitter_status_id, twitter_reply_status_id, twitter_reply_user_id, twitter_reply_user_screen_name, updated_at, created_at) VALUES ('#{user_id}', '#{user_name}', '#{user_screen_name}', '#{text}', '#{post_media_url}', '#{user_image}', '#{user_description}', '#{twitter_status_id}', '#{twitter_reply_status_id}', '#{twitter_reply_user_id}', '#{twitter_reply_user_screen_name}', '#{Time.now}', '#{Time.now}')")

# MySQLとの接続を解除
client.close
</code></pre>

<p>  end</p>

<p>  stream.on_error do |message|</p>

<pre><code>$stdout.print "error: #{message}\n"
$stdout.flush
</code></pre>

<p>  end</p>

<p>  # 再接続は書いていないです。書いて教えてくださいw
  stream.on_reconnect do |timeout, retries|</p>

<pre><code>$stdout.print "reconnecting in: #{timeout} seconds\n"
$stdout.flush
</code></pre>

<p>  end</p>

<p>  stream.on_max_reconnects do |timeout, retries|</p>

<pre><code>$stdout.print "Failed after #{retries} failed reconnects\n"
$stdout.flush
</code></pre>

<p>  end
}
{% endcodeblock %}</p>

<h2>foremanをつかったプロセス管理</h2>

<p>今回のソースはforemanを使っています。<code>Gemfile</code>に以下のコードを追加して<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:bash %}</p>

<h1>プロセス管理</h1>

<p>gem 'foreman'
{% endcodeblock %}</p>

<p>次にforeman用の設定ファイル<code>Procfile</code>を作成。</p>

<p>{% codeblock lang:bash %}
tweetscan: bundle exec ruby tweetscan.rb
{% endcodeblock %}</p>

<p>これで設定は完了です。以下のコードを実行するとプロセスがスタートして、Twitter Streamの監視を始めます。<br/>
ただし現時点では、Twitterのキー情報やDBへの接続情報が登録されていないので失敗します。</p>

<p>{% codeblock lang:bash %}
foreman start
{% endcodeblock %}</p>

<h2>Twitterのキー情報の取得と環境変数への登録</h2>

<p>まずは以下のサイトでTwitterアプリを登録してください。<br/>
(Sign in => アプリの登録)</p>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong></p>

<p>登録したら環境変数にTwitterキーを登録します。まずはローカルへのキー情報の登録です。foremanで管理しているプロセスでは、<code>.env</code>ファイルに環境変数にしたい情報を書き込むと勝手に読み込んでくれます。</p>

<p>{% codeblock lang:bash %}
TWITTER_CONSUMER_KEY=xxx
TWITTER_CONSUMER_SECRET=xxx
TWITTER_OAUTH_TOKEN=xxx
TWITTER_OAUTH_TOKEN_SECRET=xxx
{% endcodeblock %}</p>

<p>こういった面倒な手順をふむ理由は、キー情報が第三者に使われると悪いことをされる可能性があるからです。(<code>.env</code>はgitignore☆)</p>

<p>同じ流れで、DBの情報やAPIの引数なども環境変数に登録してください。</p>

<h2>Herokuへのデプロイ</h2>

<p>では、Herokuにソースコードをデプロイ。<br/>
(このまえにソースはローカルでgitにコミットしておいてください)</p>

<p>{% codeblock lang:bash %}
heroku create heroku-twitterscan --stack cedar
git push heroku master
{% endcodeblock %}</p>

<p>続いて、環境変数にTwitterのキー情報やDBへの接続情報、APIの引数などを登録。</p>

<p>{% codeblock lang:bash %}
heroku config:set TWITTER_CONSUMER_KEY=xxx
heroku config:set TWITTER_CONSUMER_SECRET=xxx
heroku config:set TWITTER_OAUTH_TOKEN=xxx
heroku config:set TWITTER_OAUTH_TOKEN_SECRET=xxx
{% endcodeblock %}</p>

<p>ちなみに、HerokuのDBの作成手順などは拙著の以下の記事などがオススメです。</p>

<p><strong><a href="http://morizyun.github.io/blog/heroku-postgresql-useful-commands/">Heroku/Posgresqlでよく使うコマンド一覧</a></strong></p>

<p><strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの最短手順 [haml/bootstrap 3.0/postgresql or MySQL]</a></strong></p>

<p>ということで<code>twitterscan.rb</code>のプロセスを起動！</p>

<p>{% codeblock lang:bash %}
heroku scale twitterscan=1
{% endcodeblock %}</p>

<p>以下のコマンドでプロセスが起動しているか、確認できます。</p>

<p>{% codeblock lang:bash %}
heroku ps
{% endcodeblock %}</p>

<p>ツイート結果はログからも確認できます！</p>

<p>{% codeblock lang:bash %}
heroku logs --tail
{% endcodeblock %}</p>

<p>ということでHerokuの無料枠でTweetをチェックして、DBに格納までする手順でした。
こちらはGitHubでもソースコードを公開しておきます。</p>

<p><a href="https://github.com/morizyun/tweetscan" class="button big primary">morizyun/tweetscan GitHub</a></p>

<p>エンジニア経験浅いので、是非色々とツッコミを頂ければ幸いです。よろしくお願いします！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/voloko/twitter-stream">voloko/twitter-stream</a></strong></p>

<p><strong><a href="http://blog.monoweb.info/blog/2012/01/24/heroku-streaming-api/">HerokuでStreaming APIを使うTwitter Botを作る | monoの開発ブログ</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/tagomoris/20111210/1323502295">RubyでMySQLに繋ぐためのruby-mysqlとmysql2 - tagomorisのメモ置き場</a></strong></p>

<p><strong><a href="http://stackoverflow.com/questions/5572557/convert-datetime-to-mysql-format-on-ruby-on-rails">Convert datetime to mysql format on Ruby on Rails - Stack Overflow</a></strong></p>
]]></content>
  </entry>
  
</feed>
