<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pry | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/pry/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T20:26:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pryが真の力を発揮してくれる19個のコマンドとコマンドの自作方法[Rails]]]></title>
    <link href="http://morizyun.github.io/blog/pry-command-rails-ruby/"/>
    <updated>2014-04-16T20:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/pry-command-rails-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00AT1E76S/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00AT1E76S&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00AT1E76S&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00AT1E76S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />開発の効率を大きく向上してくれるgem Pryをさらに使いこなすための便利なコマンド19個をまとめてみました。標準のコマンドをしっかり理解してPryの使いこなしを目指します！</p>

<p><strong>(04/16 20:55) オススメの記事を追加 その2</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>オススメ記事</h2>

<p><strong><a href="http://qiita.com/fakestarbaby/items/4a2fe11a817077a2ab96">Pry の簡易的なコマンドまとめ</a></strong><br/>
Pry の設定ファイルや、関連 Gem の簡易的なコマンドをまとめてくれている記事。この記事をひと通り読んだあとに、設定をいじると捗るかも！</p>

<p><strong><a href="http://qiita.com/yusabana/items/8ce54577d959bb085b37">Rails4 今のところ最強なデバッグツール達</a></strong><br/>
開発やテスト環境で使っているGemfileの紹介。pryについてもかなり丁寧に書かれています！</p>

<p><strong><a href="http://www.atmarkit.co.jp/ait/articles/1403/26/news030.html">Ruby 2.1の基本構文／基本文法まとめ＆Pryの使い方</a></strong><br/>
オープンソースのオブジェクト指向プログラミング言語「Ruby」の文法を一から学ぶための入門連載。</p>

<h2>(1) help</h2>

<p><code>help</code>はコマンドの一覧と英語での説明を表示してくれるコマンドです。
何をおいてもこれを覚えておけば、コマンドに困ることはないと思いますw</p>

<h2>(2) cd と ls</h2>

<p><code>cd</code>はオブジェクトへの移動。<br/>
<code>ls</code>はオブジェクトのメソッドや、変数の表示。<br/>
Pryの基本中の基本のコマンドですが超便利・超重要です！</p>

<p>{% codeblock lang:ruby %}
[1] pry(Object):1> images = Image.all           <br/>
ImageSite Load (10.4ms)  SELECT <code>images</code>.* FROM <code>images</code>
[2] pry(Object):1> cd images
[3] pry(#<Array>):2> ls
Enumerable#methods: all?  any?  chunk ...
self.methods: <strong>pry</strong>
locals: _  <em>dir</em>  <em>ex</em>  <em>file</em>  <em>in</em>  <em>out</em>  <em>pry</em>
{% endcodeblock %}</p>

<h2>(3) 特別なローカル情報</h2>

<p>次はSpecial Locals(特別なローカル情報)を表示するための7つのコマンドです。使いこなせれば結構便利です。</p>

<p>{% codeblock lang:bash %}</p>

<h1>_ : １つ前のコマンドの結果</h1>

<p>pry(main)> 5 + 5
=> 10
pry(main)> _ + 10
=> 20</p>

<h1><em>ex</em> : 前に発生した例外情報</h1>

<p>pry(main)> 4 + "j"
TypeError: String can't be coerced into Fixnum
from (pry):2:in `+'
pry(main)> <em>ex</em>
=> #&lt;TypeError: String can't be coerced into Fixnum></p>

<h1><em>in</em> : 入力値</h1>

<h1><em>out</em> : 出力値</h1>

<p>[25] pry(main)> 1 + 1
=> 2
[26] pry(main)> 2 + 3
=> 5
pry(main)> <em>out</em>[25] + <em>out</em>[26]
=> 7</p>

<h1><em>dir</em> : ディレクトリパス</h1>

<h1><em>file</em> : ファイルパス</h1>

<p>pry(main)> show-method pry</p>

<p>From: /Users/john/ruby/projects/pry/lib/pry/core_extensions.rb @
....</p>

<p>pry(main)> <em>file</em>
=> "/Users/john/ruby/projects/pry/lib/pry/core_extensions.rb"
{% endcodeblock %}</p>

<h2>(4) find-method</h2>

<p><code>find-method</code>はメソッドを検索してくれます。</p>

<p><img src="http://farm9.staticflickr.com/8331/8405063800_bb71c9b09a.jpg" width="500" height="311" alt="Pry find-method"></p>

<h2>(5) show-models</h2>

<p>MySQLのテーブル定義を参照できるのが、<code>show-models</code>です。</p>

<p><img src="http://farm9.staticflickr.com/8091/8403913615_a95c024696_n.jpg" width="246" height="320" alt="pry show-models"></p>

<h2>(6) show-routes</h2>

<p><img src="http://farm9.staticflickr.com/8351/8405024764_549697d8ac.jpg" width="500" height="115" alt="pry show-routes"></p>

<p>コマンドは次のとおりです。</p>

<p>{% codeblock lang:bash %}
show-routes #&lt;= ルーティングの一覧を表示
show-routes --grep new #&lt;= newに絞って表示
{% endcodeblock %}</p>

<p><code>rake routes</code>より高速です！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>(7) show-middlewares</h2>

<p>参照しているmiddlewareの一覧を表示してくれるのが、<code>show-middlewares</code>です。<br/></p>

<p><img src="http://farm9.staticflickr.com/8089/8403944403_a0c7961965.jpg" width="500" height="285" alt="Pry show-middlewares"></p>

<h2>(8) reload!</h2>

<p><code>reload!</code>はRails環境全体をリロードしてくれます。</p>

<p><img src="http://farm9.staticflickr.com/8189/8403974843_14cec55a46_n.jpg" width="320" height="100" alt="Pry reload!"></p>

<h2>(9) 自作のPryコマンドの追加</h2>

<p>Pryコマンドの自作もできます。
プロジェクト専用のPryコマンドを作成する場合は、<code>.pryrc</code>をプロジェクト直下に作成。<br/>
共通して使うPryコマンドを作成する場合は、<code>~/.pryrc</code>を作成。<br/>
作成したファイルに下記のように追加。</p>

<p>{% codeblock lang:ruby %}
command_set = Pry::CommandSet.new do
  command "コマンドの名前", "コマンドの説明" do |引数|</p>

<pre><code> # ここに処理を書く
</code></pre>

<p>  end
end
Pry.config.commands.import my_command_set
{% endcodeblock %}</p>

<p>ちなみに、<a href="https://gist.github.com/1297510">このGist</a>には次のような便利なコマンドがありました。</p>

<table>
<thead>
<tr>
<th>コマンド </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>copy </td>
<td align="left"> 引数をクリップボードにコピー</td>
</tr>
<tr>
<td>clear </td>
<td align="left"> 現在のPryの表示をクリア</td>
</tr>
<tr>
<td>sql </td>
<td align="left"> 引数のSQLを実行</td>
</tr>
<tr>
<td>caller_method </td>
<td align="left"> 呼び出し元のメソッドを表示</td>
</tr>
</tbody>
</table>


<p>この4つのコマンドを使いたい場合は、下を.pryrcに追加して下さい。</p>

<p>{% codeblock lang:bash %}
%w[rubygems pp logger].each do |gem|
  begin</p>

<pre><code>require gem
</code></pre>

<p>  rescue LoadError
  end
end
Pry.config.editor = "mate -w"</p>

<h1>Default Command Set, add custom methods here:</h1>

<p>default_command_set = Pry::CommandSet.new do
  command "copy", "Copy argument to the clip-board" do |str|</p>

<pre><code> IO.popen('pbcopy', 'w') { |f| f &lt;&lt; str.to_s }
</code></pre>

<p>  end</p>

<p>  command "clear" do</p>

<pre><code>system 'clear'
if ENV['RAILS_ENV']
  output.puts "Rails Environment: " + ENV['RAILS_ENV']
end
</code></pre>

<p>  end</p>

<p>  command "sql", "Send sql over AR." do |query|</p>

<pre><code>if ENV['RAILS_ENV'] || defined?(Rails)
  pp ActiveRecord::Base.connection.select_all(query)
else
  pp "Pry did not require the environment, try `pconsole`"
end
</code></pre>

<p>  end
  command "caller_method" do |depth|</p>

<pre><code>depth = depth.to_i || 1
if /^(.+?):(\d+)(?::in `(.*)')?/ =~ caller(depth+1).first
  file   = Regexp.last_match[1]
  line   = Regexp.last_match[2].to_i
  method = Regexp.last_match[3]
  output.puts [file, line, method]
end
</code></pre>

<p>  end
end</p>

<p>Pry.config.commands.import default_command_set
Pry.config.should_load_plugins = false
{% endcodeblock %}</p>

<h2>(10) urlヘルパーが生成するpath/urlの確認</h2>

<p>{% codeblock lang:ruby %}
app.product_index_path</p>

<h1>=> "/product"</h1>

<p>app.admin_product_index_url</p>

<h1>=> "http://www.example.com/product"</h1>

<p>{% endcodeblock %}</p>

<h2>(11) リクエストしてコントローラの呼び出し</h2>

<p>{% codeblock lang:ruby %}
app.get "http://0.0.0.0:300/"
....</p>

<h1>=> 200</h1>

<p>app.response.body</p>

<h1>=> レスポンスのhtmlが表示</h1>

<p>{% endcodeblock %}</p>

<h2>(12) viewヘルパーの呼び出し</h2>

<p>{% codeblock lang:ruby %}
helper.number_to_currency(7777777)</p>

<h1>=> "7,777,777円"</h1>

<p>helper.image_tag "https://www.google.co.jp/images/srpr/logo4w.png"</p>

<h1>=> "<img alt=\"Logo4w\" src=\"https://www.google.co.jp/images/srpr/logo4w.png\" />"</h1>

<p>{% endcodeblock %}</p>

<h2>Pry公式Wiki</h2>

<p>Pryは公式のWikiが充実しているので、もし良かったらぜひ見てみて下さい！</p>

<p><a href="https://github.com/pry/pry/wiki" class="button big primary">pry/pry Wiki</a></p>

<h2>こちらもどうぞ：Pryをさらに強力にしてくれる拡張機能</h2>

<p>Pryの拡張機能の紹介は、拙作の<strong>「<a href="/blog/pry-tips-rails-ruby/">Pryの秘めた力を最大限引き出す4つの拡張機能</a>」</strong>をご参照下さい！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://blog.happyelements.co.jp/2012/10/rubyist-pry-rails-irb-up.html.html">Happy Elements Labs: Rubyist必携 pry-railsを使いこなせば幸せになれる</a></p>

<p><a href="http://qiita.com/items/eeb5dee96e44fca54a2e">rails console の tips #Ruby #Rails - Qiita</a></p>

<h2>変更来歴</h2>

<p>(01/23 11:15) 新規作成<br/>
(03/26 23:05) 『urlヘルパーが生成するpath/urlの確認、リクエストしてコントローラの呼び出し、viewヘルパーの呼び出し』を追加<br/>
(04/05 22:35) オススメの記事を追加<br/>
(04/16 20:55) オススメの記事を追加 その2<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pryの秘めた力を最大限引き出す4つの拡張機能[Rails]]]></title>
    <link href="http://morizyun.github.io/blog/pry-tips-rails-ruby/"/>
    <updated>2013-01-22T13:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/pry-tips-rails-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774154881/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774154881&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774154881&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774154881" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsを開発する上で欠かせない、<code>rails console</code>の強化版gem Pryをさらに強化するための拡張機能の紹介です。Pryは単に<code>rails c</code>だけではなく、デバックやドキュメント調査、スタックのチェック、テーブルの中身のチェックなどを強力にサポートしてくれます！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>モデルの中身を綺麗に表示</h2>

<p>Gem <code>hirb</code>を使うとpry画面でスタックの確認や階層の移動ができるようになります。<br/>
(これはPry限定ではなく、irbでもつかえるっぽいです)</p>

<p><img src="http://farm9.staticflickr.com/8046/8403445691_d637cb25e0_c.jpg" width="800" height="348" alt="hirb rails"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p>{% codeblock lang:bash %}
group :development, :test do</p>

<pre><code># PryでのSQLの結果を綺麗に表示
gem 'hirb'
gem 'hirb-unicode'
</code></pre>

<p>end
{% endcodeblock %}</p>

<p>(2) <code>~/.pryrc</code>に以下を追加</p>

<p>{% codeblock lang:bash %}</p>

<h1>hirbの設定</h1>

<p>begin
  require 'hirb'
rescue LoadError
  # Missing goodies, bummer
end</p>

<p>if defined? Hirb
  # Slightly dirty hack to fully support in-session Hirb.disable/enable toggling
  Hirb::View.instance_eval do</p>

<pre><code>def enable_output_method
  @output_method = true
  @old_print = Pry.config.print
  Pry.config.print = proc do |output, value|
    Hirb::View.view_or_page_output(value) || @old_print.call(output, value)
  end
end

def disable_output_method
  Pry.config.print = @old_print
  @output_method = nil
end
</code></pre>

<p>  end</p>

<p>  Hirb.enable
end
{% endcodeblock %}</p>

<p>(3) Pry画面内でSQLを内部で発行するActiveRecordのコマンドを実行すると、結果が整形されて表示</p>

<p><a href="https://github.com/cldwalker/hirb" class="button big primary">cldwalker/hirb · GitHub</a></p>

<h2>デバッグコマンド</h2>

<p>Gem <code>pry-debugger</code>を使うと、pry画面でデバックコマンド使えるようになります。</p>

<p><img src="http://farm9.staticflickr.com/8515/8403061927_d09d929c58_c.jpg" width="800" height="605" alt="pry-debugger"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p>{% codeblock lang:bash %}
group :development, :test do</p>

<pre><code># pry画面でデバックコマンドを実行
gem 'pry-debugger'
</code></pre>

<p>end
{% endcodeblock %}</p>

<p>(2) <code>~/.pryrc</code>にコマンドのショートカット(下記)を追加する</p>

<p>{% codeblock lang:bash %}</p>

<h1>pry-debuggerのショートカット</h1>

<p>Pry.commands.alias_command 'c', 'continue'
Pry.commands.alias_command 's', 'step'
Pry.commands.alias_command 'n', 'next'
Pry.commands.alias_command 'f', 'finish'
{% endcodeblock %}</p>

<p>(3) ソース内のデバックしたい箇所に<code>binding.remote_pry</code>を追加。</p>

<p>(4) デバック箇所を含む処理を実行。</p>

<p>(5) コンソールで<code>bundle exec pry-remote</code>を実行。</p>

<h3>コマンド一覧</h3>

<table>
<thead>
<tr>
<th>コマンド(ショートカット) </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>step(s) </td>
<td align="left"> 矢印の指している関数の内部に入って1行進める</td>
</tr>
<tr>
<td>next(n) </td>
<td align="left"> 現在の関数内で1行進める</td>
</tr>
<tr>
<td>finish(f) </td>
<td align="left"> 現在の関数から抜ける</td>
</tr>
<tr>
<td>continue(c) </td>
<td align="left"> デバッグから抜けてプログラムを実行する</td>
</tr>
<tr>
<td>break </td>
<td align="left"> 新しいブレークポイントをセットする</td>
</tr>
</tbody>
</table>


<p><a href="https://github.com/nixme/pry-debugger" class="button big primary">Nixme/pry-debugger · GitHub</a></p>

<h2>ドキュメント/ソースコード参照</h2>

<p>Gem <code>pry-doc</code>を使うとpry画面でドキュメント参照ができるようになります。</p>

<p><img src="http://farm9.staticflickr.com/8236/8404222032_101f20a03e.jpg" width="500" height="390" alt="Pry-debugger"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p>{% codeblock lang:bash %}
group :development, :test do</p>

<pre><code># pry画面でのドキュメント/ソース表示
gem 'pry-doc'
</code></pre>

<p>end
{% endcodeblock %}</p>

<p>(2) Pry画面内でドキュメントの参照時には<code>? hoge</code>、ソースコードの参照時には<code>$ fuga</code>を実行</p>

<h3>コマンド一覧</h3>

<table>
<thead>
<tr>
<th>コマンド(ショートカット) </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>show-doc(?) fuga </td>
<td align="left"> fugaのドキュメントを表示</td>
</tr>
<tr>
<td>show-source($) hoge </td>
<td align="left"> hogeのソースコードを表示</td>
</tr>
</tbody>
</table>


<p><a href="https://github.com/banister/pry-doc" class="button big primary">banister/pry-doc · GitHub</a></p>

<h2>スタックの確認</h2>

<p>Gem <code>pry-stack_explorer</code>を使うとpry画面でスタックの確認や階層の移動ができるようになります。</p>

<p><img src="http://farm9.staticflickr.com/8359/8403378857_214d050ff2_c.jpg" width="800" height="451" alt="スクリーンショット 2013-01-22 11.51.21"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p>{% codeblock lang:bash %}
group :development, :test do</p>

<pre><code># pry画面でのstack表示
gem 'pry-stack_explorer'
</code></pre>

<p>end
{% endcodeblock %}</p>

<p>(2) Pry画面内で<code>show-stack</code>を実行するとスタックが表示</p>

<h3>コマンド一覧</h3>

<table>
<thead>
<tr>
<th>コマンド(ショートカット) </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>show-stack </td>
<td align="left"> スタックを表示</td>
</tr>
<tr>
<td>up </td>
<td align="left"> 親のフレームに移動</td>
</tr>
<tr>
<td>down </td>
<td align="left"> calleeフレーム(参照されている側)に移動</td>
</tr>
<tr>
<td>frame </td>
<td align="left"> 詳細フレームに移動</td>
</tr>
</tbody>
</table>


<p><a href="https://github.com/pry/pry-stack_explorer" class="button big primary">pry/pry-stack_explorer · GitHub</a></p>

<h2>こちらもどうぞ：これでPryをさらに使いこなせる19個のコマンド</h2>

<p>Pryのコマンドの紹介は、拙作の<strong>「<a href="/blog/pry-command-rails-ruby/">Pryが真の力を発揮してくれる19個のコマンドとコマンドの自作方法</a>」</strong>をご参照下さい！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://blog.ainam.me/2012/03/20/summary-of-pry-plugins/">Rubyのデバッグに役立つ便利なPryの拡張まとめましましブログ | ましましブログ</a></p>

<p><a href="http://blog.happyelements.co.jp/2012/10/rubyist-pry-rails-irb-up.html.html">Happy Elements Labs: Rubyist必携 pry-railsを使いこなせば幸せになれる</a></p>

<p><a href="http://qiita.com/items/2b36068cdf2e40e75c2d">ググるよりもまずはpry #Ruby #Rails #pry - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec/Spork/Guard/Growl/Rails 3.2.11で作る - プリチーなTDD環境！]]></title>
    <link href="http://morizyun.github.io/blog/guard-spork-rspec-tdd/"/>
    <updated>2012-11-29T01:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/guard-spork-rspec-tdd</id>
    <content type="html"><![CDATA[<p><a href="{{ root_url }}{{ page.url }}" title="by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8339/8240550113_9fab04bc18_m.jpg" width="200" height="200" alt="Where?" style="float: left; margin: 0 20px 20px 0;"></a></p>

<p>「ぷりちー」なRailsのTDD環境をオレオレ定義してみました！</p>

<pre>
* Guardをつかったファイル更新監視
* RSpec/Spork/LiveReload/Powが自動で動作
* Growlでテスト結果の通知をで行う(For Mac)
</pre>


<p>今回はこのTDD環境の構築手順を書いてみます。</p>

<!-- more -->


<br style="clear:both;"/>


<h2>Gemfileの更新</h2>

<p><code>Gemfile</code>に以下の内容を追加して、<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:ruby %}
group :development do
  # viewやcssの変更を監視してブラウザを自動的にリロードする
  gem 'guard-livereload'
  gem 'em-websocket'
end</p>

<p>group :test do
  # HTTP requests用のモックアップを作ってくれる
  gem 'webmock'</p>

<p>  # 便利マッチャー集
  gem "shoulda-matchers"
end</p>

<p>group :development, :test do
  # ファイルの変更を監視してPowサーバを再起動
  gem 'guard-pow'</p>

<p>  # Rspec
  gem 'rspec-rails'</p>

<p>  # fixtureの代わり
  gem "factory_girl_rails"</p>

<p>  # テスト環境のテーブルをきれいにする
  gem 'database_cleaner'</p>

<p>  # 設定をロードしたサーバーによってテストを高速化
  gem 'spork'</p>

<p>  # ファイルの変更を検知する。OSX用
  gem 'rb-fsevent'</p>

<p>  # テスト結果をGrowlで通知する(Lion向け)
  #gem 'growl'</p>

<p>  # テスト結果を通知センターに表示する(Mountain Lion向け)
  gem 'terminal-notifier-guard'</p>

<p>  # ファイルの変更を監視してテストを自動化
  gem 'guard-rspec'</p>

<p>  # 設定ファイルの変更を監視してテストサーバーを再起動
  gem 'guard-spork'</p>

<p>  # Gemfileを監視して、変更があったら自動でbundle installを実行
  gem 'guard-bundler'</p>

<p>  # Railsコンソールの多機能版
  gem 'pry-rails'</p>

<p>  # pryの入力に色付け
  gem 'pry-coolline'</p>

<p>  # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
  gem 'pry-remote'
  gem "pry-debugger"
  gem "pry-doc"
  gem 'pry-stack_explorer'</p>

<p>  # PryでのSQLの結果を綺麗に表示
  gem 'hirb'
  gem 'hirb-unicode'</p>

<p>  # pryの色付けをしてくれる
  gem 'awesome_print'
end
{% endcodeblock %}</p>

<h2>application.rbの設定</h2>

<p><code>config/application.rb</code>内の<code>class Application &lt; Rails::Application</code>内に以下の内容を追加。(設定は任意で変更してください)</p>

<p>{% codeblock lang:bash %}</p>

<h1>generatorの設定</h1>

<p>config.generators do |g|
  g.test_framework  :rspec, :fixture => true
  g.fixture_replacement :factory_girl, :dir => "spec/factories"
  g.view_specs false
  g.controller_specs false
  g.helper_specs false
  g.routing_specs false
  g.request_specs false
end
{% endcodeblock %}</p>

<h2>config/environments/test.rbの設定</h2>

<p><code>config/environments/test.rb</code>に以下の内容を追加。</p>

<p>{% codeblock lang:bash %}
AppName::Application.configure do
  # Spork 使用時にクラスをキャッシュしないようにする
  if defined?(Spork) &amp;&amp; Spork.using_spork?</p>

<pre><code>config.cache_classes = false
</code></pre>

<p>  else</p>

<pre><code>config.cache_classes = true
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>RSpecの設定</h2>

<p>RailsへのRSpecのインストールと雛形を作成。</p>

<p>{% codeblock lang:bash %}
rails generate rspec:install
{% endcodeblock %}</p>

<p><code>.rspec</code>にはrspec コマンドの引数を記述できます。以下のとおり編集。<br/>
(詳細は rspec --helpを参照)</p>

<p>{% codeblock lang:bash %}
echo '--color --drb -f d' > .rspec
{% endcodeblock %}</p>

<p>rspecの設定ファイル<code>spec/spec_helper.rb</code>を次のように変更。</p>

<p>{% codeblock lang:ruby %}
require 'rubygems'
require 'spork'
require "webmock/rspec"
WebMock.allow_net_connect!</p>

<h1>uncomment the following line to use spork with the debugger</h1>

<h1>require 'spork/ext/ruby-debug'</h1>

<p>Spork.prefork do
  # Loading more in this block will cause your tests to run faster. However,
  # if you change any configuration or code from libraries loaded here, you'll
  # need to restart spork for it take effect.
  ENV["RAILS_ENV"] ||= 'test'
  require File.expand_path("../../config/environment", <strong>FILE</strong>)
  require 'rspec/rails'
  require 'rspec/autorun'
  require 'shoulda-matchers'</p>

<p>  # Requires supporting ruby files with custom matchers and macros, etc,
  # in spec/support/ and its subdirectories.
  Dir[Rails.root.join("spec/support/<em>*/</em>.rb")].each {|f| require f}</p>

<p>  RSpec.configure do |config|</p>

<pre><code>config.infer_base_class_for_anonymous_controllers = false
config.use_transactional_fixtures = true
config.order = "random"
# FactoryGirlのメソッドをbuild, build_stubbed, create, attributes_forなどの省略形で書ける
config.include FactoryGirl::Syntax::Methods

# database_cleanerでテストのたびにDBをクリアする
require 'database_cleaner'
config.before(:suite) do
  DatabaseCleaner.strategy = :truncation
  DatabaseCleaner.clean_with(:truncation)
end

config.before(:each) do
  DatabaseCleaner.start
end

config.after(:each) do
  DatabaseCleaner.clean
end
</code></pre>

<p>  end
end</p>

<h1>This code will be run each time you run your specs.</h1>

<p>Spork.each_run do
  # Spork利用時にapp配下/locale/routesをリロード
  if Spork.using_spork?</p>

<pre><code>Rails.application.reloaders.each{|reloader| reloader.execute_if_updated }
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Pryの設定</h2>

<p><code>config/environments/development.rb</code>の中の<code>YourAppName::Application.configure</code>に以下を追加。</p>

<p>{% codeblock lang:ruby %}
silence_warnings do
  begin</p>

<pre><code>require 'pry'
IRB = Pry
</code></pre>

<p>  rescue LoadError
  end
end
{% endcodeblock %}</p>

<p>これで、<code>rails c</code>とした場合に<code>pry</code>が呼び出されます。</p>

<p>またコード内でデバックを行いた場所に<code>binding.pry_remote</code>を追加した場合、処理が途中で停止します。そこで<code>pry-remote</code>を打つと<code>pry</code>画面に入れます。
(guardで動いている場合は、<code>binding.pryでguard</code>から直接pryに進むっぽいです)</p>

<p>続いて、<code>~/.pryrc</code>に以下を追記。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<h1>awesome_printの色付けの設定</h1>

<p>require "awesome_print"
AwesomePrint.pry!</p>

<h1>pry-debuggerのショートカット</h1>

<p>Pry.commands.alias_command 'c', 'continue'
Pry.commands.alias_command 's', 'step'
Pry.commands.alias_command 'n', 'next'
Pry.commands.alias_command 'f', 'finish'</p>

<h1>hirbの設定</h1>

<p>begin
  require 'hirb'
rescue LoadError
  # Missing goodies, bummer
end</p>

<p>if defined? Hirb
  # Slightly dirty hack to fully support in-session Hirb.disable/enable toggling
  Hirb::View.instance_eval do</p>

<pre><code>def enable_output_method
  @output_method = true
  @old_print = Pry.config.print
  Pry.config.print = proc do |output, value|
    Hirb::View.view_or_page_output(value) || @old_print.call(output, value)
  end
end

def disable_output_method
  Pry.config.print = @old_print
  @output_method = nil
end
</code></pre>

<p>  end</p>

<p>  Hirb.enable
end
{% endcodeblock %}</p>

<h2>Sporkの設定</h2>

<p>sporkの初期設定。</p>

<p>{% codeblock lang:bash %}
bundle exec spork --bootstrap
{% endcodeblock %}</p>

<p>sporkのテスト。(起動が確認できたら<code>Ctrl + C</code>で停止させてください)</p>

<p>{% codeblock lang:bash %}
bundle exec spork</p>

<blockquote><p>Using RSpec
Preloading Rails environment
Loading Spork.prefork block...
Spork is ready and listening on 8989! # ← 成功
{% endcodeblock %}</p></blockquote>

<h2>Guardの設定</h2>

<p><code>Guardfile</code>の作成。</p>

<p>{% codeblock lang:bash %}
bundle exec guard init
{% endcodeblock %}</p>

<p><code>Guardfile</code>に以下の項目を追加。</p>

<p>{% codeblock lang:bash %}
guard 'rspec' do
  # rakeファイルの更新監視
  watch(%r{<sup>lib/(.+).rake$})</sup>     { |m| "spec/lib/#{m[1]}_rake_spec.rb" }
end</p>

<h1>全体テストをしないようにする(全体テストは、guardが動いてる所でEnterすると実行)</h1>

<h1>guard 'rspec' doを以下に書換え</h1>

<p>guard 'rspec', :version => 2, :cli => "--drb", :all_after_pass => false, :all_on_start => false do
{% endcodeblock %}</p>

<h2>LiveReloadの設定</h2>

<p>ブラウザのリロード用アドオンを任意でインストール。</p>

<ul>
<li><p><a href="https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei">Chrome Addon</a></p></li>
<li><p><a href="https://addons.mozilla.org/ja/firefox/addon/livereload/">FireFox Addon</a></p></li>
</ul>


<h2>Growlの設定</h2>

<p>ここはMacかつLionの方限定です。<br/>
Mountain Lionの方は、通知センターに送付します。(Gemfileを参照ください)</p>

<p><a href="http://growl.info/">Grow</a>をインストール。</p>

<p><a href="http://growl.info/" title="fpu_tmp_1354148705.382_da97cc by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8065/8227627407_4863dbab03.jpg" width="500" height="339" alt="fpu_tmp_1354148705.382_da97cc"></a></p>

<p>続いてGrowlNotifyのインストール。
<a href="http://growl.info/downloads">Growl - Downloads</a>にてダウンロード/インストールする。</p>

<p><a href="http://growl.info/downloads" title="fpu_tmp_1354148550.4162_b194f0 by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8198/8227622439_8081ebbffd.jpg" width="490" height="500" alt="fpu_tmp_1354148550.4162_b194f0"></a></p>

<h2>Guardの動作確認</h2>

<p><code>guard</code>の実行。</p>

<p>{% codeblock lang:bash %}
bundle exec guard
{% endcodeblock %}</p>

<p>以下のような結果が出ていれば成功です。</p>

<pre>
Guard uses Growl to send notifications.
Guard uses TerminalTitle to send notifications.
Guard is now watching at '/path/to/app/test-app/'
LiveReload 1.6 is waiting for a browser to connect.
Guard::RSpec is running
No examples found.

Finished in 0.00007 seconds
0 examples, 0 failures
</pre>


<h2>関連記事: Rails 3.2.11/Bootstrap/Haml</h2>

<p><strong><a href="/blog/rails-mysql-bootstrap">Rails 3.2.11/Bootstrap/Haml プロジェクト新規作成 最短ガイドだよ！</a></strong> にRailsのモダンなプロジェクト作成の流れを書きました。Railsのプロジェクト作成から始めたい方はぜひ。</p>

<h2>関連記事: テスト環境にseedデータを自動で読み込ませる</h2>

<p>RSpecでテストをするときにseedデータをテスト環境のDBに読み込ませてテストをしたいという事があると思います。そんなときは、<code>seed_fu</code>というgemがやってくれます。以下が紹介記事です。</p>

<p><a href="/blog/seed-fu-ruby-on-rails-setup">seed-fuで始める効率的なRails Seed管理</a></p>

<h2>関連記事</h2>

<p><strong><a href="/blog/pow-guard-rails">開発サーバをThinからPowに切り替えて開発効率アップ！ (Mac限定)</a></strong> にてPowに関する記事を載せました。Powインストールがまだの方はぜひ。</p>

<h2>失敗談</h2>

<p><a href="http://blog.m4i.jp/entry/2012/02/22/091501">Rails + Pow + pry/ruby-debug(Ruby 1.9.3) | カワイイはつくれる</a>にトライしてみたんですが、
残念ながら僕の環境では uninitialized constant PryStackExplorer::Pry だそうです。技術力つけて再チャレンジ！</p>

<ul>
<li><a href="http://banisterfiend.wordpress.com/2012/02/14/the-pry-ecosystem/">The Pry Ecosystem</a></li>
</ul>


<h2>Special Thanks</h2>

<ul>
<li><p><a href="https://gist.github.com/1190475">Rails 3.1 with Rspec, Factory Girl, Haml, Database Cleaner, Spork, and Guard — Gist</a></p></li>
<li><p><a href="http://qiita.com/items/7b98fb8ec493ff801029">Rails3.2+RSpec2+Spork+GuardでTDD環境を構築しよう！ | Quiita</a></p></li>
<li><p><a href="http://blog.twiwt.org/e/b2d120">Rails で RSpec のセットアップ</a></p></li>
<li><p><a href="http://www.gesource.jp/weblog/?p=648">Ruby on RailsでRSpecを使うときに使用するコマンドのまとめ</a></p></li>
<li><p><a href="http://kitbc.s41.xrea.com/main/?use_guard_spork">rspec + guard + spork で高速な自動テスト実行環境構築</a></p></li>
<li><p><a href="http://naoty.hatenablog.com/entry/2012/05/20/032251">Rails開発環境 2012初夏</a></p></li>
<li><p><a href="http://qiita.com/items/d75d7c3953faa34a1f0e">awesome_print を pry の表示のデフォルトに使う | Quiita</a></p></li>
<li><p><a href="http://penguinlab.jp/blog/post/2256">追記: Rails, RSpec, Spork(, Guard) で適切にクラスをリロード - 情報と音楽</a></p></li>
<li><p><a href="http://blog.crowdint.com/2012/03/01/rails-tdd-environment-setup-with-guard-and-foreman.html">Rails TDD environment setup with Guard and Foreman</a></p></li>
<li><p><a href="https://gist.github.com/1724370">Example rails 3.1 spec_helper.rb file using spork, rspec, factory_girl, database_cleaner, I18n — Gist</a></p></li>
<li><p><a href="http://willnet.in/31">rails generate controller で無駄な helper や assets を生成しない方法  </a></p></li>
</ul>


<h2>変更来歴</h2>

<p>12/03 23:50 FactoryGirl/database_cleanerの設定を見直し。Pryの設定追加<br/>
12/06 09:37 Gemfileの'awesome_print'が間違っていたので修正<br/>
12/07 21:04 Gemfileに'pry-coolline'を追加<br/>
12/11 12:55 FactoryGirlの設定に説明書きを追記<br/>
12/12 21:20 guard-bundlerとterminal-notifier-guardをGemfileに追加<br/>
12/12 21:35 growlの説明書きを追加<br/>
12/16 17:30 binding.pryに関する説明を追記<br/>
12/18 20:30 environments/test.rbとrspec_helperの設定を追加<br/>
12/21 18:30 config/application.rbの設定を追加<br/>
12/30 18:05 spec_helper.rbのdatabase_cleanerの設定を見直し<br/>
12/31 13:05 gem webmockを追加<br/>
01/02 08:45 gem webmockの記述場所を修正<br/>
01/16 23:05 gem shoulda-matcherを追加<br/>
01/21 18:30 gem pry-debuggerを追加<br/>
01/22 14:15 gem pry関連のGemとその設定を追加<br/>
01/24 11:40 rspecで全体テストをしないように設定を修正<br/>
04/14 21:40 guard を bundle exec guardに修正<br/></p>

<h2>テスト環境</h2>

<p>テスト環境は以下の通りです。</p>

<pre>
OS : Mac Mountain Lion(OS X 10.8)
Ruby : 1.9.3
Rails : 3.2.11
haml : 3.1.7
coffee-script : 3.2.1
Rspec : 2.12.0
</pre>

]]></content>
  </entry>
  
</feed>
