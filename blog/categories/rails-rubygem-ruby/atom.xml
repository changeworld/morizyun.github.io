<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails RubyGem Ruby | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails-rubygem-ruby/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:54:18+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 3.2.9とBootstrapで作るシンプルな検索機能のテンプレ]]></title>
    <link href="http://morizyun.github.io/blog/search-form-rails-bootstrap/"/>
    <updated>2012-12-22T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/search-form-rails-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="{{ root_url }}{{ page.url }}" title="by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8338/8241799166_0992ebfd14.jpg" width="150" alt="Where?" style="float: left; margin: 0 20px 20px 0;"></a>Rails 3.2.9とTwitter Bootstrapをつかったアプリに検索機能をつけました。個人的忘備録で、手順のメモを書いておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>ControllerにSearchメソッドを追加</h2>

<p>{% codeblock lang:ruby %}
class ArticlesController &lt; ApplicationController
  def search</p>

<pre><code>search_word = URI.decode(params[:q].to_s)
@articles = ImageSite.where(content: search_word)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Viewに検索フォームを追加</h2>

<p>HTMLを使っている場合はこちら。</p>

<p>{% codeblock lang:html %}</p>

<div id="search_form_box">
  <form class="form-search" action="/search" method="get" role="search">
    <input class="input-medium search-query" name="q" placeholder="Search" type="text" value="<%= params[:q] %>">
    <input class="btn" alt="検索" value="検索" type="submit">
  </form>
</div>


<p>{% endcodeblock %}</p>

<p>HAMLを使っている場合はこちら。</p>

<p>{% codeblock lang:haml %}</p>

<h1>search_form_box</h1>

<pre><code>%form.form-search{action: "search", method: "get", role: "search"}
    %input.input-medium.search-query{name: "q", placeholder: "Search", type: "text", value: params[:q]}
    %input.btn{alt: "検索", value: "検索", type: "submit"}
</code></pre>

<p>{% endcodeblock %}</p>

<h2>config/route.rbにSearchを追加</h2>

<p>{% codeblock lang:ruby %}
TestApp::Application.routes.draw do
  match "search" => "articles#search"
end
{% endcodeblock %}</p>

<p>以上でコーディングは終了です。
結果はこんな感じになるとおもいます。(Bootsrap/Bootswatch/Cosmoを適用)</p>

<p><img src="http://farm9.staticflickr.com/8221/8296040843_e4199360fb_n.jpg" width="320" height="77" alt="どうぶつの森 QRコードまとめ 検索ボックス"></p>

<p>ということで、「<a href="http://doubutsu.qr-matome.info/">どうぶつの森 QRコードまとめ</a>」に検索ボックスを設置しました！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>補足: 検索系のGemならSolr/sunspotが有名</h2>

<p>今回はレコードが2000件くらいしかなくって大げさな仕組みが必要なかったので使いませでしたが、大規模なら「Apache Solr」とGem「Sunspot」を使うべきですよね。</p>

<p>一応簡単には調べたのでリンクだけ残しておきます。</p>

<p><a href="https://github.com/sunspot/sunspot">sunspot/sunspot · GitHub</a></p>

<p><a href="http://shirusu-ni-tarazu.hatenablog.jp/entry/2012/08/27/225602">【sunspot】Railsでsunspot(solr)を使用するとき、rsolrでモデルを経由せずインデックス作成を行う。 - 記すに足らず。</a></p>

<p><a href="http://playet.jugem.jp/?eid=169">結局、Rails 3.2 で 大量のデータを検索する場合、Sunspot な Solr が一番 いい感じ。という面白くないオチ。 | JAM☆ぱん</a></p>

<p><a href="http://www.atmarkit.co.jp/fjava/rensai4/bigdata_java01/01.html">検索エンジンの常識をApache Solrで身につける (1/4) - ＠IT</a></p>

<h2>変更来歴</h2>

<p>01/25 18:05 view側のhtmlのactionを修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yaml_db RailsのDBをコマンド一つでYAML形式でダンプ/ロードできるRubyGem]]></title>
    <link href="http://morizyun.github.io/blog/yaml-db-rubygem-rails/"/>
    <updated>2012-12-20T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/yaml-db-rubygem-rails</id>
    <content type="html"><![CDATA[<p><a href="{{ root_url }}{{ page.url }}" title="by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8338/8241799166_0992ebfd14.jpg" width="150" alt="Where?" style="float: left; margin: 0 20px 20px 0;"></a>rakeコマンドでRailsのDBをYAML形式でダンプ(dump)/ロード(load)することが出来るgem yaml_dbの紹介です。ステージング環境のDBをダンプして本番環境と置き換える場合や、HerokuへのDBデータのアップロードなどに使えます。</p>

<p><a href="https://github.com/ludicast/yaml_db" class="button big primary">ludicast/yaml_db | GitHub</a></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>yaml_dbの導入</h2>

<p>いつもどおり<code>Gemfile</code>に以下の内容を追加して、<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>DBをYAML形式でダンプ/ロード</h1>

<p>gem 'yaml_db'
{% endcodeblock %}</p>

<h2>DBのダンプとロード</h2>

<p>gemがインストールされると以下のrakeが追加されます。</p>

<p>{% codeblock lang:bash %}</p>

<h1>db/data.yamlを生成</h1>

<p>rake db:data:dump</p>

<h1>db/日付フォルダ/tablename.yamlを生成</h1>

<p>rake db:data:dump_dir</p>

<h1>db/data.yamlを読み込み</h1>

<p>rake db:data:load</p>

<h1>db/日付フォルダ/tablename.yamlをDBに読み込み</h1>

<p>rake db:data:load_dir
{% endcodeblock %}</p>

<p>公式ページに詳しい説明があります。よかったらご覧になって下さい。</p>

<p><a href="https://github.com/ludicast/yaml_db" class="button big primary">ludicast/yaml_db | GitHub</a></p>

<h2>補足: Capistranoとの連携</h2>

<p>Capistranoを使ってダンプしたDBのyamlデータロードをデプロイプロセスに組込みたい場合は<code>config/deploy.rb</code>に以下を追加。</p>

<p>{% codeblock lang:ruby %}
namespace :deploy do # namespaceは任意
  desc "Load the seed data from db/data.yml"
  task :dump_yml_load do</p>

<pre><code>run "cd #{current_path} &amp;&amp; RAILS_ENV=production bundle exec rake db:load"
</code></pre>

<p>  end
end
after :deploy, "deploy:dump_yml_load"
{% endcodeblock %}</p>

<p>もし、Deploy プロセスを自動化するGem Capistranoについて興味が有る方は、「<a href="/blog/capistrano-git-rails-deploy">Rals3.2.9で始める Git連携Capistranoによる自動デプロイ</a>」をご覧になってみて下さい。</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>補足: DBをロードした時に日本語が文字化けした場合</h2>

<p>僕の環境では発生しませんでしたが、もしDBをロードした時に日本語の文字化けが発生した場合はこちらのリンクが参考になるかと思います。</p>

<p><a href="http://d.hatena.ne.jp/next49/20120515/p1">[RoR] yaml_db で生成したYAMLファイルの日本語が文字化けする</a></p>
]]></content>
  </entry>
  
</feed>
