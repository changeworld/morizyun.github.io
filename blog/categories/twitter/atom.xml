<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Twitter | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/twitter/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:53:37+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Herokuの無料枠でTwitter Stream APIを常時監視 => DBに保存するRubyコード]]></title>
    <link href="http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/"/>
    <updated>2013-12-12T22:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00GJGOPU0/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00GJGOPU0&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00GJGOPU0&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00GJGOPU0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><strong><a href="https://dev.twitter.com/docs/streaming-apis">TwitterのStreaming API</a></strong>を使うと、流れてくるTweetを常時監視することができます。</p>

<p>監視する対象は特定のキーワードだったり、特定のユーザーだったり、特定のサイトを指定したりすることができます。ユーザーの場合はユーザーのツイートに対するリプライも取得できるので、使って見るとかなり夢が広がるAPIです。</p>

<p>今回はこのTwitter Stream APIをHerokuで無料で監視しつつ、DBに蓄積するPGを書いたのでその紹介をしていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>ソースコード</h2>

<p>今回作成したソースコードはこちら。</p>

<p>詳細の説明は省きますが、基本的には環境変数に「TwitterのAPIのキー情報」と「DBへの接続情報」を書いて、後はAPIをEventMachineで監視 => Tweetが取得できたらDBに書き込むようになっています。</p>

<p>今回はこのソースを<code>tweetscan.rb</code>とします。</p>

<p>{% codeblock lang:ruby %}
require 'rubygems'
require 'bundler'
require 'mysql2'
require 'json'</p>

<p>Bundler.require</p>

<p>require 'twitter/json_stream'</p>

<h1>TwitterのAPIキー情報を環境変数から取得</h1>

<p>TWITTER_CONSUMER_KEY        ||= ENV['TWITTER_CONSUMER_KEY']
TWITTER_CONSUMER_SECRET     ||= ENV['TWITTER_CONSUMER_SECRET']
TWITTER_OAUTH_TOKEN         ||= ENV['TWITTER_OAUTH_TOKEN']
TWITTER_OAUTH_TOKEN_SECRET  ||= ENV['TWITTER_OAUTH_TOKEN_SECRET']
FOLLOWS                     ||= ENV['FOLLOWS']</p>

<h1>DBへの接続情報を環境変数から取得</h1>

<p>DB_HOSTNAME   ||= ENV['DB_HOSTNAME']
DB_USER_NAME  ||= ENV['DB_USER_NAME']
DB_PASSWORD   ||= ENV['DB_PASSWORD']
DB_NAME       ||= ENV['DB_NAME']</p>

<p>EventMachine::run {
  stream = Twitter::JSONStream.connect(</p>

<pre><code>:path    =&gt; "/1.1/statuses/filter.json?follow=#{FOLLOWS}",
:oauth =&gt; {
  :consumer_key    =&gt; TWITTER_CONSUMER_KEY,
  :consumer_secret =&gt; TWITTER_CONSUMER_SECRET,
  :access_key      =&gt; TWITTER_OAUTH_TOKEN,
  :access_secret   =&gt; TWITTER_OAUTH_TOKEN_SECRET
},
:ssl =&gt; true
</code></pre>

<p>  )</p>

<p>  stream.each_item do |item|</p>

<pre><code>$stdout.print "item: #{item}\n"
$stdout.flush

# MySQLへ接続(Postgresなどを使う場合は適宜変更)
client = Mysql2::Client.new(:host =&gt; DB_HOSTNAME, :username =&gt; DB_USER_NAME, :password =&gt; DB_PASSWORD || '', :database =&gt; DB_NAME)

# Tweetのjsonをパース
tw_json = JSON.parse(item)

# DBに格納するためにエンコーディング
user_id                         = client.escape(tw_json['user']['id_str'])
user_name                       = client.escape(tw_json['user']['name'])
user_screen_name                = client.escape(tw_json['user']['screen_name'])
user_image                      = client.escape(tw_json['user']['profile_image_url'])
user_description                = client.escape(tw_json['user']['description']) rescue nil
text                            = client.escape(tw_json['text'])
post_media_url                  = client.escape(tw_json['entities']['media'].first['media_url']) rescue nil
twitter_status_id               = client.escape(tw_json['id_str'])
twitter_reply_status_id         = client.escape(tw_json['in_reply_to_status_id_str']) rescue nil
twitter_reply_user_id           = client.escape(tw_json['in_reply_to_user_id_str'])   rescue nil
twitter_reply_user_screen_name  = client.escape(tw_json['in_reply_to_screen_name'])   rescue nil

# tweetsテーブルに書き込み
client.query("INSERT INTO tweets (user_id, user_name, user_screen_name, text, post_media_url, user_image, user_description, twitter_status_id, twitter_reply_status_id, twitter_reply_user_id, twitter_reply_user_screen_name, updated_at, created_at) VALUES ('#{user_id}', '#{user_name}', '#{user_screen_name}', '#{text}', '#{post_media_url}', '#{user_image}', '#{user_description}', '#{twitter_status_id}', '#{twitter_reply_status_id}', '#{twitter_reply_user_id}', '#{twitter_reply_user_screen_name}', '#{Time.now}', '#{Time.now}')")

# MySQLとの接続を解除
client.close
</code></pre>

<p>  end</p>

<p>  stream.on_error do |message|</p>

<pre><code>$stdout.print "error: #{message}\n"
$stdout.flush
</code></pre>

<p>  end</p>

<p>  # 再接続は書いていないです。書いて教えてくださいw
  stream.on_reconnect do |timeout, retries|</p>

<pre><code>$stdout.print "reconnecting in: #{timeout} seconds\n"
$stdout.flush
</code></pre>

<p>  end</p>

<p>  stream.on_max_reconnects do |timeout, retries|</p>

<pre><code>$stdout.print "Failed after #{retries} failed reconnects\n"
$stdout.flush
</code></pre>

<p>  end
}
{% endcodeblock %}</p>

<h2>foremanをつかったプロセス管理</h2>

<p>今回のソースはforemanを使っています。<code>Gemfile</code>に以下のコードを追加して<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:bash %}</p>

<h1>プロセス管理</h1>

<p>gem 'foreman'
{% endcodeblock %}</p>

<p>次にforeman用の設定ファイル<code>Procfile</code>を作成。</p>

<p>{% codeblock lang:bash %}
tweetscan: bundle exec ruby tweetscan.rb
{% endcodeblock %}</p>

<p>これで設定は完了です。以下のコードを実行するとプロセスがスタートして、Twitter Streamの監視を始めます。<br/>
ただし現時点では、Twitterのキー情報やDBへの接続情報が登録されていないので失敗します。</p>

<p>{% codeblock lang:bash %}
foreman start
{% endcodeblock %}</p>

<h2>Twitterのキー情報の取得と環境変数への登録</h2>

<p>まずは以下のサイトでTwitterアプリを登録してください。<br/>
(Sign in => アプリの登録)</p>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong></p>

<p>登録したら環境変数にTwitterキーを登録します。まずはローカルへのキー情報の登録です。foremanで管理しているプロセスでは、<code>.env</code>ファイルに環境変数にしたい情報を書き込むと勝手に読み込んでくれます。</p>

<p>{% codeblock lang:bash %}
TWITTER_CONSUMER_KEY=xxx
TWITTER_CONSUMER_SECRET=xxx
TWITTER_OAUTH_TOKEN=xxx
TWITTER_OAUTH_TOKEN_SECRET=xxx
{% endcodeblock %}</p>

<p>こういった面倒な手順をふむ理由は、キー情報が第三者に使われると悪いことをされる可能性があるからです。(<code>.env</code>はgitignore☆)</p>

<p>同じ流れで、DBの情報やAPIの引数なども環境変数に登録してください。</p>

<h2>Herokuへのデプロイ</h2>

<p>では、Herokuにソースコードをデプロイ。<br/>
(このまえにソースはローカルでgitにコミットしておいてください)</p>

<p>{% codeblock lang:bash %}
heroku create heroku-twitterscan --stack cedar
git push heroku master
{% endcodeblock %}</p>

<p>続いて、環境変数にTwitterのキー情報やDBへの接続情報、APIの引数などを登録。</p>

<p>{% codeblock lang:bash %}
heroku config:set TWITTER_CONSUMER_KEY=xxx
heroku config:set TWITTER_CONSUMER_SECRET=xxx
heroku config:set TWITTER_OAUTH_TOKEN=xxx
heroku config:set TWITTER_OAUTH_TOKEN_SECRET=xxx
{% endcodeblock %}</p>

<p>ちなみに、HerokuのDBの作成手順などは拙著の以下の記事などがオススメです。</p>

<p><strong><a href="http://morizyun.github.io/blog/heroku-postgresql-useful-commands/">Heroku/Posgresqlでよく使うコマンド一覧</a></strong></p>

<p><strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの最短手順 [haml/bootstrap 3.0/postgresql or MySQL]</a></strong></p>

<p>ということで<code>twitterscan.rb</code>のプロセスを起動！</p>

<p>{% codeblock lang:bash %}
heroku scale twitterscan=1
{% endcodeblock %}</p>

<p>以下のコマンドでプロセスが起動しているか、確認できます。</p>

<p>{% codeblock lang:bash %}
heroku ps
{% endcodeblock %}</p>

<p>ツイート結果はログからも確認できます！</p>

<p>{% codeblock lang:bash %}
heroku logs --tail
{% endcodeblock %}</p>

<p>ということでHerokuの無料枠でTweetをチェックして、DBに格納までする手順でした。
こちらはGitHubでもソースコードを公開しておきます。</p>

<p><a href="https://github.com/morizyun/tweetscan" class="button big primary">morizyun/tweetscan GitHub</a></p>

<p>エンジニア経験浅いので、是非色々とツッコミを頂ければ幸いです。よろしくお願いします！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/voloko/twitter-stream">voloko/twitter-stream</a></strong></p>

<p><strong><a href="http://blog.monoweb.info/blog/2012/01/24/heroku-streaming-api/">HerokuでStreaming APIを使うTwitter Botを作る | monoの開発ブログ</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/tagomoris/20111210/1323502295">RubyでMySQLに繋ぐためのruby-mysqlとmysql2 - tagomorisのメモ置き場</a></strong></p>

<p><strong><a href="http://stackoverflow.com/questions/5572557/convert-datetime-to-mysql-format-on-ruby-on-rails">Convert datetime to mysql format on Ruby on Rails - Stack Overflow</a></strong></p>
]]></content>
  </entry>
  
</feed>
