<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CentOS | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/centos/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:56:30+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[さくらVPS&AWS&VULTR EC2/CentOS 6.5へのRailsサーバ構築手順！[Ruby]]]></title>
    <link href="http://morizyun.github.io/blog/centos63-sakura-vps-rails-setup-guide/"/>
    <updated>2015-03-16T10:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/centos63-sakura-vps-rails-setup-guide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798038164/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798038164&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798038164&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798038164" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
さくらVPS/AWS EC2/VULTRのCentOS 6.5にRailsサーバを構築するための手順をまとめました。
Railsの簡単なサーバーの構築から、各種ミドルウェアの導入まで少しずつ充実してきたかなと思います。
用途に応じて、ぜひご活用ください。また、もしこういうミドルウェアの導入方法がわからないといった
事があれば、お気軽にコメントをください！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>最近のサーバのお気に入り</h2>

<p>最近VULTRのサーバが気に入っています。VULTRのメリットはこちら</p>

<pre>
* SSDベースのサーバを時間単位の課金体制(初回費用や解約月のタイミングなど気にしなくていい)
* メモリ768MBで$5/月
* 性能もEC2等と比べてもいい
</pre>


<p>ということでもし試して見たい方は拙著『<strong><a href="/blog/VULTR-server-ssd-vps-easy-to-use/">VULTR 日本リージョン/MEM 768MB/SSD 15GB VPS $5/月を借りてみた！</a></strong>』を読んでみてください＾＾</p>

<h2>(A) AnsibleやVagrantを使ったサーバ構築</h2>

<p>Ansibleはすごく簡単にサーバ構築手順をコード化できるツールです。
めちゃくちゃ便利なので、ぜひ使って見てください。</p>

<h3>(A-1) <strong><a href="/blog/ansible-rails-rvm-nginx-mysql-postgresql-centos">AWS/VULTR + AnsibleでベーシックなRailsサーバを簡単構築</a></strong></h3>

<h3>(A-2) <strong><a href="/blog/vagrant-ansible-rails-rvm-nginx-mysql/">Vagrant/AWS + AnsibleでCentOS/Nginx/MySQL/RVM/Ruby2.1.2環境を構築</a></strong></h3>

<h2>(B)これだけは導入したい</h2>

<h3>(B-1) <a href="/blog/sakura-vps-centos63-ssh-setup">初期状態から鍵認証SSHでの接続まで</a></h3>

<p>初期状態からSSHで接続できるようにするまでです。</p>

<h3>(B-2) <a href="/blog/iptable-sakura-vps-centos63">iptableの設定</a></h3>

<p>iptables(通信ポートを制限できるファイヤーウオール用のパッケージ)の設定です。</p>

<h3>(B-3) <a href="/blog/logwatch-sakura-vps-centos63">logwatchの導入</a></h3>

<p>logwatchはログを整形してメールで1日一回送ってくれるパッケージの設定です。</p>

<h3>(B-4) <a href="/blog/stop-noneed-service-sakura-vps-centos63">ipv6の停止/日本語化/denyhostsの導入</a></h3>

<p>ipv6の停止/日本語化/denyhosts導入についての手順です。</p>

<h3>(B-5) <a href="/blog/nginx-setup-sakura-vps-centos">Nginxの導入</a></h3>

<p>Webサーバ Nginxの導入手順です。</p>

<h3>(B-6) <a href="/blog/passenger-install-apache-ruby-rails">Passengerの導入</a></h3>

<p>ApacheでRailsを使えるようにするためのパッケージの導入手順です。</p>

<h3>(B-7) <a href="/blog/postgresql-mac-centos-rails/">PostgreSQL 9.3の導入</a></h3>

<p>MySQLと並ぶオープンソースのRDBMであるPostgreSQLの導入手順です。海外のRailsプロジェクトではMySQLよりもPostgreSQLのほうが人気があるっぽいです。Herokuを使う方にはおすすめです。</p>

<h3>(B-8) <a href="/blog/rvm-install-centos-ruby-rails">Ruby 2.0.0/RVMの導入</a></h3>

<p>RVM(Ruby Version Management)とRuby 1.9.3の導入手順です。</p>

<h2>(C) 必要に応じて</h2>

<h3>(C-1) <a href="/blog/mysql-setup-sakura-vps-centos63">MySQL 5.5の導入</a></h3>

<p>データベース MySQLの導入手順です。</p>

<h3>(C-2) <a href="/blog/postfix-centos-sakura-vps-aws/">メールサーバ Postfix/Dovecotの導入</a></h3>

<p>メールサーバのPostfix/Devocotの導入手順です。これは、Railsサーバには直接不要ですが、メールを使ったサービスを作る場合に使えると思います。</p>

<h3>(C-3) <a href="/blog/gem-dalli-memcache/">高性能な分散メモリキャッシュサーバ memcached</a></h3>

<p>データベースへの問い合わせ結果を一時的にキャッシュすることで，データベースへのアクセス回数を減らし，動的なウェブアプリケーションの高速化やスケーラビリティの向上のために利用されているツールです。次のRedisと同じく、高速化の手伝いをしてくれます。</p>

<h3>(C-4) <a href="/blog/redis-mac-centos-rails/">永続化対応のインメモリDB Redisの導入</a></h3>

<p>memcachedライクなKey-Value方式と、永続化対応のインメモリDB『Redis』の導入手順です。こちらも必須のツールではないですが、高速化の際に活用出来ますよ！</p>

<h3>(C-5) <a href="/blog/apache-setup-sakura-vps-centos63">Apacheの導入</a></h3>

<p>Webサーバ Apacheの導入手順です。</p>

<h2>(D) AWS編</h2>

<h3>(D-1) <a href="/blog/elastic-block-store-aws-amazon-strage/">Elastic Block Store(EBS)をAWSのEC2にヒモ付</a></h3>

<p>AWSのElastic Block Store(EBS)の設定手順です。</p>

<h2>(E) Ubuntu編</h2>

<h3>(E-1) <a href="/blog/linux-swap-memory-space/">Ubuntuサーバのスワップ領域の割り当て</a></h3>

<p>Ubuntuでスワップ領域を割り当てるための手順です。題名のCentOSから離れていますが(笑)</p>

<h2>(F)番外編</h2>

<h3>(F-1) <a href="/blog/VULTR-server-ssd-vps-easy-to-use/">VULTR 日本リージョン/MEM 768MB/SSD 15GB VPS $5/月を借りてみた！</a></h3>

<p>日本リージョン/MEM 768MB/SSD 15GBが時間単位で借りれて、月間でもわずか$5。初期費用がいらなかったり、初回デポジット2倍キャンペーンをやっていたりとおすすめです！</p>

<h3>(F-2) <a href="/blog/aws-epel-active-denyhosts/">AWS EC2のAmazon Linux AMIでRailsサーバを立ち上げる際の違い</a></h3>

<p>AmazonのAWSを使ってRailsサーバを立ち上げる際の手順です。基本は(1)-(8)でいけるのですが、若干違いがあったのでその部分のメモです。</p>

<h3>(F-3) <a href="/blog/paas-vps-aws-compare">導入の前に/コストパフォーマンスに優れたRailsサーバの紹介</a></h3>

<p>2012年はRailsサーバの選択肢がより多くなった1年です。そこで個人が使うのにコストパフォーマンスが最適なサービスを幾つかチョイスしてみました！</p>

<h3>(F-4) <a href="/blog/yslow-speed-up-rails-server-centos">Webサイトの速度改善を提案してくれるブラウザアドオン「YSlow」</a></h3>

<p>アプリのレスポンス向上を目指すのに最適なアドオンの紹介です。</p>

<h2>変更来歴</h2>

<p>(13/01/27 22:00) 「(9) AWS EC2のAmazon Linux AMIでRailsサーバを立ち上げる際の違い」を追加<br/>
(13/01/30 16:45) 「(9) メールサーバ Postfix/Dovecotの導入」を追加<br/>
(13/03/01 16:45) memcachedとRedisの導入手順を追加<br/>
(13/03/02 13:15) Postgresの導入手順を追加<br/>
(13/09/24 07:55) Ruby2.0.0対応 &amp; CentOS 6.4対応、記述ミス修正<br/>
(14/04/23 20:00) AWS - CentOS 6.5、Nginx環境の構築手順を追記<br/>
(14/04/29 08:00) Ubuntuサーバのスワップ領域の割り当てを追加<br/>
(14/05/02 08:55) Elastic Block Store(EBS)をAWSのEC2にヒモ付<br/>
(14/08/04 19:25) VULTRの説明や、Ansibleの解説記事を追加<br/>
(2015-03-16 10:10) Ansibleの解説記事を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac MountainLion/CentOS 6.4へのPostgreSQL 9.2の導入手順]]></title>
    <link href="http://morizyun.github.io/blog/postgresql-mac-centos-rails/"/>
    <updated>2015-01-18T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/postgresql-mac-centos-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00B73U7OI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00B73U7OI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00B73U7OI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00B73U7OI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />MySQLと並ぶオープンソースのRDBMS、『PostgreSQL』の導入手順です。海外ではHerokuやEngine Yardが標準のDBをPostgreSQLにしていたりと人気が高いので、使えるようになっておいて、損はないと思います！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>CentOSへのインストール</h2>

<p>まずは本家の<a href="http://yum.postgresql.org/repopackages.php">PostgreSQL RPM Repository (with Yum)</a>で自分の環境にマッチした<code>rpm</code>を探して以下のコマンドを実行。(URLの部分は自分の環境のものに書き換えて下さい)</p>

<p>{% codeblock lang:bash %}
wget -P /tmp http://yum.postgresql.org/9.2/redhat/rhel-6-x86_64/pgdg-centos92-9.2-6.noarch.rpm
sudo rpm -ivh /tmp/pgdg-centos92-9.2-6.noarch.rpm
{% endcodeblock %}</p>

<p>続いて、<code>postgres9.2</code>をインストール。</p>

<p>{% codeblock lang:bash %}
sudo yum install -y postgresql92-server postgresql92-devel postgresql92-contrib
{% endcodeblock %}</p>

<p>DBを初期化。</p>

<p>{% codeblock lang:bash %}
sudo /etc/rc.d/init.d/postgresql-9.2 initdb
{% endcodeblock %}</p>

<p>Postgresを起動。</p>

<p>{% codeblock lang:bash %}
sudo /etc/rc.d/init.d/postgresql-9.2 start
{% endcodeblock %}</p>

<p>さらにサーバの起動時にPostgresが起動するように設定します。</p>

<p>{% codeblock lang:bash %}
sudo chkconfig postgresql-9.2 on
{% endcodeblock %}</p>

<p>自動起動の設定が成功したか確認。</p>

<p>{% codeblock lang:bash %}
chkconfig --list | grep postgresql-9.2</p>

<blockquote><p>postgresql-9.2  0:off   1:off   2:on    3:on    4:on    5:on    6:off #&lt;= となっていれば成功
{% endcodeblock %}</p></blockquote>

<h2>Postgresqlの設定修正</h2>

<p>9.2の初期設定だと、unixのユーザー名がPostgreSQLのユーザー名と一致していないといけないようになっているそうです。
その修正方法です。</p>

<p>{% codeblock lang:bash %}
sudo vi /var/lib/pgsql/9.2/data/pg_hba.conf
{% endcodeblock %}</p>

<p>上のファイルの中の以下の部分を修正。</p>

<p>{% codeblock lang:bash %}
local   all             postgres                                peer</p>

<h1>↓ peer => md5に修正</h1>

<p>local   all             postgres                                md5
{% endcodeblock %}</p>

<h2>CentOSへのpgのインストール</h2>

<p>CentOSへpgをインストールする場合は、<code>vim ~/.bashrc</code>で事前に以下を追加。</p>

<p>{% codeblock lang:bash %}
export PATH=${PATH}:/usr/pgsql-9.2/bin
{% endcodeblock %}</p>

<p>続いて、<code>source ~/.bashrc</code>を実行して設定を反映。</p>

<p><code>pgsql-9.2</code>のところはバージョンによって適宜変更して下さい。</p>

<p>これが完了したら<code>gem install pg</code>でインストールできます。</p>

<h2>CentOSでのユーザー作成コマンド</h2>

<p>インストールが完了すると、postgresユーザーが追加されます。このユーザーになってから、createuserコマンドを実行するとユーザーが作成されます。
<code>[ユーザー名]</code>には任意のユーザー名を追加してください。</p>

<p>{% codeblock lang:bash %}
sudo su -
su - postgres
createuser -s [ユーザー名]
{% endcodeblock %}</p>

<h2>Macへのインストール(Homebrew)</h2>

<p>Macの『<a href="http://mxcl.github.com/homebrew/">Homebrew</a>』をつかってのインストール手順です。まずは<code>postgres</code>をインストール。</p>

<p>{% codeblock lang:bash %}
brew install postgresql
{% endcodeblock %}</p>

<p>続いて、DBを初期化する前に既存のposgreSQL環境を移動。</p>

<p>{% codeblock lang:bash %}
mv /usr/local/var/postgres /usr/local/var/postgres.org
{% endcodeblock %}</p>

<p>でもってDB初期化。</p>

<p>{% codeblock lang:bash %}
initdb /usr/local/var/postgres -E utf8</p>

<blockquote><p>The files belonging to this database system will be owned by user "xxxx".
This user must also own the server process.</p>

<p>The database cluster will be initialized with locale "ja_JP.UTF-8".
initdb: could not find suitable text search configuration for locale "ja_JP.UTF-8"
The default text search configuration will be set to "simple".</p>

<p>fixing permissions on existing directory /usr/local/var/postgres ... ok
creating subdirectories ... ok
selecting default max_connections ... 20
selecting default shared_buffers ... 1600kB
creating configuration files ... ok
creating template1 database in /usr/local/var/postgres/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok</p>

<p>WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.</p>

<p>Success. You can now start the database server using:</p>

<pre><code>postgres -D /usr/local/var/postgres
</code></pre>

<p>or</p>

<pre><code>pg_ctl -D /usr/local/var/postgres -l logfile start
</code></pre>

<p>{% endcodeblock %}</p></blockquote>

<p>Macにプリインストール(?)されているpostgresを見に行かないように設定を修正。(詳細は<strong><a href="http://d.hatena.ne.jp/hiro_nemu/20120302/1330679054">こちら</a></strong>)</p>

<p>{% codeblock lang:bash %}
wget http://nextmarvel.net/blog/downloads/fixBrewLionPostgres.sh
sh fixBrewLionPostgres.sh
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
sudo mkdir /var/pgsql_socket
sudo chmod 777 /var/pgsql_socket
{% endcodeblock %}</p>

<p>PostgreSQLの起動。</p>

<p>{% codeblock lang:bash %}
pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
{% endcodeblock %}</p>

<p>PostgreSQLの動作確認。</p>

<p>{% codeblock lang:bash %}
psql -l</p>

<pre><code>                          List of databases
</code></pre>

<p>   Name    | Owner | Encoding |   Collate   |    Ctype    | Access privileges
-----------+-------+----------+-------------+-------------+-------------------
 postgres  | komji | UTF8     | ja_JP.UTF-8 | ja_JP.UTF-8 |
 template0 | komji | UTF8     | ja_JP.UTF-8 | ja_JP.UTF-8 | =c/komji         +</p>

<pre><code>       |       |          |             |             | komji=CTc/komji
</code></pre>

<p> template1 | komji | UTF8     | ja_JP.UTF-8 | ja_JP.UTF-8 | =c/komji         +</p>

<pre><code>       |       |          |             |             | komji=CTc/komji
</code></pre>

<p>{% endcodeblock %}</p>

<p>となっていれば成功。もしエラーが発生するようなら、対策を下の方のおまけに書いたのでやってみて下さい。</p>

<p>次に、PostgreSQLを自動起動するように設定。</p>

<p>{% codeblock lang:bash %}
ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
{% endcodeblock %}</p>

<h2>MacでのGem pgのインストール</h2>

<p>もし既に<code>pg</code>をインストール済なら一度削除(<code>gem uninstall pg</code>)して下さい。</p>

<p>ではいよいよインストールですが、<code>gem install pg</code>ではNGらしいです。詳しくは以下のコマンドを実行。</p>

<p>{% codeblock lang:bash %}
brew info postgresql</p>

<blockquote><p>If you want to install the postgres gem, including ARCHFLAGS is recommended:
env ARCHFLAGS="-arch x86_64" gem install pg
{% endcodeblock %}</p></blockquote>

<p>ということで以下のコマンドを実行して<code>pg</code>をインストール。</p>

<p>{% codeblock lang:bash %}
env ARCHFLAGS="-arch x86_64" gem install pg
{% endcodeblock %}</p>

<h2>コンソールからのPostgreSQLの操作</h2>

<p>コマンドラインからのpostgresへの操作です。</p>

<p>{% codeblock lang:bash %}</p>

<h1>ユーザーの作成(DBの作成権限のあるユーザー) パスワード省略</h1>

<p>createuser -s [ユーザー名]</p>

<h1>ユーザーの作成(DBの作成権限のあるユーザー) パスワード付き</h1>

<p>createuser -s [ユーザー名] -P
新しいロールのためのパスワード: &lt;= パスワード入力
もう一度入力してください： &lt;= パスワード入力</p>

<h1>ユーザーの削除</h1>

<p>dropuser [ユーザー名]</p>

<h1>データベースの作成(superuserではない)</h1>

<p>createdb [データベース名] -O [ユーザー名]</p>

<h1>データベースの作成(superuser)</h1>

<p>createdb [データベース名] -O [ユーザー名] -s</p>

<h1>データベースの削除</h1>

<p>dropdb [データベース名]</p>

<h1>データベース一覧の表示</h1>

<p>psql -l
{% endcodeblock %}</p>

<p>PostgreSQLのコマンドラインツール<code>psql</code>の主要コマンド一覧です。<br/>MySQLのmysqlに近いツールのようです。</p>

<p>{% codeblock lang:bash %}</p>

<h1>PostgreSQLの再起動</h1>

<p>pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log restart</p>

<h1>psql の起動</h1>

<p>psql [データベース名]</p>

<h1>psql の終了</h1>

<p>\q</p>

<h1>psqlで使えるコマンド一覧</h1>

<p>\?
{% endcodeblock %}</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>おまけ：[エラー] connections on Unix domain socket "/var/pgsql_socket/.s.PGSQL.5432"? の対策</h2>

<p>次のようなエラーメッセージが出た場合の対策です。</p>

<blockquote>
psql: could not connect to server: No such file or directory
Is the server running locally and accepting
connections on Unix domain socket "/var/pgsql_socket/.s.PGSQL.5432"?
</blockquote>


<h3>(1) プリインストールのPostgreSQLとバッティングしている場合</h3>

<p>対策用のシェルスクリプトを実行。</p>

<p>{% codeblock lang:bash %}</p>

<h1>シェルスクリプトの取得</h1>

<p>curl -o fixBrewLionPostgresql.sh http://nextmarvel.net/blog/downloads/fixBrewLionPostgres.sh</p>

<h1>シェルスクリプトの実行権限を追加</h1>

<p>chmod a+x fixBrewLionPostgresql.sh</p>

<h1>シェルスクリプトの実行</h1>

<p>./fixBrewLionPostgresql.sh
{% endcodeblock %}</p>

<p>これで<code>psql -l</code>でエラーが発生しなくなれば成功です。</p>

<h3>(2) 過去にPostgreSQLをインストールしたことがある場合</h3>

<p>以下のコマンドを実行してフォルダを初期化。</p>

<p>{% codeblock lang:bash %}</p>

<h1>フォルダの削除</h1>

<p>rm -rf /usr/local/var/postgres</p>

<h1>初期化</h1>

<p>initdb /usr/local/var/postgres
{% endcodeblock %}</p>

<h2>Special Thanks</h2>

<p><a href="http://mayoiga-shironeko.hatenablog.com/entry/2012/10/03/005753">CentOS 6.3にPostgreSQL9.2をインストール - 迷い家の白猫 技術部</a></p>

<p><a href="http://y-kit.jp/saba/xp/postgrecmd.htm">PostgreSQLデータベースのコマンド</a></p>

<p><a href="http://kraudio.com.br/instalando-postgresql-no-mac-os-x-10-8/">Instalando PostgreSQL no Mac OS X (10.8)Blog do Kraudio | Blog do Kraudio</a></p>

<p><a href="http://d.hatena.ne.jp/hiro_nemu/20120302/1330679054">MacBook AirにPostgreSQLをbrewでインストールした - ありの日記</a></p>

<p><a href="http://d.hatena.ne.jp/NowTom/20110728/1311834182">Mac+HomeBrew+Postgresql+pg - NowTomの日記</a></p>

<p><a href="http://qa.atmarkit.co.jp/q/2395">PostgreSQLとMySQLはどちらかに明確な優位性がありますか？ - QA@IT</a></p>

<p><a href="http://stackoverflow.com/questions/9234960/gem-install-pg-with-pg-config-works-bundle-fails">postgresql - gem install pg --with-pg-config works, bundle fails - Stack Overflow</a></p>

<p><a href="http://www.postgresql.jp/document/8.4/html/sql-alterrole.html">ALTER ROLE</a></p>

<p><a href="http://web.sfc.keio.ac.jp/~t11240rk/blog/?p=191">Mac(MTLion)にHomebrewでPostgresqlを入れる</a></p>

<p><a href="http://qiita.com/tstomoki/items/0f1a930bd42a8e1fdaac">Homebrewを使ったPostgreSQLのインストール(Mac OS Lion)</a></p>

<p><a href="http://qa.atmarkit.co.jp/q/2604">psqlがPeer authentication failedというエラーで起動できない - QA@IT</a></p>

<h2>変更来歴</h2>

<p>(2013/09/25 05:25) Mac Mountain Lionでのトラブルシューティングを追加<br/>
(2013/09/25 05:50) CentOS 6.4対応<br/>
(2014/09/23 19:30) createuserのパラメータ修正<br/>
(2014/11/02 12:20) CentOSでのユーザー作成の手順を追加<br/>
(2015-01-18 11:30) 記述ミスを修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB]]></title>
    <link href="http://morizyun.github.io/blog/redis-mac-centos-rails/"/>
    <updated>2014-12-22T20:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/redis-mac-centos-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873115930/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873115930&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873115930&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873115930" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />memcachedライクなKey-Value方式と、永続化対応のインメモリDB『<strong><a href="http://redis.io/">Redis</a></strong>』をMac OSXや、CentOSに導入する手順です。Redisを効率的に活用して、さらにRailsアプリを高速化しちゃいましょう＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>CentOS 6.xへのインストール</h2>

<p>まずは、CentOS 6.xにyumをつかってRedisをインストールする前にEPELを追加。追加済の場合はスキップ。</p>

<p>{% codeblock lang:bash %}
sudo rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
sudo yum --enablerepo=epel -y install redis
{% endcodeblock %}</p>

<p>Redisを起動。</p>

<p>{% codeblock lang:bash %}
sudo /etc/init.d/redis start
{% endcodeblock %}</p>

<p>次に動作確認してみます。<code>redis-cli</code>でRedisに接続できます。</p>

<p>{% codeblock lang:bash %}
redis-cli</p>

<blockquote><p>set 'test' 10
OK
get 'test'
"10"
exit
{% endcodeblock %}</p></blockquote>

<p>さらにサーバの起動時にRedisが起動するように設定します。</p>

<p>{% codeblock lang:bash %}
sudo chkconfig redis on
{% endcodeblock %}</p>

<p>自動起動の設定が成功したか確認。</p>

<p>{% codeblock lang:bash %}
chkconfig --list | grep redis</p>

<blockquote><p>redis           0:off   1:off   2:on    3:on    4:on    5:on    6:off #&lt;= となっていれば成功
{% endcodeblock %}</p></blockquote>

<h2>Macへのインストール(Homebrew)</h2>

<p>Macの『<a href="http://mxcl.github.com/homebrew/">Homebrew</a>』をつかってのインストール手順はこちら。</p>

<p>{% codeblock lang:bash %}
brew install redis</p>

<blockquote><p>==> Downloading http://redis.googlecode.com/files/redis-2.6.7.tar.gz
Already downloaded: /Library/Caches/Homebrew/redis-2.6.7.tar.gz
==> make -C /private/tmp/redis-KHTm/redis-2.6.7/src CC=cc
==> Caveats
You should reload redis:</p>

<pre><code>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
</code></pre>

<p>/usr/local/Cellar/redis/2.6.7: 9 files, 744K, built in 2 seconds
{% endcodeblock %}</p></blockquote>

<p>Macの起動時にRedisが自動起動するように設定。</p>

<p>{% codeblock lang:bash %}
ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
{% endcodeblock %}</p>

<p>redisの接続確認はこちら。</p>

<p>{% codeblock lang:bash %}
redis-cli
{% endcodeblock %}</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://blog.livedoor.jp/tattyamm/archives/4147335.html">さくらVPS(CentOS6.3)へのredisインストールとchkconfigへの登録 - えんたつの記録</a></p>

<p><a href="http://codenote.net/redis/1610.html">[Mac] Redis を Homebrew でインストールする手順 | CodeNote.net</a></p>

<p><a href="http://blog.scimpr.com/2013/01/21/rails%E3%81%A7redis%E3%82%92%E4%BD%BF%E3%81%86%E4%BE%8B%E3%81%AE%E3%83%A1%E3%83%A2/">RailsでRedisを使う例のメモ | Scimpr Blog</a></p>

<p><a href="http://www.techscore.com/blog/2013/01/09/memcached%E3%81%A8redis%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/">» memcachedとredisについて TECHSCORE BLOG</a></p>

<h2>変更来歴</h2>

<p>(13/03/01) 新規作成<br/>
(14/01/03) Redisの自動起動のコマンドを修正<br/>
(14/12/22) 基本的な記述を修正<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらVPS/Cent OS 6.4 Nginx導入[Railsサーバへの道]]]></title>
    <link href="http://morizyun.github.io/blog/nginx-setup-sakura-vps-centos/"/>
    <updated>2014-07-24T13:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/nginx-setup-sakura-vps-centos</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048702270/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048702270&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048702270&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048702270" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
さくらVPS 2GB SSDのCentOS 6.4をセットアップしてイケてるRailsサーバに仕上げるまでのシリーズです。第5回はNginxの導入です。NginxはApacheと比べると歴史は浅いですがRailsで使うのもかなりメジャーになってきました。もしApacheの方が、好みの方は<strong><a href="/blog/apache-setup-sakura-vps-centos63">さくらVPS/Cent OS 6.4へのApache導入</a></strong>を試してみて下さい！</p>

<p><strong>(07-10 20:30) ELB経由のnginxでクライアントのIPを取得する方法を追記</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>リポジトリの登録</h2>

<p>以下のコマンドを実行して、nginxのリポジトリを登録。</p>

<p>{% codeblock lang:bash %}
sudo rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
{% endcodeblock %}</p>

<p>nginxのリポジトリ登録確認。</p>

<p>{% codeblock lang:bash %}
yum list nginx --disablerepo=* --enablerepo=nginx
nginx            | 2.9 kB     00:00
nginx/primary_db |  24 kB     00:00
Available Packages
nginx.x86_64 1.4.2-1.el6.ngx nginx
{% endcodeblock %}</p>

<h2>Nginxのインストール</h2>

<p>次のコマンドを実行してNginxをインストール。</p>

<p>{% codeblock lang:bash %}
sudo yum install -y nginx --disablerepo=* --enablerepo=nginx
{% endcodeblock %}</p>

<h2>Nginxの設定</h2>

<p>Nginxを起動及び、自動起動を設定。</p>

<p>{% codeblock lang:bash %}
sudo service nginx start
sudo chkconfig nginx on
{% endcodeblock %}</p>

<p>自動機能の確認。以下のようになっていれば成功。</p>

<p>{% codeblock lang:bash %}
chkconfig --list nginx
nginx           0:off   1:off   2:on    3:on    4:on    5:on    6:off
{% endcodeblock %}</p>

<p>実際のRailsへの利用は僕自身の検証が追いついていません。という申し訳ない状況です。完熟トマトというブログの<strong><a href="http://kanjuku-tomato.blogspot.jp/2013/02/centos-63railsnginxrailsunicornpostgres.html">CentOS 6.3にRails実行環境を構築する(Nginx+Rails+Unicorn+PostgreSQL)</a></strong>がとても良くまとまっていてわかりやすいので、是非ご覧ください。改めて検証をやりきったらアップデートします！</p>

<h2>オレオレ証明書でSSLの導入の手順</h2>

<p>オレオレ証明書を使ってSSLをとりあえず導入する手順です。</p>

<p>まずはオレオレ証明を作成。</p>

<p>{% codeblock lang:bash %}
sudo su -
mkdir /etc/nginx/ssl
cd /etc/nginx/ssl
openssl genrsa -des3 -out server.key 1024
openssl req -new -key server.key -out server.csr
cp server.key server.key.org
openssl rsa -in server.key.org -out server.key
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
{% endcodeblock %}</p>

<p>作った証明書を<code>nginx.conf</code>側に反映。</p>

<p>{% codeblock lang:bash %}
server {</p>

<pre><code># 以下を443側に追記
listen 443 default ssl;
ssl on;
ssl_certificate /etc/nginx/ssl/server.crt;
ssl_certificate_key /etc/nginx/ssl/server.key;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>httpのアクセスをhttpsにリダイレクトさせる</h2>

<p><code>nginx.conf</code>を以下の様に書き換え！</p>

<p>{% codeblock lang:bash %}
server {</p>

<pre><code>listen 80;
server_name example.com;
return 301 https:/$host$request_uri;
</code></pre>

<p>}</p>

<p>server {
  listen 443 default ssl;
  server_name example.com;
  root /var/rails/example.com;</p>

<p>  ssl on;
  ssl_certificate /etc/nginx/ssl/server.crt;
  ssl_certificate_key /etc/nginx/ssl/server.key;
  location / { proxy_pass http://127.0.0.1:5001; }
}
{% endcodeblock %}</p>

<h2>AWS ELB経由でnginxに繋げる場合にクライアントIPを取得する方法</h2>

<p>AWS ELB経由でnginxに繋げる場合にクライアントIPを取得する方法です。正直言って、かなりハマったので忘備録がてらのメモです！</p>

<p>{% codeblock lang:bash %}
http {
  # 以下のコードをhttp/serverなどの中に追記
  real_ip_header     X-Forwarded-For;
  set_real_ip_from   0.0.0.0/0;
}
{% endcodeblock %}</p>

<p>IP制限などを行いたいときに超便利です！</p>

<h2>Special Thanks</h2>

<p><a href="http://dogmap.jp/2011/05/10/nginx-ssl/">nginx で ssl 設定をする - dogmap.jp</a></p>

<p><a href="http://d.hatena.ne.jp/yoshi-ken/20120205">CentOS-6へ最新版のnginxを3分でインストールする方法 - Y-Ken Studio - 日々クリエイション</a></p>

<h2>変更来歴</h2>

<p>(13/09/24 07:45) 新規作成<br/>
(14/07-10 20:30) ELB経由のnginxでクライアントのIPを取得する方法を追記<br/>
(14/07/24 13:55) SSLの導入手順を追記<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WindowsでVagrant&ChefでPHP 5.3/CakePHP2.4.5 開発環境を構築]]></title>
    <link href="http://morizyun.github.io/blog/windows-vagrant-centos-php53-cakephp-phpmyadmin/"/>
    <updated>2014-05-01T21:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/windows-vagrant-centos-php53-cakephp-phpmyadmin</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00BSPH158/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00BSPH158&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00BSPH158&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00BSPH158" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />WindowsでのPHP開発を教えるようになってきましたが、環境構築でXAMPPの特殊な手順をどうしても覚えたくなかったのでVagrantをWindows対応させました。CentOS 64bit版が動かないパターンに遭遇したので、32bit版のboxを使っています。</p>

<p><strong>(05-01 21:15) Ruby InstallerのRubyコマンドプロンプトの説明を追記</strong><br/></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>VirtualBox</h2>

<p><strong><a href="https://www.virtualbox.org/">VirtualBox 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<h2>Ruby Installer</h2>

<p><strong><a href="http://rubyinstaller.org/downloads/">Ruby Installer</a></strong><br/>
Rubyの安定版＆最新版をダウンロード。(3/30時点ではRuby 2.0.0-p451)</p>

<p>インストールが完了したら、Windowsのスタートメニュー内に「<strong>Ruby x.x.xフォルダ内にRubyコマンドプロンプトを開く</strong>」というショートカットが増えていると思います。ここをクリックすると、RubyにPATHが通った状態でコマンドプロンプトを実行することができます。</p>

<h2>Development Kit</h2>

<p><strong><a href="http://rubyinstaller.org/downloads/">Ruby Installer</a></strong><br/>
同じくRuby Installerのしたの方にあるDevelopment Kitをダウンロード &amp; インストール。</p>

<h2>Git for Windows</h2>

<p><strong><a href="http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git">Git for Windows</a></strong><br/>
Gitの最新版をダウンロード。(3/30時点ではGit-1.9.0-preview20140217)</p>

<p>登録時のセレクトメニューは次のようにしてください。</p>

<p><img src="https://farm4.staticflickr.com/3672/13500916373_960d54d35b.jpg" width="500" height="388" alt="スクリーンショット_2014-03-30_7_12_10"></p>

<p><img src="https://farm6.staticflickr.com/5251/13501176094_eb0182fcc7.jpg" width="500" height="385" alt="スクリーンショット_2014-03-30_7_12_23"></p>

<p><img src="https://farm8.staticflickr.com/7153/13501187314_32174ede4a.jpg" width="500" height="388" alt="Windows7_vagrant1__Running_"></p>

<h2>gow</h2>

<p><strong><a href="https://github.com/bmatzelle/gow/downloads">bmatzelle/gow - GitHub</a></strong><br/>
Linuxコマンドが無いと生きていけないのでダウンロードしてインストール。</p>

<h2>Vagrant</h2>

<p><strong><a href="http://www.vagrantup.com/">Vagrant 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<p>vagrantをインストールしたら、boxでchefを使えるようにするためのプラグインをインストールします。コマンドプロンプトを開いて以下のコマンドを入力。</p>

<p>{% codeblock lang:bash %}
vagrant plugin install vagrant-omnibus
{% endcodeblock %}</p>

<h2>仮想マシンの作成</h2>

<p>自分の好きな場所(例は<code>~/Dropbox/vagrant</code>)に仮想マシン用のフォルダを作成。</p>

<p>{% codeblock lang:bash %}
mkdir vagrant
cd vagrant
git clone https://github.com/morizyun/vagrant-centos-cakephp cakephp
cd cakephp
gem install bundler
bundle install
vagrant up
{% endcodeblock %}</p>

<p>Network系でエラーが出る場合は、一度Windows側を再起動をしてみてください。</p>

<h2>hostsの書き換え</h2>

<p>1) C:\Windows\System32\drivers\etc\hostsを管理者権限のメモ帳で開く<br/>
2) 次の内容を追記<br/></p>

<p>{% codeblock lang:bash %}
192.168.33.10 cakephp.dev
{% endcodeblock %}</p>

<h2>ブラウザでのアクセス</h2>

<p><code>http://cakephp.dev/</code>にブラウザをアクセスすると<code>app/</code>フォルダの中のファイルにアクセスできます。</p>

<p><img src="https://farm4.staticflickr.com/3781/13500764255_4268e31af2.jpg" width="500" height="400" alt="スクリーンショット 2014-03-30 11.18.48"></p>

<p>あとは、<code>vagrant/cakephp/app</code>の中がcakephpのアプリをいじれば、適宜反映されます。</p>

<h2>phpMyAdminへのアクセス</h2>

<p><code>http://cakephp.dev/phpMyAdmin</code>にブラウザをアクセスするとユーザー名とパスワードを聞かれます。ユーザー名は<code>root</code>、パスワードは<code>cakepass</code>と入力すると「<strong><a href="http://ja.wikipedia.org/wiki/PhpMyAdmin">phpMyAdmin</a></strong>」にアクセスできます。</p>

<p><img src="https://farm4.staticflickr.com/3682/13500888443_e6eda4a884.jpg" width="500" height="379" alt="スクリーンショット 2014-03-30 11.20.58"></p>

<h2>Vagrantの基本コマンド</h2>

<p>{% codeblock lang:bash %}
vagrant up : vagrantの起動(Vagrantfileがあるフォルダで実行)
vagrant halt : vagrantを終了(Vagrantfileがあるフォルダで実行)
vagrant provision : vagrantに設定を反映(Vagrantfileがあるフォルダで実行)
vagrant ssh : vagrantにログイン
{% endcodeblock %}</p>

<h2>GitHubのリポジトリ</h2>

<p>このvagrantの詳細はGitHubのリポジトリ『<strong><a href="https://github.com/morizyun/vagrant-centos-cakephp">morizyun/vagrant-centos-cakephp</a></strong>』にあります！</p>

<p>{% include custom/google_ads_square.html %}</p>

<h2>お願い</h2>

<p>もし、動かない場合があったらぜひコメント下さい。</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://seo-engineer.info/archives/hosts.html">各OS（Windows,Mac）別hosts設定方法 - Web覚</a></strong></p>

<p><strong><a href="http://www.symmetric.co.jp/blog/archives/533">今すぐVagrantを始めよう | 株式会社シンメトリック公式ブログ |</a></strong></p>

<p><strong><a href="http://acball.hatenablog.com/entry/2013/11/05/205712">【仮想OS】virtualboxで64bitOSが選択できない場合 - エーシーの日記</a></strong><br/>
「This kernel requires an x86-64 CPU ,but only detected an i686 CPU.Unable to boot - please use a kernel appropriate for your CPU.」にはかなりハマった。。。</p>

<h2>変更来歴</h2>

<p>(05-01 21:15) Ruby InstallerのRubyコマンドプロンプトの説明を追記</p>
]]></content>
  </entry>
  
</feed>
