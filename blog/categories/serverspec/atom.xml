<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverspec | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/serverspec/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:56:30+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[test-kitchenでインフラのTDDに挑戦[Rails/Nginx/MySQL/rbenv]]]></title>
    <link href="http://morizyun.github.io/blog/test-kitchen-vagrant-rails-rbenv-chef-serverspec/"/>
    <updated>2014-05-02T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/test-kitchen-vagrant-rails-rbenv-chef-serverspec</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774162868/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774162868&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774162868&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774162868" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />これまでVagrantやChefをつかってインフラのコード化を勉強してきましたが、今回は更に一歩進めてserverspecを使ったインフラのテストと、『<strong><a href="http://kitchen.ci/">test-kitchen</a></strong>』を使ったTDDにチャレンしてみました！</p>

<p>慣れてくるとtest-kitchenの<code>コマンドで設定をやり直し => インフラのテスト</code>がソースコードを書くような感覚で、インフラを構築できるのがすごく心地よかったです。</p>

<p>ようやくですが、localのvagrantと『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』、『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』に対応しました。コマンド一つでChefを適用したり、serverspecでリモートの環境をテストすることができます！</p>

<p><strong>(05-02 08:35) Rubyサーバ・デプロイまでのチェックリストを追加</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>今回のソースコード</h2>

<p>Vagrant/Degital Oclean/AWS EC2上にNginx/MySQL/rbenv/Ruby 2.1.0/Ubuntu 12.04のおなじみのサーバ構成の構築/テストを行うtest-kitchenのソースコードをGitHubに公開しました。また、Vagrant x CentOS 6.5 /Nginx/MySQL/rbenv/Ruby 2.1.0も作成しました。</p>

<p><strong><a href="https://github.com/morizyun/test-kitchen-rails">morizyun/test-kitchen-rails</a></strong></p>

<p>手っ取り早くVagrantでRailsサーバを立ち上げたり、serverspecでテストしてみたい方は是非使ってみてください！Pull Requestも大歓迎です＾＾</p>

<h2>環境準備</h2>

<h3>Vagrant</h3>

<p><strong><a href="http://www.vagrantup.com/">Vagrant 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<p>vagrantをインストールしたら、boxでchefを使えるようにするためのプラグインをインストール。</p>

<p>{% codeblock lang:bash %}
vagrant plugin install vagrant-omnibus
{% endcodeblock %}</p>

<h3>VirtualBox</h3>

<p><strong><a href="https://www.virtualbox.org/">VirtualBox 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<h2>簡単なtest-kitchen環境の作り方</h2>

<h3>Cookbookの作成</h3>

<p>{% codeblock lang:bash %}
berks cookbook test-kitchen &amp;&amp; cd test-kitchen
{% endcodeblock %}</p>

<h3>Gemfileのセットアップ</h3>

<p>次に<code>vim Gemfile</code>でセットアップ。</p>

<p>{% codeblock lang:bash %}
source 'https://rubygems.org'</p>

<p>gem 'berkshelf'
gem 'foodcritic'
gem 'rubocop'
gem 'busser'
gem 'serverspec'
gem 'dotenv'</p>

<h1>test-kitchen</h1>

<p>gem 'test-kitchen'
gem 'kitchen-vagrant'
gem 'kitchen-digitalocean'
gem 'kitchen-ec2'
{% endcodeblock %}</p>

<p>完了したらbundlerでgemを導入。</p>

<p>{% codeblock lang:bash %}
bundle install --binstubs=bin
{% endcodeblock %}</p>

<p><code>vim bin/kitchen</code>でdotenvを読み込むように設定を追記。</p>

<p>{% codeblock lang:bash %}
require 'dotenv'
Dotenv.load
{% endcodeblock %}</p>

<p>この設定は本来は良くないと思います。<code>bundle install</code>のたびに設定を描き直さないといけないので、もっといい方法があれば是非教えて下さい！</p>

<h3>busserプラグインの設定</h3>

<p>次にプラグインの設定。</p>

<p>{% codeblock lang:bash %}
busser plugin install serverspec
{% endcodeblock %}</p>

<h3>Berksfileのセットアップ</h3>

<p><code>vim Berksfile</code>でBerkshelfの設定。<br/>
(まだ試行錯誤中なので、最新はGitHubをご参照ください)</p>

<p>{% codeblock lang:bash %}
site :opscode</p>

<p>metadata</p>

<p>cookbook "apt",
  git: "https://github.com/opscode-cookbooks/apt.git"
cookbook "build-essential",
  git: "https://github.com/opscode-cookbooks/build-essential.git"
cookbook "git",
  git: "https://github.com/opscode-cookbooks/git.git"
cookbook "nginx",
  git: "https://github.com/opscode-cookbooks/nginx.git"
cookbook "vim",
  git: "https://github.com/opscode-cookbooks/vim.git"
cookbook "mysql",
  git: "https://github.com/myplanetdigital-experimental/chef-mysql.git"
cookbook 'rbenv',
  git: "https://github.com/fnichol/chef-rbenv.git"
cookbook 'database',
  git: "https://github.com/opscode-cookbooks/database.git"</p>

<p>cookbook 'base', path: 'site-cookbooks/base'
{% endcodeblock %}</p>

<p>設定画完了したら、Berkshelfの設定を反映。</p>

<p>{% codeblock lang:bash %}
bundle exec berks vendor cookbooks
{% endcodeblock %}</p>

<p>{% include custom/google_ads_square.html %}</p>

<h3>.kitchen.ymlの設定</h3>

<p><code>vim .kitchen.yml</code>でtest-kitchen用の設定。</p>

<h2>{% codeblock lang:bash %}</h2>

<p>provisioner:
  name: chef_solo</p>

<p>driver_config:
  require_chef_omnibus: true</p>

<p>platforms:
  - name: va-ubuntu-12.04</p>

<pre><code>driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.33.33"}]
  synced_folders:
    - ["vagrant", "/usr/share/nginx", "create: true, type: :nfs"]
provider: virtualbox
driver_config:
  box: opscode-ubuntu-12.04
  box_url: https://opscode-vm.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04_provisionerless.box
  customize:
    memory: 1024
    cpuexecutioncap: 100
</code></pre>

<ul>
<li> name: va-centos-6.5
driver:
  name: vagrant
  network:

<pre><code>- ["private_network", {ip: "192.168.33.32"}]
</code></pre>

  synced_folders:

<pre><code>- ["vagrant", "/usr/share/nginx", "create: true, type: :nfs"]
</code></pre>

<p>driver_config:
  box: opscode-centos-6.5
  box_url: http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-6.5_chef-provisionerless.box</p></li>
</ul>


<p>suites:
  - name: rails</p>

<pre><code>run_list:
  - recipe[base::prepare]
  - recipe[build-essential]
  - recipe[git]
  - recipe[vim]
  - recipe[nginx]
  - recipe[mysql::server]
  - recipe[mysql::client]
  - recipe[ruby_build]
  - recipe[rbenv::system]
  - recipe[base]
  - recipe[base::rails]
attributes:
  git:
    version: 1.9.1
  nginx:
    application_name: 'sample'
  mysql:
    server_debian_password: "passw0rd"
    server_root_password: "passw0rd"
    server_repl_password: "passw0rd"
  rbenv:
    rubies: ['2.1.0']
    global: '2.1.0'
    gems:
      '2.1.0':
        - name: 'bundler'
          options: '--no-ri --no-rdoc'
        - name: 'gem'
          options: '--no-ri --no-rdoc'
        - name: 'rails'
          options: '--no-ri --no-rdoc'
        - name: 'rake'
          options: '--no-ri --no-rdoc'
        - name: 'therubyracer'
          options: '--no-ri --no-rdoc'
</code></pre>

<p>{% endcodeblock %}</p>

<h2>Vagrant/Ubuntu編</h2>

<p>まずはvagrantでローカルにubuntuを立ち上げます。</p>

<h3>セットアップ</h3>

<p>vagrantのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-va-ubuntu-1204
{% endcodeblock %}</p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-va-ubuntu-1204</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-va-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>Vagrant/CentOS編</h2>

<p>まずはvagrantでローカルにCentOSを立ち上げます。</p>

<h3>セットアップ</h3>

<p>vagrantのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-va-centos-65
{% endcodeblock %}</p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-va-centos-65</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-va-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>Degital Ocean編</h2>

<p>次は『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』に鯖を立ち上げます。</p>

<h3>事前準備</h3>

<p>以下、『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』での作業。</p>

<pre>
1) Degital Oceanでユーザー登録
2) ユーザー画面内の左メニュー「Billing」からPayPalで$5を支払い
3) ユーザー画面内の左メニュー「API」で"Client ID"と"API Key"を作成
4) ユーザー画面内の左メニュー「SSH Keys」でSSHキーを登録
</pre>


<p>事前準備で取得した"Client ID"と"API Key"を元にSSH Key IDを取得。</p>

<p>{% codeblock lang:bash %}
wget -q -O- https://api.digitalocean.com/ssh_keys/?client_id=[Client ID]&amp;api_key=[API Key]
{% endcodeblock %}</p>

<h3>登録した情報を.envに登録</h3>

<p>取得した情報を<code>vim .env</code>で登録。DIGITALOCEAN_SSH_KEY_PATHにはDegital Oceanに登録したSSHキーの秘密鍵へのパスを設定。</p>

<p>{% codeblock lang:bash %}
DIGITALOCEAN_CLIENT_ID="1234"
DIGITALOCEAN_API_KEY="5678"
SSH_KEY_IDS="1234, 5678"
DIGITALOCEAN_SSH_KEY_PATH="~/.ssh/id_rsa"
{% endcodeblock %}</p>

<h3>.kitchen.ymlを設定</h3>

<p>{% codeblock lang:bash %}
platforms:
  - name: do-ubuntu-12.04</p>

<pre><code>driver:
  name: digitalocean
  ssh_key: &lt;%= ENV['DIGITALOCEAN_SSH_KEY_PATH'] %&gt;
driver_config:
  image_id: 3101045
  region: San Francisco 1
  flavor: 512MB
  private_networking: false
</code></pre>

<p>{% endcodeblock %}</p>

<h3>セットアップ</h3>

<p>Degital Oceanのインスタンスのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-do-ubuntu-1204
{% endcodeblock %}</p>

<p>Degital Oceanのユーザー画面内の左メニュー「Droplets」で立ち上がっているインスタンスを確認することができます。</p>

<p><img src="https://farm4.staticflickr.com/3774/13790615893_c5e211f897.jpg" width="500" height="282" alt="スクリーンショット_2014-04-12_12_38_11"></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-do-ubuntu-1204</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-do-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>AWS EC2編</h2>

<p>次は『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』に鯖を立ち上げます。</p>

<h3>事前準備</h3>

<p>以下、『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』での作業。</p>

<pre>
1) AWS EC2でユーザー登録
2) EC2 => 自分が作成するリージョン(Tokyo)でセキュリティグループを作成
3) EC2 => Key Pairで鍵を作成(もしくはImportして登録)
4) 右上のメニュー「Security Credential」=> Access Keyを作成
</pre>


<h3>登録した情報を.envに登録</h3>

<p>取得した情報を<code>vim .env</code>で登録。DIGITALOCEAN_SSH_KEY_PATHにはDegital Oceanに登録したSSHキーの秘密鍵へのパスを設定。</p>

<p>{% codeblock lang:bash %}
AWS_ACCESS_KEY_ID="xxxx"
AWS_FLAVOR_ID="m1.small"
AWS_IMAGE_ID="ami-f397eef2"
AWS_SECRET_ACCESS_KEY="xxxx"
AWS_SECURITY_GROUP_ID="sg-xxxxx"
AWS_SSH_KEY="~/.ssh/aws.pem"
AWS_SSH_KEY_ID="xxxx"
{% endcodeblock %}</p>

<h3>.kitchen.ymlを設定</h3>

<p>{% codeblock lang:bash %}
platforms:
  - name: ec2-ubuntu-12.04</p>

<pre><code>driver:
  name: ec2
  region:  ap-northeast-1
  availability_zone: ap-northeast-1c
  flavor_id: &lt;%= ENV['AWS_FLAVOR_ID'] %&gt;
  image_id: &lt;%= ENV['AWS_IMAGE_ID'] %&gt;
  aws_ssh_key_id: &lt;%= ENV['AWS_SSH_KEY_ID'] %&gt;
  aws_access_key_id: &lt;%= ENV['AWS_ACCESS_KEY_ID'] %&gt;
  ssh_key: &lt;%= ENV['AWS_SSH_KEY'] %&gt;
  aws_secret_access_key: &lt;%= ENV['AWS_SECRET_ACCESS_KEY'] %&gt;
  username: ubuntu
  security_group_ids: ["&lt;%= ENV['AWS_SECURITY_GROUP_ID'] %&gt;"]
  port: 22
  ebs_optimized: false
</code></pre>

<p>{% endcodeblock %}</p>

<h3>セットアップ</h3>

<p>EC2のインスタンスのセットアップを行います。</p>

<p>{% codeblock lang:bash %}
kitchen setup rails-ec2-ubuntu-1204
{% endcodeblock %}</p>

<p>AWSマネージメントコンソール => EC2画面で立ち上がっているインスタンスを確認することができます。</p>

<p><img src="https://farm4.staticflickr.com/3724/13792234173_ac92f453a8.jpg" width="500" height="117" alt="スクリーンショット_2014-04-12_15_01_08"></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p>{% codeblock lang:bash %}
kitchen verify rails-ec2-ubuntu-1204</p>

<h1>次のように出れば成功</h1>

<h1>Finished in seconds</h1>

<h1>15 examples, 0 failures</h1>

<h1>Finished verifying <rails-do-ubuntu-1204></h1>

<h1>-----> Kitchen is finished</h1>

<p>{% endcodeblock %}</p>

<h2>サーバのセットアップ完了 => Railsアプリデプロイまでの手順</h2>

<pre>
(1) test-kitchenの実行 => テスト実行

(2) Elastic Block Storeを設定

(3) 鯖側にdeploy用のキーを作成 => 公開鍵をGitHubに登録

(4) MySQLのユーザー作成
GRANT ALL PRIVILEGES ON DB_NAME.* TO USER_NAME@localhost IDENTIFIED BY ‘PASSWORD';
FLUSH PRIVILEGES;

(5) ローカルでcapistranoを使ったデプロイ
cap production deploy:starting
cap production deploy:check
cap production deploy # dbがないのでコケる

(6) 鯖のreleaseフォルダで、bundle exec rake RAILS_ENV=production db:create

(7)cap production deploy
</pre>


<p>初回デプロイ時にDBが無いときに先にDBを作成する方法は、もっといい方法があるはずなのでご存じの方がいれば、コメントを頂ければ幸いです！</p>

<p><strong><a href="http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/">Capistrano 3系でRails4.1のデプロイ</a></strong><br/>
Capistrano 3の設定はこちらがおすすめ。</p>

<h2>次のステップ</h2>

<p>残念ながら今回は挫折しましたが、Dokkuをまる２日位ためしてみました。まだまだ実用レベルとは言いづらいですが、可能性をすごく感じるプロダクトです！今回は調査していた中で見つけたサイトをメモがてら書いておきます。</p>

<h2>ChefでDocker&amp;Dokkuをインストール</h2>

<p><strong><a href="https://github.com/fgrehm/chef-dokku">fgrehm/chef-dokku - GitHub</a></strong></p>

<p><strong><a href="https://github.com/bflad/chef-docker">bflad/chef-docker - GitHub</a></strong></p>

<p><strong><a href="https://github.com/progrium/dokku">progrium/dokku - GitHub</a></strong></p>

<p><strong><a href="https://github.com/rlister/chef-dokku-simple">rlister/chef-dokku-simple - GitHub</a></strong></p>

<p><strong><a href="https://github.com/hughfletcher/dokku-mysql-plugin">hughfletcher/dokku-mysql-plugin - GitHub</a></strong></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://engineer.wantedly.com/2014/03/27/setup-elasticsearch-cluster-on-ec2-with-chef.html">Chef で Elasticsearch クラスタを EC2 上に作る</a></strong><br/>
こちらのブログでtest-kitchenの使い方を知ることが出来ました。多謝です！</p>

<p><strong><a href="http://blog.glidenote.com/blog/2014/02/26/vagrant-dotenv/">dotenvを利用して環境ごとでVagrantfileの設定値を変更してみる</a></strong><br/></p>

<p><strong><a href="https://github.com/test-kitchen/kitchen-digitalocean">test-kitchen/kitchen-digitalocean</a></strong><br/></p>

<h2>変更来歴</h2>

<p>(04/12 12:45) Degital OceanとAWS EC2を適用<br/>
(04/14 23:35) Docker &amp; Dokkuに関するメモ書きを追記<br/>
(04/23 22:50) CentOS 6.5 x Vagrantを追加、バグフィックス<br/>
(04/25 23:00) ちょこちょこミスがあった点を修正<br/>
(05-02 08:35) Rubyサーバ・デプロイまでのチェックリストを追加<br/></p>
]]></content>
  </entry>
  
</feed>
