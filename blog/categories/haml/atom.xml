<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haml | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/haml/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:06:35+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 3.2.13/Bootstrap/Haml プロジェクト新規作成 最短ガイドだよ！]]></title>
    <link href="http://morizyun.github.io/blog/rails-mysql-bootstrap/"/>
    <updated>2012-11-26T08:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-mysql-bootstrap</id>
    <content type="html"><![CDATA[<p>{% include custom/google_ads_text.html %}
Rails 3.2.13 + Bootstrap + Hamlのプロジェクト作成のフローを作成しました。</p>

<p><a href="http://morizyun.github.io/blog/rails-mysql-bootstrap" title="fpu_tmp_1353848330.5039_237fab by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8346/8219161728_66b992a1bd.jpg" width="500" alt="fpu_tmp_1353848330.5039_237fab"></a></p>

<!-- more -->


<h2>Rails プロジェクト作成 〜 index.html確認まで</h2>

<p>Railsの新規プロジェクトを作成。</p>

<p>{% codeblock lang:bash %}
rails new test-app -d mysql --skip-test-unit --skip-bundle
{% endcodeblock %}</p>

<p>RVMを使っている場合は、プロジェクト直下で.rvmrcを作成する。<br/></p>

<p>{% codeblock lang:bash %}
cd test-app/
echo ruby-1.9.3-p327 > .ruby-version
{% endcodeblock %}</p>

<p>Rails用の<code>.gitignore</code>を作成します。<code>.gitignore</code>を生成するgitignore-boilerplatesを使う場合はこちら。(Macでのインストール方法は、<code>brew install gibo</code>を実行)</p>

<p>{% codeblock lang:bash %}</p>

<h1>Mac/RubyMineを使う場合の例です、gibo --listで確認して下さい</h1>

<p>gibo OSX Ruby Rails RubyMine IntelliJ > .gitignore
{% endcodeblock %}</p>

<p>GitHubから<code>.gitignore</code>のテンプレートをダウンロードする場合はこちら。</p>

<p>{% codeblock lang:bash %}
wget https://raw.github.com/github/gitignore/master/Rails.gitignore;mv Rails.gitignore .gitignore
{% endcodeblock %}</p>

<p>Gitリポジトリ作成を作成します。</p>

<p>{% codeblock lang:bash %}
git init
git add -A
git commit -m "new project"
{% endcodeblock %}</p>

<p><code>Gemfile</code>を編集して、<code>bundle install</code>でGemをインストール。<br/>
(gemは適宜カスタマイズしてください)</p>

<p>{% codeblock lang:bash %}
source 'https://rubygems.org'</p>

<p>gem 'rails'
gem 'rake' # 本番rake実行時に必要だった</p>

<h1>Bootstrap</h1>

<p>gem 'less-rails'
gem 'twitter-bootstrap-rails'</p>

<h1>Compress/Sassy-Buttons/Zurui-design</h1>

<p>gem 'sass-rails'
gem 'compass-colors'
gem 'compass-rails'
gem 'sassy-buttons'
gem 'zurui-sass-rails'</p>

<h1>Font Awesome</h1>

<p>gem 'font-awesome-rails'</p>

<h1>Form Builders</h1>

<p>gem 'simple_form'
gem 'country_select'</p>

<h1>Haml</h1>

<p>gem 'haml-rails'</p>

<h1>jQuery/json</h1>

<p>gem 'jquery-rails'
gem 'jquery-cookie-rails' # jquery-cookie
gem 'json'</p>

<h1>MySQL</h1>

<p>gem 'mysql2'</p>

<h1>Presenter</h1>

<p>gem 'active_decorator'</p>

<h1>定数管理</h1>

<p>gem 'rails_config'</p>

<h1>スクレイピング</h1>

<p>gem 'nokogiri'</p>

<h1>Seed管理</h1>

<p>gem 'seed-fu'</p>

<h1>asset取得系のログを出力しない</h1>

<p>gem 'quiet_assets'</p>

<p>group :assets do
  gem 'coffee-rails'
  gem 'therubyracer', "~> 0.10.2"
  gem 'uglifier'
  gem 'libv8', '~> 3.3.10'
end</p>

<p>group :development do
  # ドキュメント生成
  gem 'yard'</p>

<p>  # erbからhamlに変換
  gem 'erb2haml'</p>

<p>  # エラー画面をわかりやすく整形してくれる
  gem 'better_errors'</p>

<p>  # better_errorsの画面上にirb/pry(PERL)を表示する
  gem 'binding_of_caller'</p>

<p>  # フッターにデバック情報を表示
  gem 'rails-footnotes', '>= 3.7.9'</p>

<p>  # N+1問題の警告を出力
  gem "bullet"
end</p>

<p>group :development, :test do
  # Pow (Mac用のサーバです。Mac以外 or Pow以外のサーバ利用の方は不要)
  gem 'pow'
  gem 'rails3-generators'
end</p>

<p>gem 'powder'
{% endcodeblock %}</p>

<p><code>config/application.rb</code>の中にある<code>YourAppName::Application.configure</code>内に以下を追加。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>Set timezone</h1>

<p>config.time_zone = 'Tokyo'
config.active_record.default_timezone = :local</p>

<h1>日本語化</h1>

<p>config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '<em>*', '</em>.{rb,yml}').to_s]
config.i18n.default_locale = :ja</p>

<h1>generatorの設定</h1>

<p>config.generators do |g|
  g.orm :active_record
  g.template_engine :haml
  # scaffoldをgenerateするとDraperが自動で生成されます。
  # モデルがないとエラーが発生する可能性があるので注意してください
end</p>

<h1>load original validator(オリジナルのバリデーターがある場合のみ)</h1>

<p>config.autoload_paths += %W(#{config.root}/lib/validators)</p>

<h1>libファイルの自動読み込み</h1>

<p>config.autoload_paths += %W(#{config.root}/lib)
config.autoload_paths += Dir["#{config.root}/lib/**/"]
{% endcodeblock %}</p>

<p>N+1問題の対策Gem Bulletの設定。<br/>
<code>config/environments/development.rb</code>の<code>AppName::Application.configure</code>内に以下を追記。</p>

<p>{% codeblock lang:bash %}
config.after_initialize do
  Bullet.enable = true # Bulletプラグインを有効
  Bullet.alert = true # JavaScriptでの通知
  Bullet.bullet_logger = true # log/bullet.logへの出力
  Bullet.console = true # ブラウザのコンソールログに記録
  Bullet.rails_logger = true # Railsログに出力
  Bullet.disable_browser_cache = true #ブラウザキャッシュの無効化
end
{% endcodeblock %}</p>

<p>DBの作成。</p>

<p>{% codeblock lang:bash %}
rake db:create RAILES_ENV=development
{% endcodeblock %}</p>

<p>Twitter Bootstrapのインストール。<code>application.html.haml</code>が作成されるので、<code>application.html.erb</code>を削除。</p>

<p>{% codeblock lang:bash %}
rails g bootstrap:layout application fluid
rails g bootstrap:install
rm -rf app/views/layouts/application.html.erb
{% endcodeblock %}</p>

<p>font-awesomeの設定を追加する。
<code>app/assets/stylesheets/application.css</code>に以下のコードを追加。</p>

<p>{% codeblock lang:ruby %}
 *= require font-awesome
{% endcodeblock %}</p>

<p>Compassのインストール。</p>

<p>{% codeblock lang:bash %}
bundle exec compass init --syntax sass
{% endcodeblock %}</p>

<p>Sassy-buttonsのインストール。<code>No such framework: "sassy-buttons"</code>と言われる場合はスキップ。</p>

<p>{% codeblock lang:bash %}
bundle exec compass install sassy-buttons
{% endcodeblock %}</p>

<p>続いてSASS(CSS)を書くための<code>base.css.sass</code>ファイルを作成。</p>

<p>{% codeblock lang:bash %}
rails g sass:assets base
{% endcodeblock %}</p>

<p><code>base.css.sass</code>に以下を追加して、zurui-design, compass, sassy-buttonsを使えるようにする。</p>

<p>{% codeblock lang:bash %}
@import compass/utilities
@import compass/css3
@import sassy-buttons
@import zurui-sass
{% endcodeblock %}</p>

<p>Railsの日本語化ファイルを設定する。</p>

<p>{% codeblock lang:bash %}
wget https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/ja.yml -P config/locales/
{% endcodeblock %}</p>

<p>rails_configの設定、設定用ファイルの生成。（利用方法は<a href="https://github.com/railsjedi/rails_config">railsjedi/rails_config | GitHub</a>）</p>

<p>{% codeblock lang:bash %}
rails g rails_config:install
{% endcodeblock %}</p>

<p>simple formの初期設定(bootstrap対応)</p>

<p>{% codeblock lang:bash %}
rails g simple_form:install --bootstrap
{% endcodeblock %}</p>

<p>Apacheの場合は設定を行なって、ブラウザで表示を確認する。</p>

<h2>Powを使っている場合</h2>

<p>Powを使っている場合はPowへのリンクの作成。</p>

<p>{% codeblock lang:bash %}
powder link
{% endcodeblock %}</p>

<p>RVM環境でPowを使っている場合はプロジェクトの直下に<code>.powrc</code>を作成して以下を追加。</p>

<p>{% codeblock lang:bash %}
if [ -f "$rvm_path/scripts/rvm" ] &amp;&amp; [ -f ".rvmrc" ]; then
  source "$rvm_path/scripts/rvm"
  source ".rvmrc"
fi
{% endcodeblock %}</p>

<p>表示を確認する。<code>powder open</code>を実行して、ブラウザで<code>http://test-app.dev/</code>を確認。</p>

<h2>scaffold表示まで</h2>

<p>scaffoldを追加の前に<code>public/index.html</code>を削除。</p>

<p>{% codeblock lang:bash %}
rm -rf public/index.html
{% endcodeblock %}</p>

<p>scaffoldの作成してビューを追加。</p>

<p>{% codeblock lang:ruby %}
rails g scaffold product name price:integer
{% endcodeblock %}</p>

<p><code>config/routes.rb</code>にて、ルートアクセス設定を追加。</p>

<p>{% codeblock lang:ruby %}
root :to => "products#index"
{% endcodeblock %}</p>

<p>DBのマイグレーション。</p>

<p>{% codeblock  lang:ruby %}
rake db:migrate
{% endcodeblock %}</p>

<p>ブラウザでscaffordしたビューが見れることをブラウザで確認。</p>

<h2>補足: open-uriでSSLをつかえるようにする</h2>

<p>SSLエラー回避のために<code>config/initializers/bypass_ssl_verification_for_open_uri.rb</code>を作成して以下を追加。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>SSLエラー回避</h1>

<p>require 'openssl'
OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE
{% endcodeblock %}</p>

<p>注意点として、この設定を行うと<code>bypass_ssl_verification_for_open_uri.rb:3: warning: already initialized constant VERIFY_PEER</code>という警告メッセージがでるようになりますが、気にしなくて良さそうです。</p>

<h2>補足: ブラウザCSSのリセット</h2>

<p>ブラウザにはデフォルトのCSSがセットされており、ブラウザによってデザインが変化する可能性があります。そこで、ブラウザのCSSをリセットしてくれるCSSが<a href="http://yuilibrary.com/yui/docs/cssreset/">YUI(Yahoo! User Interface Library)から提供</a>されています。<br/>
配布がUSのサーバだと思う(レスポンスが遅くなる)ので、プロジェクト側にcssファイルをダウンロード。</p>

<p>{% codeblock lang:bash %}
wget http://yui.yahooapis.com/3.8.0/build/cssreset/cssreset-min.css -P app/assets/stylesheets/
{% endcodeblock %}</p>

<p><code>app/assets/stylesheets/application.css.less</code>に以下のコードを追加。<br/>
(このコードを追加する場合は<code>// = require_tree .</code>を削除して、cssを個別にインポートすること)</p>

<p>{% codeblock lang:css %}
/<em> 1行目に置いて下さい
 </em>=require cssreset-min
{% endcodeblock %}</p>

<h2>関連記事</h2>

<p><strong><a href="/blog/guard-spork-rspec-tdd">RSpec/Spork/Guard/Growl/Rails 3.2.9で作る - プリチーなTDD環境！</a></strong> : モダンなTDD環境を構築して、ハッピーなテストライフをエンジョイしましょぃ！</p>

<p><a href="/blog/capistrano-git-rails-deploy/">Rals3.2.9で始める Git連携Capistranoによる自動デプロイ</a> : サーバへのデプロイのプロセスにCapistranoを導入する手順です。</p>

<p><strong><a href="/blog/meta-tags-sitemap-generator-rails-seo">meta-tagsとsitemap_generatorで始めるRails 3.2のSEO対策</a></strong> : Railsのお手軽SEO対策にレッツトライ。</p>

<p><strong><a href="/blog/kaminari-gem-paginator-rails/">Railsの人気ページネーター Kaminariはbootstrap/hamlでも超簡単に導入可能</a></strong> : ページネーター導入の際は是非。</p>

<p><strong><a href="/blog/pow-guard-rails">開発サーバをThinからPowに切り替えて開発効率アップ！ (Mac限定)</a></strong> にてPowに関する記事を載せました。サーバPowインストールがまだの方はぜひ。</p>

<h2>Special Thanks</h2>

<ul>
<li><p><a href="http://d.hatena.ne.jp/hrsth/20110616/1308229846">rvm のgemsetをおさらい（Mac でRuby） - たぐってつづる</a></p></li>
<li><p><a href="http://naoty.hatenablog.com/entry/2012/05/20/032251">Rails開発環境 2012初夏</a></p></li>
<li><p><a href="http://d.hatena.ne.jp/hnw/20121221">.gitignoreを作ってくれるgiboが便利すぎる - hnwの日記</a></p></li>
<li><p><a href="http://ishikawa.r-stone.net/2011/02/rails-3-opensslsslsslerror.html">守破離でいこう!!: Rails 3 で OpenSSL::SSL::SSLError</a></p></li>
</ul>


<h2>変更来歴</h2>

<p>11/26 12:00 Thinサーバに関する記述を追加<br/>
11/26 14:00 Guardに関する記述を追加/Gemを見直し<br/>
11/28 16:40 Dev/Test環境のサーバをPowに変更<br/>
11/29 09:40 Foremanを削除、TDD関連の構築手順を別記事に<br/>
12/03 10:00 Gemfileにyardを追加<br/>
12/03 22:10 RSpec/FactoryGirlに関する情報をTDD記事に移動<br/>
12/05 12:25 定数管理のGem rails_configを追加<br/>
12/06 10:30 Gemfileにrakeを追加(本番でrake実行時必要だったため)<br/>
12/13 12:35 Gemfileにbetter_errorsを追加<br/>
12/19 14:50 記事のレイアウトを修正<br/>
12/21 18:30 Gemfileに「gem 'libv8', '~> 3.11.8'」を追加<br/>
12/23 23:40 RVM/POWを使う場合の設定を追加<br/>
12/24 17:15 .rvmrcにgemsetの記述を追加<br/>
12/25 09:35 gemsetに関する記述を削除<br/>
12/27 09:40 .giboに関する記述を追加、MySQLの記述を削除<br/>
12/27 11:00 リセットCSSに関する記述を追加<br/>
12/27 17:05 Gemfileにrails-footnotes/quiet_assetsを追加<br/>
01/01 20:45 Gemfileにfont-awesome-railsを追加<br/>
01/02 10:25 SSLエラー回避の対策にenvironment.rbに記述<br/>
01/02 12:00 draper => active_decoratorに浮気<br/>
01/09 11:05 public/index.htmlを削除するように修正<br/>
01/09 11:35 Gem therubyracer', libv8'のバージョン変更<br/>
01/22 14:10 Gem Bulletの設定が抜けていたので追加<br/>
01/28 10:55 application.rb内のlocaleファイルの読み込み方法を変更<br/>
01/28 11:15 補足: open-uriでSSLをつかえるようにするを編集して作成<br/>
02/06 19:05 Bulletの設定についての記述を微調整<br/>
02/08 16:25 BootstrapのGemを変更、compress, sassy-buttons, zurui-design-railsを使うプロセスに変更<br/>
05/16 21:25 Rails 3.2.13環境</p>

<h2>テスト環境</h2>

<p>テスト環境は以下の通りです。</p>

<pre>
OS : Mac Mountain Lion(OS X 10.8)
Ruby : 1.9.3-p327
Rails : 3.2.13
haml : 3.1.7
coffee-script : 3.2.1
Rspec : 2.12.0
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuにRails 3.2.9/Bootstrapでデプロイ 最短・簡単ガイドだよ！]]></title>
    <link href="http://morizyun.github.io/blog/heroku-rails-postgresql/"/>
    <updated>2012-11-25T14:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/heroku-rails-postgresql</id>
    <content type="html"><![CDATA[<p>Heroku + Rails 3.2.9 + Bootstrap + Haml + PostgreSQL でデプロイするまでの最短ガイドを作りました！</p>

<p><a href="http://morizyun.github.io/blog/heroku-rails-postgresql" title="fpu_tmp_1353848330.5039_237fab by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8066/8216074991_1f11f3eda7_z.jpg" width="640" height="234" alt="fpu_tmp_1353848330.5039_237fab"></a></p>

<!-- more -->


<h2>Heroku ユーザー登録</h2>

<p><a href="http://heroku.com">Heroku</a>でユーザー登録をします。
アカウント作成時に使ったメールアドレスとパスワードは後で使うのでメモっておいてください。</p>

<p><a href="http://heroku.com/" title="fpu_tmp_1353828845.2153_57ac05 by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8482/8216564804_23e4f2f0e6.jpg" width="500" height="233" alt="fpu_tmp_1353828845.2153_57ac05"></a></p>

<p><a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>をインストールします。Heroku Toolbeltの機能は；</p>

<ul>
<li>Heroku client - Heroku appsを管理するためのCLI</li>
<li>Foreman - ローカルでHerokuアップを動かすためのオプション</li>
<li>Git - HerokuへのPush/ソースのバージョン管理</li>
</ul>


<p><a href="https://toolbelt.heroku.com/" title="fpu_tmp_1353829261.6919_09c68e by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8206/8216575530_03e6a52a70.jpg" width="500" height="291" alt="fpu_tmp_1353829261.6919_09c68e"></a></p>

<h2>ローカル環境設定</h2>

<p>任意でrailsのアップデートを実行します。</p>

<p>{% codeblock コンソール lang:bash %}
rvmsudo gem update rails
{% endcodeblock %}</p>

<p>gem herokuをインストールします。</p>

<p>{% codeblock コンソール lang:bash %}
gem install 'heroku'
{% endcodeblock %}</p>

<p>アカウント作成時に使ったメールアドレスとパスワードを事前に設定します。
これによってデプロイのたびに、パスワードを聞かれるのを防ぎます。</p>

<p>{% codeblock コンソール lang:ruby %}
heroku keys:add
Enter your Heroku credentials.
Email: email@example.com
Password: your-password
Uploading ssh public key /Users/joe/.ssh/id_rsa.pub
{% endcodeblock %}</p>

<h2>Rails プロジェクト作成 〜 index.html表示まで</h2>

<p>Railsの新規プロジェクトを作成します。</p>

<p>{% codeblock コンソール lang:bash %}
rails new test-app --skip-test-unit -d postgresql
{% endcodeblock %}</p>

<p>Gitリポジトリ作成を作成します。</p>

<p>{% codeblock コンソール lang:bash %}
git init
git add -A
git commit -m "create new project"
{% endcodeblock %}</p>

<p>herokuコマンドを使って、heroku上にアプリケーションを作成します。
(test-appだとすでに使われてて動かないので、使われてなさそうな名前がいいっすよ〜)</p>

<p>{% codeblock コンソール lang:bash %}
heroku create test-app --stack cedar</p>

<blockquote><p>Creating test-app... done, stack is cedar
http://test-app.herokuapp.com/ | git@heroku.com:test-app.git
Git remote heroku added # &lt;= こうなっていれば成功
{% endcodeblock %}</p></blockquote>

<p>http://test-app.herokuapp.com/ をブラウザで表示されることを確認。</p>

<h2>Rails Gem登録 〜 scaffold表示まで</h2>

<p>gemfileを編集して、プロジェクトに任意のGemを追加。
(gemは適宜カスタマイズしてください)</p>

<p>{% codeblock gemfile lang:bash %}
source 'https://rubygems.org'
ruby "1.9.3"</p>

<p>gem 'rails'</p>

<h1>Bootstrap</h1>

<p>gem 'less-rails'
gem 'less-rails-bootstrap'</p>

<h1>Form Builders</h1>

<p>gem 'simple_form'
gem 'country_select'</p>

<h1>Haml</h1>

<p>gem 'haml-rails'</p>

<h1>jQuery/json</h1>

<p>gem 'jquery-rails'
gem 'jquery-cookie-rails' # jquery-cookie
gem 'json'</p>

<h1>Presenter</h1>

<p>gem 'draper'</p>

<h1>Thin</h1>

<p>gem 'thin'</p>

<p>group :assets do
  gem 'coffee-rails'
  gem 'therubyracer'
  gem 'uglifier'
end</p>

<p>group :development do
  # 環境変数をロードして複数のプロセスを実行する作業を自動化
  gem 'foreman'</p>

<p>  # viewやcssの変更を監視してブラウザを自動的にリロードする
  gem 'guard-livereload'
  gem 'em-websocket'</p>

<p>  # デバッガー
  gem 'pry-rails'
end</p>

<p>group :development, :test do
  gem 'mysql2'</p>

<p>  # Rspec
  gem 'rspec-rails'</p>

<p>  # FactoryGirl
  gem 'factory_girl_rails'</p>

<p>  # 設定をロードしたサーバーによってテストを高速化
  gem 'spork'</p>

<p>  # ファイルの変更を検知する。OSX用
  gem 'rb-fsevent'</p>

<p>  # テスト結果をGrowlで通知する
  gem 'growl'</p>

<p>  # ファイルの変更を監視してテストを自動化
  gem 'guard-rspec'</p>

<p>  # 設定ファイルの変更を監視してテストサーバーを再起動
  gem 'guard-spork'</p>

<p>  gem 'rails3-generators', :git => 'https://github.com/neocoin/rails3-generators.git'
end</p>

<p>group :postgres do
  gem 'pg'
end
{% endcodeblock %}</p>

<p>Gemをインストール。</p>

<p>{% codeblock コンソール lang:bash %}
bundle install
{% endcodeblock %}</p>

<p>config/application.rbの設定です。<br/>(class Application &lt; Rails::Application内に追記してください)</p>

<p>{% codeblock config/application.rb lang:ruby %}</p>

<h1>LESS</h1>

<p>config.app_generators.stylesheet_engine :less
config.less.paths &lt;&lt; "#{Rails.root}/lib/less/protractor/stylesheets"
config.less.compress = true
config.assets.compress = true
config.assets.initialize_on_precompile=false # herokuでasset:precomileエラー対策</p>

<h1>Set timezone</h1>

<p>config.time_zone = 'Tokyo'
config.active_record.default_timezone = :local</p>

<h1>日本語化</h1>

<p>config.i18n.default_locale = :ja</p>

<h1>generatorの設定</h1>

<p>config.generators do |g|
  g.orm :active_record
  g.template_engine :haml
  g.test_framework  :rspec, :fixture => true
  g.fixture_replacement :factory_girl, :dir => "spec/factories"
end</p>

<h1>load original validator(オリジナルのバリデーターがある場合のみ)</h1>

<p>config.autoload_paths += %W(#{config.root}/lib/validators)
{% endcodeblock %}</p>

<p>Herokuのタイムゾーン設定。</p>

<p>{% codeblock コンソール lang:bash %}
heroku config:add TZ=Asia/Tokyo
{% endcodeblock %}</p>

<p>application.cssを削除して、lessファイルを生成</p>

<p>{% codeblock コンソール lang:css %}
rm -rf app/assets/stylesheets/application.css
rails generate less:assets application
{% endcodeblock %}</p>

<p>bootstrapのcssを読み込むように設定を追加する。
app/assets/stylesheets/application.css.lessに以下んコードを追加。</p>

<p>{% codeblock app/assets/stylesheets/application.css.less lang:ruby %}
// = require_tree .
@import "twitter/bootstrap";
{% endcodeblock %}</p>

<p>bootstrapのjavascriptを読み込むようにするために、app/assets/javascripts/application.jsに以下のコードを追加。</p>

<p>{% codeblock app/assets/javascripts/application.js lang:ruby %}
//= require twitter/bootstrap
//= require jquery.cookie</p>

<p>$(document).ready(function(){</p>

<p>});
{% endcodeblock %}</p>

<p>application.html.erbファイルをhamlにファイル名を変更。</p>

<p>{% codeblock コンソール lang:bash %}
mv app/views/layouts/application.html.erb app/views/layouts/application.html.haml
{% endcodeblock %}</p>

<p>application.html.hamlの中身もhaml形式にする。</p>

<p>{% codeblock application.html.haml lang:haml %}
!!! 5
%html
  %head</p>

<pre><code>%title TEST_APP
= stylesheet_link_tag "application", :media =&gt; "all"
= javascript_include_tag "application"
= csrf_meta_tags
</code></pre>

<p>  %body</p>

<pre><code>= yield
</code></pre>

<p>{% endcodeblock %}</p>

<p>Railsの日本語化ファイルを設定する。</p>

<p>{% codeblock コンソール lang:bash %}
wget https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/ja.yml
mv ja.yml config/locales/ja.yml
{% endcodeblock %}</p>

<p>simple formの初期設定(bootstrap対応)</p>

<p>{% codeblock コンソール lang:bash %}
rails generate simple_form:install --bootstrap
{% endcodeblock %}</p>

<p>railsへのrspecのインストールと雛形を作成</p>

<p>{% codeblock コンソール lang:bash %}
rails generate rspec:install
{% endcodeblock %}</p>

<p>rspecの設定ファイル"spec/spec_helper.rb"を修正(コメントアウトする)</p>

<p>{% codeblock spec/spec_helper.rb lang:ruby %}</p>

<h1>config.fixture_path = "#{::Rails.root}/spec/fixtures"</h1>

<h1>config.use_transactional_fixtures = true</h1>

<p>{% endcodeblock %}</p>

<p>scaffoldを追加の前にpublic/index.htmlをリネーム(無効化する)。</p>

<p>{% codeblock コンソール lang:bash %}
mv public/index.html public/_____index.html
{% endcodeblock %}</p>

<p>scaffoldの作成してビューを追加。</p>

<p>{% codeblock コンソール lang:ruby %}
rails g scaffold product name price:integer
{% endcodeblock %}</p>

<p>config/routes.rbにて、ルートアクセス設定を追加。</p>

<p>{% codeblock config/routes.rb lang:ruby %}
root :to => "products#index"
{% endcodeblock %}</p>

<p>Herokuでthinが動くようにする。
プロジェクト直下にProcfileを新規作成。</p>

<p>{% codeblock Procfile lang:bash %}
web: bundle exec rails server thin -p $PORT -e $RACK_ENV
{% endcodeblock %}</p>

<p>設定画反映されたかチェック。</p>

<p>{% codeblock コンソール lang:bash %}
foreman check</p>

<blockquote><p>valid procfile detected (web) ← 成功
{% endcodeblock %}</p></blockquote>

<p>$RACK_ENVをセットするファイルを作成
{% codeblock コンソール lang:bash %}
echo "RACK_ENV=development" >>.env
{% endcodeblock %}</p>

<p>gitに.envが記録されないようにする。
プロジェクト直下の.gitignoreに以下を追加。</p>

<p>{% codeblock .gitignore lang:bash %}
.env
{% endcodeblock %}</p>

<p>Herokuへのアプリのデプロイ => DBのマイグレーション。</p>

<p>{% codeblock コンソール lang:ruby %}
git add . -A
git commit -m "add scafford"
git push heroku master
heroku run rake db:migrate
{% endcodeblock %}</p>

<p>ブラウザでscaffordしたビューが見れることを確認。
デプロイまでの最短ガイドは以上っす。</p>

<p>Thank very much you for your kind attention.</p>

<h2>関連記事</h2>

<p><strong><a href="/blog/pow-guard-rails">開発サーバをThinからPowに切り替えて開発効率アップ！ (Mac限定)</a></strong> にてPowに関する記事を載せました。Guardが更に活用できると思います。よかったらぜひ見てください。</p>

<h2>補足 : ローカルでのテスト環境の構築</h2>

<p>config/database.ymlを以下の通り編集する。今回は</p>

<ul>
<li>"development", "test" => mysql</li>
<li>"production" => postgreSQL</li>
</ul>


<p>とした場合の設定です。環境に合わせて調整を。</p>

<p>{% codeblock config/database.yml lang:ruby %}
development:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: test-app_development
  pool: 5
  username: root
  password:
  socket: /var/lib/mysql/mysql.sock</p>

<p>test:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: test-app_test
  pool: 5
  username: root
  password:
  socket: /var/lib/mysql/mysql.sock</p>

<p>production:
  adapter: postgresql
  encoding: unicode
  database: test-app_production
  pool: 5
  username:
  password:
{% endcodeblock %}</p>

<p>DBの作成を実行。</p>

<p>{% codeblock コンソール lang:bash %}
rake db:create RAILES_ENV='development'
rake db:create RAILES_ENV='test'
{% endcodeblock %}</p>

<p>サーバプロセスを起動する。</p>

<p>{% codeblock コンソール lang:bash %}
foreman start
{% endcodeblock %}</p>

<p>http://0.0.0.0:5000/_____index.htmlを表示してDBに接続されていることを確認する。</p>

<h2>補足 : コマンド系</h2>

<p>Heroku コマンド一覧</p>

<p>{% codeblock コンソール lang:bash %}</p>

<h1>herokuへのログイン</h1>

<p>heroku login
Email: email@example.com
Password: your-password</p>

<h1>アプリの作成</h1>

<p>heroku create</p>

<h1>マイグレーション</h1>

<p>heroku run rake db:migrate</p>

<h1>アプリのデプロイ</h1>

<p>git add . -A
git commit -m "add function"
git push heroku master</p>

<h1>環境変数のセット</h1>

<p>heroku config:add USERNAME=admin PASSWORD=xxx</p>

<h1>ログ確認</h1>

<p>heroku logs -t</p>

<h1>heroku プロセス情報の表示</h1>

<p>heroku ps</p>

<h1>heroku 環境変数の表示</h1>

<p>heroku config
{% endcodeblock %}</p>

<p>既存モデルのRspec雛形を作成するコマンド。</p>

<p>{% codeblock コンソール lang:bash %}
rails generate rspec:model products
{% endcodeblock %}</p>

<p>テスト環境は以下の通りです。</p>

<pre>
OS : Mac Lion(OS X 10.7)
Rails : 3.2.9
haml : 3.1.7
coffee-script : 3.2.1
</pre>


<h2>Special Thanks</h2>

<ul>
<li><p><a href="http://nobyu.hatenadiary.jp/entry/20100207/1265531331">HerokuとRailsで手早くWebサイトを作る</a></p></li>
<li><p><a href="http://change-the-world.heroku.com/5">Railsアプリ作成 + Herokuデプロイ</a></p></li>
<li><p><a href="http://ovreneli.blogspot.jp/2012/06/railspostgresqlheroku.html">RailsアプリをPostgreSQLで開発してHerokuにデプロイするまでの簡単まとめ</a></p></li>
<li><p><a href="http://edywrite.blogspot.jp/2012/08/herokuwebthin.html">Herokuのwebサーバをthinに変更する</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zClip(zeroClipBoard)をRails/Coffeescriptに組み込む]]></title>
    <link href="http://morizyun.github.io/blog/zclip-zeroclipboard-jquery-rails-coffeescript/"/>
    <updated>2012-11-20T15:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/zclip-zeroclipboard-jquery-rails-coffeescript</id>
    <content type="html"><![CDATA[<p><a href="http://morizyun.github.io/blog/zclip-zeroclipboard-jquery-rails-coffeescript" title="fpu_tmp_1353859887.4897_48b374 by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8341/8216611031_5f095c2056_n.jpg" width="320" height="155" alt="fpu_tmp_1353859887.4897_48b374"></a></p>

<p>「Webサイト内のデータをローカルPCのクリップボード貼付ける」という機能は <a href="http://www.steamdev.com/zclip/">jQuery PluginのjQuery ZeroClipboard</a> とflash(swf)を使うのがメジャーなやり方のようです。</p>

<p>今回は、ZeroClipboardをRails/CoffeeScript/hamlに組み込むサンプルを載せておきます。</p>

<p><a href="http://zclip-heroku.herokuapp.com/" class="button big primary">Demo</a>
<a href="https://github.com/morizyun/zclip-heroku" class="button big primary">Source(GitHub)</a></p>

<!-- more -->


<h2>(1) jQuery ZeroClipboardからファイルをダウンロード</h2>

<p><a href="http://www.steamdev.com/zclip/">jQuery ZeroClipboard</a>からjquery pluginとswfファイルをダウンロード。</p>

<p>{% codeblock コンソール lang:bash %}
cd app/assets/javascripts/
wget http://www.steamdev.com/zclip/js/jquery.zclip.min.js
cd app/app/assets/images/
wget http://zeroclipboard.googlecode.com/svn-history/r10/trunk/ZeroClipboard.swf
{% endcodeblock %}</p>

<h2>(2) jQuery ZeroClipboardのjsファイルの読込設定</h2>

<p>application.jsに以下を追記して、jquery.zclip.min.jsを読み込むようにする。</p>

<p>{% codeblock app/assets/javascripts/application.js lang:ruby %}
//= require jquery
//= require jquery.zclip.min
{% endcodeblock %}</p>

<h2>(3) viewファイルにペーストするデータとボタンを表示</h2>

<p>viewファイルに貼り付けるコードを表示するフォーム(任意)と、貼り付けボタンを追加。</p>

<p>{% codeblock viewファイル lang:haml %}
%textarea#paste_item= @paste_item -#ここに任意のデータを載せる
%button#set_clipboard クリップボードに貼付ける
{% endcodeblock %}</p>

<h2>(4) viewファイルにペーストするデータとボタンを表示</h2>

<p>ボタンを押すとtextareaからクリップボードにコピーされるように、
coffeescriptに以下を追記。</p>

<p>{% codeblock coffeescriptファイル lang:ruby %}
$ ->
  # ボタンを押したら、textareaからクリップボードにデータをコピーする
  $("button#set_clipboard").zclip</p>

<pre><code>path: "/assets/ZeroClipboard.swf"
copy: -&gt;
  $("textarea#paste_item").html()
</code></pre>

<p>{% endcodeblock %}</p>

<h2>参考サイト</h2>

<p><a href="http://blog.h2o-space.com/post/11911481382" target="_blank">Webページ上からクリップボードにコピーできる『zClip』</a></p>

<h2>テスト環境</h2>

<pre>
# Rails : 3.2.9
# haml : 3.1.7
# coffee-script : 3.2.1
</pre>

]]></content>
  </entry>
  
</feed>
