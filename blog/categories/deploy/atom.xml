<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Deploy | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/deploy/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:06:35+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[無料で werckerで RspecのCI & Capistrano Deploy]]></title>
    <link href="http://morizyun.github.io/blog/wercker-ci-rspec-capistrano-deploy-auto/"/>
    <updated>2015-01-25T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/wercker-ci-rspec-capistrano-deploy-auto</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00R48BEEW/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00R48BEEW&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00R48BEEW&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00R48BEEW" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プライベートなプロジェクトでもRspecをデプロイのたびに実行したくて、『<strong><a href="http://wercker.com/">wercker</a></strong>』を使い始めましてた。
個人的には、Bitbucketのプライベートリポジトリを使って、RSpecで継続的インテグレーションしつつ、CapistranoでDeployできる
一連のプロセスが無料でスピーディに実現できるのでプライベートプロジェクトにめっちゃオススメです！</p>

<br style="clear:both;"/>


<!-- more -->


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>競合サービスとの比較</h2>

<p>無料で使いはじめることができるCIツールには、『<a href="https://circleci.com/">Circle CI</a>』や
『<a href="https://magnum-ci.com/">Magnum CI</a>』などがありますが、日本語の情報が多く、Bitbucketのプライベートリポジトリが使える点を
考えて、『<strong><a href="http://wercker.com/">wercker</a></strong>』を選択しました。</p>

<h2>前提: アプリの環境について</h2>

<p>今回は以下のアプリ構成を対象としています。</p>

<pre>
- アプリ構成
  - Ruby 2.2.0
  - Rails 4.2.0
  - RSpec 3.1.0

- デプロイ先のサーバー構成
  - CentOS
  - RVM

- リモートリポジトリ
  - Bitbucket
</pre>


<h2>weckerでユーザーを作成 &amp; アプリ登録</h2>

<p>(1) GitHubかBitBucketにリポジトリを作ってアプリのコードをプッシュ</p>

<p>(2) 『<strong><a href="http://wercker.com/">wercker</a></strong>』でユーザー登録</p>

<p>(3) werckerで、GitHubかBitBucketのアカウントと連携</p>

<p>(4) werckerにアプリケーションのリポジトリを登録</p>

<p>(5) GitHub or BitBucket側で『<strong>werckerbot</strong>』ユーザーをコラボレーターに追加</p>

<p>ユーザー登録のフローに関しては、『<strong><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる</a></strong>』
がわかりやすくてオススメっす！</p>

<h2>wercker.ymlの設定</h2>

<p>werckerでは、RailsプロジェクトのRootパスに<code>wercker.yml</code>を作成すると
そのステップにそって、スクリプトを実行することができます。</p>

<p>ちなみに僕は上記の『<strong>アプリ構成</strong>』でRSpecとCapistranoでデプロイするスクリプトはこんな感じです。</p>

<p>{% codeblock lang:bash %}
box: wercker/rvm
services:
  - wercker/postgresql
build:</p>

<pre><code>steps:
    - rvm-use:
        version: 2.2.0

    # A step that executes `bundle install` command
    - bundle-install:
        jobs: 4

    # A step that prepares the database.yml using the database in services
    - rails-database-yml:
        service: postgresql

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: echo ruby information
        code: |
            echo "ruby version $(ruby --version) running"
            echo "from location $(which ruby)"
            echo -p "gem list: $(gem list)"

    # Add more steps here:
    - script:
            name: rspec
            code: bundle exec rspec --color -f d
</code></pre>

<p>deploy:</p>

<pre><code>steps:
    - rvm-use:
        version: 2.2.0
    - bundle-install:
        jobs: 4
    - script:
        name: make .ssh directory
        code: mkdir -p "$HOME/.ssh"
    - create-file:
        name: write ssh key
        filename: $HOME/.ssh/id_rsa
        overwrite: true
        hide-from-log: true
        content: $WERCKER_SSH_KEY_PRIVATE # 独自鍵設定の場合は、$DEPLOY_KEY
    - script:
        name: set permissions for ssh key
        code: chmod 0400 $HOME/.ssh/id_rsa
    - cap:
        stage: $WERCKER_DEPLOYTARGET_NAME
        tasks: deploy
</code></pre>

<p>{% endcodeblock %}</p>

<h2>環境変数の設定</h2>

<h3>(1) デプロイ用のブランチ名とターゲット名を設定</h3>

<p>wercker => アプリ => Settings => Deploy Target
に Deploy Targetで「production」を作成し、branch名「master」を
設定してください。</p>

<h3>(2) サーバーの認証鍵の設定</h3>

<p>こちらは任意の設定ですが、オススメの鍵情報の設定は、『wercker => アプリ => Settings => SSH Keys』
からwerckerデプロイ専用の鍵を作って設定する方法です。</p>

<p>もし何らかの事情で独自の鍵情報を使いたい場合には、『wercker => アプリ => Settings => PIPLINE』
に独自の環境変数<code>DEPLOY_KEY</code>(例)を作って、秘密鍵を登録しています。</p>

<h2>werckerでRSpecを実行</h2>

<p>あとはいつも通り、gitにソースコードをプッシュすると、自動的にwerckerでCIが実行されます。</p>

<p>CIが成功すると、werckerからDEPLOYボタンが押せるようになるので、それを実行するとcapistranoのタスクを実行してくれます。</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる | mah365</a></p>

<p><a href="http://milk1000cc.hatenablog.com/entry/20131130/1385810747">wercker + Capistrano で自動デプロイ - milk1000cc's blog</a></p>

<p><a href="http://deeeet.com/writing/2014/10/16/wercker/">Werckerの仕組み，独自のboxとstepのつくりかた | SOTA</a></p>

<p><a href="http://masutaka.net/chalow/2014-10-04-1.html">Werckerのデプロイボタンはなんだかんだ言って便利だった / マスタカの ChangeLog メモ</a></p>
]]></content>
  </entry>
  
</feed>
