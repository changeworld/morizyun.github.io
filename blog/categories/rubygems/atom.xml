<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyGems | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rubygems/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:06:35+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyGemはめっちゃ簡単に作れる！]]></title>
    <link href="http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails/"/>
    <updated>2014-12-06T21:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-gem-easy-publish-library-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4274050653/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4274050653&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4274050653&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4274050653" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
RubyライブラリのRubyGemは知らないとハードル高そうに見えますが、実際にはかなり簡単につくれます。
これから積極的にRubyGemを作ってOSSの世界に貢献していきたいので簡単な作り方をまとめました。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>準備</h2>

<p>まずは準備のために<code>gem</code>のアップデートと、<code>bundler</code>のアップデートを行います。</p>

<p>{% codeblock lang:bash %}</p>

<h1>gem自信のアップデート</h1>

<p>gem update --system</p>

<h1>bundler未インストールの場合はインストール</h1>

<p>gem install bundler</p>

<h1>bundlerインストール済の場合はアップデート</h1>

<p>gem update bundler
{% endcodeblock %}</p>

<h2>ひな形の作成</h2>

<p>今回は<code>test_gem</code>という名前のGemを制作していきます。</p>

<p>{% codeblock lang:bash %}</p>

<h1>test_gemのひな形を作成(Rspec付き)</h1>

<p>bundle gem test_gem -t
{% endcodeblock %}</p>

<p>ちなみに、Rails PluginのGemを作成する場合には<code>gem install rails</code>をした上で以下のコマンドを実行します。</p>

<p>{% codeblock lang:bash %}</p>

<h1>test unitをスキップしたpluginの作成</h1>

<p>rails plugin new test_gem2 -T --skip-test-unit --mountable
{% endcodeblock %}</p>

<p>今回は<code>bundle gem test_gem</code>の方を説明していきます。Rails Pluginの詳細は以下のサイトに解説があります！</p>

<p><strong><a href="http://d.hatena.ne.jp/camelmasa/20121225/1356425587">rails pluginコマンドで簡単に出来るgemの作成方法</a></strong></p>

<h2>作成されたファイルの概要</h2>

<p>今回作成されたファイルの簡単な説明。</p>

<pre>
bundle gem test_gem -t
  create  test_gem/Gemfile
  create  test_gem/Rakefile
  create  test_gem/LICENSE.txt
  create  test_gem/README.md => このgemの説明や使い方を記述
  create  test_gem/.gitignore
  create  test_gem/test_gem.gemspec => このgemの説明や依存関係などを記述
  create  test_gem/lib/test_gem.rb => プログラムを記述
  create  test_gem/lib/test_gem/version.rb => このgemのバージョン情報を記述
  create  test_gem/.rspec
  create  test_gem/spec/spec_helper.rb
  create  test_gem/spec/test_gem_spec.rb
  create  test_gem/.travis.yml => travisを使う際の設定を記述
</pre>


<h2>test_gem.gemspecの修正</h2>

<p>test_gem.gemspecの中身は以下の様にになっています。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>coding: utf-8</h1>

<p>lib = File.expand_path('../lib', <strong>FILE</strong>)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'test_gem/version'</p>

<p>Gem::Specification.new do |spec|
  spec.name          = 'test_gem'
  spec.version       = TestGem::VERSION
  spec.authors       = ['morizyun']
  spec.email         = ['merii.ken@gmail.com']
  spec.summary       = %q{TODO: Write a gem summary}
  spec.description   = %q{TODO: Write a gem description}
  spec.homepage      = 'http://morizyun.github.io'
  spec.license       = 'MIT'</p>

<p>  spec.files         = <code>git ls-files -z</code>.split("\x0")
  spec.executables   = spec.files.grep(%r{<sup>bin/})</sup> { |f| File.basename(f) }
  spec.test_files    = spec.files.grep(%r{<sup>(test|spec|features)/})</sup>
  spec.require_paths = ['lib']</p>

<p>  spec.add_development_dependency 'bundler', '~> 1.7'
  spec.add_development_dependency 'rake', '~> 10.0'
  spec.add_development_dependency 'rspec'
end
{% endcodeblock %}</p>

<p>最低限修正が必要な部分を抜き出すと以下のようになります。</p>

<pre>
# このgemの説明を書く
spec.summary       = %q{TODO: Write a gem summary}
spec.description   = %q{TODO: Write a gem description}

# このgemのHomepageを書く
spec.homepage      = 'http://morizyun.github.io'

# 依存するgemが存在する場合のみ、以下のように指定
spec.add_dependency 'xxxx', '~>x.x'

# 開発時だけに必要な依存gemが存在する場合のみ、以下のように指定
spec.add_development_dependency 'yyyy', '~>y.y'
</pre>


<h2>Gemの実装</h2>

<p>今回はテスト的に<code>Hello World!</code>と出力するようにします。<code>lib/test_gem.rb</code>を開いて以下のように変更します。</p>

<p>{% codeblock lang:ruby %}
require 'test_gem/version'</p>

<p>module TestGem
  def self.greet</p>

<pre><code>'Hello World!'
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>実行してみよう</h2>

<p>では先ほど作成したgemを実行してみます</p>

<p>{% codeblock lang:ruby %}</p>

<h1>gem のインストール</h1>

<p>bundle install</p>

<h1>rubyの対話型インタプリタを起動</h1>

<p>bundle exec irb                                                                              [2.1.4]
irb(main):001:0> require 'test_gem'
=> true</p>

<p>irb(main):002:0> TestGem.greet
Hello World!
{% endcodeblock %}</p>

<p>ということで無事実行できました！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>RSpecを書こう</h2>

<p>先ほどの<code>TestGem.greet</code>のテストをRSepcで書いていきます。<code>spec/test_gem_spec.rb</code>を以下のように変更します。</p>

<p>{% codeblock lang:ruby %}
require 'spec_helper'</p>

<p>describe TestGem do
  it 'has a version number' do</p>

<pre><code>expect(TestGem::VERSION).not_to be nil
</code></pre>

<p>  end</p>

<p>  describe '#greet' do</p>

<pre><code>it 'returns "Hello World!"' do
  expect(TestGem.greet).to eq('Hello World!')
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>実行コマンドを追加</h2>

<p>コンソール上で<code>run_test_gem</code>というコマンドを使うとgemの内容を実行したい場合は
例えば<code>bin/run_test_gem</code>を作成して、以下のように書きます。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'test_gem'</p>

<p>puts TestGem.greet
{% endcodeblock %}</p>

<h2>Gem をパッケージ化します。</h2>

<p>次にGemをパッケージ化します。コマンドとしては、<code>gem build xxx.gemspec</code>です。</p>

<p>{% codeblock lang:bash %}
gem build test_gem.gemspec
=> Successfully built RubyGem
=> Name: test_gem
=> Version: 0.0.1
=> File: test_gem-0.0.1.gem</p>

<p>gem install test_gem
=> Successfully installed test_gem-0.0.1
=> 1 gem installed</p>

<p>run_test_gem
=> "Hello World!"
{% endcodeblock %}</p>

<h2>Gem を公開する</h2>

<p>『<strong><a href="https://github.com/">GitHub</a></strong>』などのpublicなリポジトリを作成。</p>

<p>{% codeblock lang:bash %}</p>

<h1>まずはgit commit</h1>

<p>git add . -A &amp;&amp; git commit -m 'first commit'</p>

<h1>gitのリモートリポジトリを設定</h1>

<p>git remote add origin git@github.com:morizyun/test_gem.git</p>

<h1>そして release</h1>

<p>rake release
{% endcodeblock %}</p>

<p>今回はすでに登録されているgemと名前がかぶっているので登録はできませんが、被らない名前にすればこれで公開できます。</p>

<h2>今回のサンプルソース</h2>

<p>今回のサンプルソースは以下のリポジトリにあります。良ければForkして試してみてください！</p>

<p><strong><a href="https://github.com/morizyun/test_gem">morizyun/test_gem - GitHub</a></strong></p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://masarakki.github.io/blog/2014/02/15/how-to-create-gem/">Gemの作り方まとめ 普通のgem編 - masarakki's blog</a></strong></p>

<p><strong><a href="http://qiita.com/sawanoboly/items/ede7715c605e5822ad22">君がOpsでもRubyで書いたライブラリはGemで配ろう</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/zariganitosh/20141016/minimum_making_of_gem">必要最小のgemの作り方とインストール - ザリガニが見ていた...。</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CI、Coveralls、Code Climate、RubyGems、Gemnasiumと連携させよう！]]></title>
    <link href="http://morizyun.github.io/blog/travis-ci-code-climate-rubygem-org-coverall-gemnusium-inch-ci/"/>
    <updated>2014-12-06T14:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/travis-ci-code-climate-rubygem-org-coverall-gemnusium-inch-ci</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798139823/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798139823&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798139823&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798139823" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> RubyGemsなどのライブラリをOSSで公開した時の醍醐味として、Travis CIやCode Climateなどのコードの品質担保の仕組みを無料で使うことができるということがあります。ということで先日公開した
『<strong><a href="https://github.com/morizyun/events_jp">events_jp</a></strong>』として公開したを今回、以下のツールに連携させてみました！</p>

<pre>
  (1) travisCI
  (2) Coveralls
  (3) Code Climate
  (4) RubyGems.org
  (5) Gemnasium
</pre>




<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>(1) Travis CI</h2>

<p>『<strong><a href="https://travis-ci.org/">Travis CI</a></strong>』はGitHubにPushすると、
RubyのバージョンやDBのバージョンなど複数の環境でテストを自動で実行してくれる超有名なCIサービスです。
対応している言語は次の通りです。有名どころはほとんど対応してそう。</p>

<pre>
C、C++、Clojure、Erlang、Go、Groovy、Haskell、Java、
JavaScript(Node.js)、Objective-C、Perl、PHP、Python、Ruby、Scala
</pre>


<p>まずは、『<strong><a href="https://travis-ci.org/">Travis CI</a></strong>』でGitHubアカウントでユーザー登録します。
そして、ユーザー登録が完了したら、『<strong><a href="https://travis-ci.org/profile">Profile - Travis CI</a></strong>』で
<code>sync now</code>して、連携許可のスイッチをONにします。</p>

<p><img src="https://farm8.staticflickr.com/7581/15246024893_87baa17295_z.jpg" width="640" height="327" alt="スクリーンショット_2014-11-24_14_21_36"></p>

<p>ユーザー登録したら、連携対象のプロジェクトフォルダ直下でローカルで以下のコマンドを実行。</p>

<p>{% codeblock lang:bash %}</p>

<h1>gem のインストール</h1>

<p>gem install travis</p>

<h1>.travis.ymlの作成</h1>

<p>travis init
{% endcodeblock %}</p>

<p><code>.travis.yml</code>が作成されたら、こんな感じで編集。</p>

<p>{% codeblock lang:bash %}
language: ruby
rvm:
  - 2.0.0
  - 2.1.0
  - 2.1.4
bundler_args: --jobs=2
script: bundle exec rspec
branches:
  only:</p>

<pre><code>- master
</code></pre>

<p>{% endcodeblock %}</p>

<p>詳しい設定や編集方法はこちらがわかりやすいです。</p>

<p><strong><a href="http://sue445.hatenablog.com/entry/2014/08/11/123000">githubでgemを公開する時に使いたいバッジ - くりにっき</a></strong></p>

<p><strong><a href="http://docs.travis-ci.com/user/languages/ruby/">Travis CI: Building a Ruby Project</a></strong></p>

<p>設定画完了したら、<code>.travis.yml</code>が正しいかをGem
『<strong><a href="https://github.com/travis-ci/travis-lint">travis-ci/travis-lint</a></strong>』
でチェックします。</p>

<p>{% codeblock lang:bash %}
gem install travis-lint
travis lint
Shell completion not installed. Would you like to like to install it now? |y| y
Hooray, .travis.yml looks valid :)
{% endcodeblock %}</p>

<p>設定画完了したら、<code>.travis.yml</code>などをGitHubにPushするとTravis CIがテストを開始してくれます。</p>

<p>{% codeblock lang:bash %}
git add .travis.yml
git commit -m "Add .travis.yml"
git push origin master</p>

<h1>ブラウザでtravisの結果を表示</h1>

<p>travis open
{% endcodeblock %}</p>

<p><code>travis open</code>を実行するとブラウザが開いて、travisの実行プロセス/結果を確認できます。</p>

<p><img src="https://farm8.staticflickr.com/7529/15865743065_d65c8738f5_z.jpg" width="640" height="529" alt="スクリーンショット_2014-11-24_14_36_09"></p>

<p>あとはその結果をバッチとしてGitHubのREADMEに貼り付けることができます。バッチのタグはTravisから取得できます！</p>

<p><img src="https://farm9.staticflickr.com/8669/15863816351_451f100ae9_z.jpg" width="640" height="525" alt="スクリーンショット_2014-11-24_14_47_35"></p>

<h2>(2) Coveralls</h2>

<p>『<strong><a href="https://coveralls.io/r/morizyun/events_jp">Coveralls</a></strong>』は、テストのカバレッジ率を通知してくれるサービスです。
開発をしていく過程でテストがおざなりにならないように管理できるようになります。対応している言語は次の通りです。</p>

<pre>Ruby/Rails、Python、PHP、Node.js、C/C++、Scala</pre>


<p>まずは『<strong><a href="https://coveralls.io/r/morizyun/events_jp">Coveralls</a></strong>』にログインして<code>ADD REPO</code>
して、連携対象のリポジトリを設定します。</p>

<p><img src="https://farm8.staticflickr.com/7567/15246444813_cd703f197a_z.jpg" width="640" height="500" alt="スクリーンショット_2014-11-24_15_45_20"></p>

<p>設定したら、<code>Gemfile</code>に以下を追加して<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:ruby %}
group :test do
  gem 'coveralls', require: false
end
{% endcodeblock %}</p>

<p>あと<code>spec/spec_helper.rb</code>か、<code>test/test_helper.rb</code>に以下の設定を追記。</p>

<p>{% codeblock lang:ruby %}
if ENV['CI']
  require 'coveralls'
  Coveralls.wear!</p>

<p>  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[Coveralls::SimpleCov::Formatter]
  SimpleCov.start 'test_frameworks'
end
{% endcodeblock %}</p>

<p>あとはGitHubにPushして、Travis CIが実行されるとCoverallと連携してくれます。</p>

<p>{% codeblock lang:bash %}
git add -A
git commit -m 'Add Coveralls settings'
git push origin master
open https://coveralls.io/r/morizyun/events_jp
{% endcodeblock %}</p>

<p><img src="https://farm8.staticflickr.com/7467/15680153249_49b38b7b47_z.jpg" width="640" height="428" alt="スクリーンショット_2014-11-24_15_59_36"></p>

<p>『<strong><a href="https://coveralls.io/r/morizyun/events_jp">Coveralls</a></strong>』でも同じくバッチを設定することができます。
Coveralls内の対応するリポジトリのページの右上の『<strong>BADGE URLS</strong>』をクリックしてタグをREADMEに追記します。</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>(3) Code Climate</h2>

<p>『<strong><a href="https://codeclimate.com">Code Climate</a></strong>』はコードの重複や複雑すぎる部分などを静的解析してくれて、
結果を表示してくれるGemです。コードの品質を向上させるためのアドバイスをくれるサービスです！対応している言語は次の3つ。</p>

<pre>Ruby, JavaScript, and PHP (beta)</pre>


<p>『<strong><a href="https://codeclimate.com">Code Climate</a></strong>』にGitHub アカウントでログインして、Publicなレポジトリなら、
自分のレポジトリを登録すると自動で静的解析をしてくれるので特に設定は必要ありません。
ソースコードの中から問題がある部分をA-Dで判定してくれたり、4点満点でソースコードの品質を判定してくれたりします。</p>

<p><img src="https://farm9.staticflickr.com/8670/15244005864_0b70283a68_z.jpg" width="640" height="486" alt="スクリーンショット 2014-11-24 16.26.35"></p>

<p>バッチのタグも右側のバッチをクリックすると取得できるのでREADMEに追加しましょう！</p>

<p><img src="https://farm9.staticflickr.com/8648/15865637742_29af11c023_z.jpg" width="640" height="443" alt="スクリーンショット_2014-11-24_16_23_44"></p>

<p>もし、Codeのカバレッジも含めて連携させたい場合はまず<code>Gemfile</code>に以下のように追加します。</p>

<p>{% codeblock lang:ruby %}
group :test do
  gem 'codeclimate-test-reporter', require: false
end
{% endcodeblock %}</p>

<p>次に<code>spec/spec_helper.rb</code>か、<code>test/test_helper.rb</code>に以下の設定を追記。</p>

<p>{% codeblock lang:ruby %}
if ENV['CI']
  require 'codeclimate-test-reporter'
  SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[CodeClimate::TestReporter::Formatter]
  SimpleCov.start 'test_frameworks'
  CodeClimate::TestReporter.start
end
{% endcodeblock %}</p>

<p>Codeclimateの対象レポジトリのページの右側にCodeCoverageの設定があるのでクリックすると、
<code>CODECLIMATE_REPO_TOKEN</code>があるのでその設定を<code>.travis.ymlのscript</code>の設定を修正。<br/>
(xxxxにTOKENを入れてください。この設定は本当は良くない気がします。もっといい方法知ってる人がいたら教えて下さい)</p>

<p>{% codeblock lang:bash %}
script: CODECLIMATE_REPO_TOKEN=xxxx bundle exec rspec
{% endcodeblock %}</p>

<p>これでカバレッジも含めて一括でチェックできるようになります！</p>

<p><img src="https://farm9.staticflickr.com/8598/15680584277_dfa64b39d9_z.jpg" width="640" height="462" alt="スクリーンショット_2014-11-24_16_42_33"></p>

<h2>(4) RubyGems.org</h2>

<p>こちらもRuby限定ですが、RubyGems.orgの自分が公開しているgemのページからもバージョン情報が書かれたバッチを取得する事ができます。
まずは右下のメニューの『Badge』をクリックして、タグを取得してREADMEに追記します。</p>

<p><img src="https://farm8.staticflickr.com/7503/15863859381_2f8ced3aaf_z.jpg" width="640" height="446" alt="スクリーンショット_2014-11-24_14_56_43"></p>

<p><img src="https://farm8.staticflickr.com/7495/15680093187_9f96c14f15_z.jpg" width="640" height="514" alt="スクリーンショット_2014-11-24_14_58_55"></p>

<p>地味にPlugin Authorとしてテンションが上がります＾＾</p>

<h2>(5) Gemnasium</h2>

<p>『<strong><a href="https://gemnasium.com">Gemnasium</a></strong>』は使っているGemが最新かどうかをチェックしてくれるRuby限定のサービスです。</p>

<p>使い方は『<strong><a href="https://gemnasium.com">Gemnasium</a></strong>』にGitHubアカウントでログインして、対象のレポジトリを選択して同期します。</p>

<p><img src="https://farm8.staticflickr.com/7471/15865763612_e313fc4591_z.jpg" width="640" height="507" alt="スクリーンショット_2014-11-24_16_52_13"></p>

<p>あとはリポジトリと同期するとGemのバージョンを判定して結果を出してくれます。</p>

<p><img src="https://farm8.staticflickr.com/7525/15864414981_50c4b76a67_z.jpg" width="640" height="489" alt="スクリーンショット 2014-11-24 16.54.38"></p>

<p>ちなみにバッチは右側の設定(歯車アイコン)をクリックして、タブのBadgeを選択すると取得できます。</p>

<p><img src="https://farm9.staticflickr.com/8596/15865786282_798836d37a_z.jpg" width="640" height="456" alt="スクリーンショット 2014-11-24 16.58.03"></p>

<h2>その他面白そうなサービス</h2>

<h3><a href="https://scrutinizer-ci.com/">Scrutinizer</a></h3>

<p><a href="https://scrutinizer-ci.com/"><img src="https://farm9.staticflickr.com/8568/15679017378_3004feecf9_z.jpg" width="640" height="468" alt="スクリーンショット 2014-11-24 17.22.54"></a></p>

<p>CIでテストを実行してくれるだけではなく、コード解析や自動でソースコードレビューをしてくれるそうです。しかもpublicリポジトリは無料！</p>

<h3><a href="https://codeship.com/">CodeShip</a></h3>

<p><a href="https://codeship.com/"><img src="https://farm8.staticflickr.com/7467/15873715331_762d9399c4_z.jpg" width="640" height="499" alt="スクリーンショット 2014-11-25 21.49.47"></a></p>

<p>CIやDeployをやってくれるサービス。特徴はこんな感じです！</p>

<pre>
(1) OSSなら完全無料で使える
(2) privateリポジトリでも5リポジトリ、100回/月のbuildまで無料で実行
(3) SlackやHipChat、メール、Campfireなどに通知を出せる
(4) SSHでログインでき、ブラックボックスにはならない
</pre>


<h3><a href="http://vaddy.net/">VADDY</a></h3>

<p><a href="http://vaddy.net/"><img src="https://farm8.staticflickr.com/7517/15883161945_b05b3b064f_z.jpg" width="640" height="440" alt="スクリーンショット 2014-11-26 20.45.59"></a></p>

<p>このサービスは、CIツールと連携してWebサイトの脆弱性診断をしてくれるサービスです。日本発のサービスで、現在はスキャン回数無制限で無料で
使えるようです。まずは試してみると面白そう。</p>

<h3><a href="http://inch-ci.org/">Inch CI - Documentation badges</a></h3>

<p><a href="http://inch-ci.org/"><img src="https://farm8.staticflickr.com/7463/15840738266_346bd57c03_z.jpg" width="640" height="609" alt="スクリーンショット 2014-11-24 17.26.17"></a></p>

<p>Rubyのプロジェクト限定ですが、ソースにどれだけコメントが書かれているかを計測してくれるサービス。ある程度人気が出て
コメントをしっかり管理するようになったら使いたいですね。</p>

<h3><a href="https://semaphoreapp.com/">Semaphore</a></h3>

<p><a href="https://semaphoreapp.com/"><img src="https://farm8.staticflickr.com/7580/15865950502_e33d0338a9_z.jpg" width="640" height="399" alt="スクリーンショット 2014-11-24 17.32.13"></a></p>

<p>プロジェクトをタイムライン風に表示してくれたり、CI、デプロイ、通知周りをサポートしてくれるサービス。
アクティビティなどをバッチにして表示してくれるそうです(未確認)</p>

<h3><a href="https://bitdeli.com/">Analytics for GitHub - Bitdeli</a></h3>

<p><a href="https://bitdeli.com/"><img src="https://farm9.staticflickr.com/8626/15840748396_fd79811be8_z.jpg" width="640" height="406" alt="スクリーンショット 2014-11-24 17.27.29"></a></p>

<p>GitHubのリポジトリのアクセス解析をしてくれるサービスだそう。バッチを追加するだけなので、簡単に導入できます！</p>

<h2>コマンドラインからTravisにログイン</h2>

<p>コマンドラインからTravisにログインしたい場合は、以下のコマンドを実行します。(GitHubのIDとPWを利用)</p>

<p>{% codeblock lang:bash %}
travis login --pro
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://sue445.hatenablog.com/entry/2014/08/11/123000">githubでgemを公開する時に使いたいバッジ - くりにっき</a></strong></p>

<p><strong><a href="http://blog.ruedap.com/2013/09/02/travis-ci-coveralls-code-climate-github-badge">Travis CIとCoverallsとCode Climateを使ってGitHubリポジトリにバッジを付ける - アインシュタインの電話番号</a></strong></p>

<p><strong><a href="https://github.com/codeclimate/ruby-test-reporter">codeclimate/ruby-test-reporter - GitHub</a></strong></p>

<p><strong><a href="http://ja.ngs.io/2013/12/09/middleman-travis-ci/">Middleman Blog を Travis-CI で GitHub Pages に継続デプロイ - ja.ngs.io</a></strong></p>

<p><strong><a href="http://changesworlds.com/2014/09/introduction-to-coveralls-and-github/">CoverallsのCoveralls BadgeをGitHubに表示する方法</a></strong></p>

<p><strong><a href="http://azu.github.io/slide/inc/github_service/#slide1">Githubでコードを公開する時に便利なサービス</a></strong></p>

<h2>変更来歴</h2>

<p>(11-25 22:05) CodeShipを追加<br/>
(11-26 21:20) VADDYを追加<br/>
(12-06 14:55) 記述の微調整<br/></p>
]]></content>
  </entry>
  
</feed>
