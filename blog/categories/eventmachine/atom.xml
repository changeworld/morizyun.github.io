<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Eventmachine | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/eventmachine/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:03:25+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails4 × Heroku × Eventmachine(worker)を爆速でスタートする]]></title>
    <link href="http://morizyun.github.io/blog/rails4-with-eventmachine/"/>
    <updated>2014-01-04T09:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails4-with-eventmachine</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774158062/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774158062&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774158062&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774158062" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Herokuのworkerプロセスは、crashした場合に自動的に再起動してくれるそうなので、eventmachineを使ったスクリプトを動かすのには最適です。例えば、Twitterを監視したり、イベント・ドリブン、定期的に実施したい処理の場合におすすめです。</p>

<p>また、今回eventmachineのスクリプト単体ではなく、Railsに組み込みました。理由は僕がRailsのフレームワークに慣れきって、Rspecのテスト書いたり、便利なgemを使いやすいからです。多分、生産性の高さと、Railsのオーバヘッドとの兼ね合いだと思います。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>前置き：プロジェクトを新規作成する場合</h2>

<p>『<strong><a href="/blog/rails4-application-templates-heroku">Rails4 x heroku用のApplication Templateを作ってみた！</a></strong>』のコマンドでプロジェクトを作成するとeventmachineを使うかの質問が出るので、<code>yes</code>と打っていただければ、自動的に以下のコードが入ります。</p>

<p>今回はeventmachineの利用で一番多そうな、『<strong><a href="https://dev.twitter.com/docs/streaming-apis">Twitter Stream API</a></strong>』を例にしたソースコードの導入です。実際の利用では適宜変更してみてください！</p>

<h2>Gemの導入・設定</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>EventMachine/Twitter Stream API</h1>

<p>gem 'eventmachine'
gem 'tweetstream'
{% endcodeblock %}</p>

<h2>eventmachineのコード</h2>

<p>メインの<strong><code>eventmachine</code></strong>のソースコードは、<code>lib/eventmachine/twitter_stream.rb</code>に置くことにします。</p>

<p>ちなみに1つのeventmachine内では、id基準でチェックするか、keyword基準でチェックするかのどちらか一方しかできないっぽいです。</p>

<p>{% codeblock lang:ruby %}
require_relative '../../config/environment'</p>

<h1>Twitter username => id変換: http://tweeterid.com/</h1>

<p>@follower_id_list = ['xxxx']
@track_words = ['xxxx']</p>

<p>TweetStream.configure do |config|
  config.consumer_key = ENV['TWITTER_CONSUMER_KEY']
  config.consumer_secret = ENV['TWITTER_CONSUMER_SECRET']
  config.oauth_token = ENV['TWITTER_OAUTH_TOKEN']
  config.oauth_token_secret = ENV['TWITTER_OAUTH_TOKEN_SECRET']
  config.auth_method = :oauth
end</p>

<p>EM.run do
  def write_to_mongodb(status)</p>

<pre><code>EM.defer do
  $stdout.print "status: #{status}\n"
  $stdout.flush

  # statusの処理
  ## ゴニョゴニョ       
end
</code></pre>

<p>  end</p>

<p>  # Twitterのuser idをStream APIで常時チェック
  TweetStream::Client.new.on_error do |message|</p>

<pre><code>$stdout.print "message: #{message}\n"
$stdout.flush
Airbrake.notify(e, parameters: {message: message})
</code></pre>

<p>  end.follow(@follower_id_list) do |status|</p>

<pre><code>write_to_mongodb(status)
</code></pre>

<p>  end</p>

<p>  # Twitterでkeywordが出るのをStream APIで常時チェック
  TweetStream::Client.new.on_error do |message|</p>

<pre><code>$stdout.print "message: #{message}\n"
$stdout.flush
Airbrake.notify(e, parameters: {message: message})
</code></pre>

<p>  end.track(@track_words) do |status|</p>

<pre><code>write_to_mongodb(status)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h2>Procfileの設定</h2>

<p><code>Procfile</code>の設定はこちら。</p>

<p>{% codeblock lang:bash %}
worker: bundle exec ruby lib/eventmachine/twitter_stream.rb
{% endcodeblock %}</p>

<h2>Twitterのキー情報の取得と環境変数への登録</h2>

<p>まずは以下のサイトでTwitterアプリを登録してください。<br/>
(Sign in => アプリの登録)</p>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong></p>

<p>登録したら環境変数にTwitterキーを登録します。まずはローカルへのキー情報の登録です。</p>

<p>Gem「<strong><a href="https://github.com/laserlemon/figaro">Figaro</a></strong>」を使っている場合は、<code>config/application.yml</code>に以下のコードを入力。</p>

<p>{% codeblock lang:bash %}
TWITTER_CONSUMER_KEY: xxxx
TWITTER_CONSUMER_SECRET: xxxx
TWITTER_OAUTH_TOKEN: xxxx
TWITTER_OAUTH_TOKEN_SECRET: xxxx
{% endcodeblock %}</p>

<h2>Herokuへのデプロイ</h2>

<p>では、Herokuにソースコードをデプロイ。<br/>
(このまえにソースはローカルでgitにコミットしておいてください)</p>

<p>{% codeblock lang:bash %}
heroku create test-app --stack cedar
git push heroku master
{% endcodeblock %}</p>

<p>FigaroでTwitterのキー情報をherokuの環境変数に登録。</p>

<p>{% codeblock lang:bash %}
rake figaro:heroku['test-app']
{% endcodeblock %}</p>

<p>workerプロセスを起動！</p>

<p>{% codeblock lang:bash %}
heroku scale web=0
heroku scale worker=1
{% endcodeblock %}</p>

<p>ちなみにプロセスはweb or workerが1つなら無料ですが、2つ以上のプロセスが起動していると有料になるので注意して使ってください。</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>
]]></content>
  </entry>
  
</feed>
