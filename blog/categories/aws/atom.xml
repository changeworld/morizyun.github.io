<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:06:35+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWSの IAM & STS の基礎知識]]></title>
    <link href="http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service/"/>
    <updated>2015-12-20T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/aws-iam-basic-amazon-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774176737/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774176737&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774176737&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774176737" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />ちょっとマニアックですが、AWSのIAMやSTSについてどういうものかを調べたので、完全俺得メモです。
理解が間違ってそうなところがあればぜひ twitterとかで突っ込んでくださいw</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>IAM とは？</h2>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/introduction.html">IAM とは - AWS Identity and Access Management</a></strong></p>

<p>IAMとは「<strong>AWS Identity and Access Management</strong>」の略で、AWSのアカウントが持つ権限を一部他人に付与できる仕組み。</p>

<h2>IAM の機能</h2>

<p>機能としては次のようなものがある。</p>

<pre>
- AWS アカウントへのアクセスの共有できる
  - 他の人に「自分のAWS」のリソース管理や利用のための権限を付与
- アクセス権限を詳細に設定できる
  - どのリソースをどこまで利用できるかといったことを細く設定できる
- 多要素認証（MFA）
  - パスワード/アクセスキー以外にも、特別に設定されたデバイスからのコードの入力も必要にすることができる
- ID フェデレーション
  - 他の認証に基づいたユーザーに対して、自分のAWSアカウントに対して一時的なアクセス権を付与できる
- 保証のための ID 情報
  - IAM IDに基づいたログを AWS CloudTrail で残すことができる
- 多くの AWS サービスと連携
  - 数多くの AWS サービスがIAMと連携している
</pre>


<h2>IAM へのアクセス</h2>

<p>次のいずれかの方法でIAMを使うことができます。</p>

<pre>
- AWS マネジメントコンソール
- AWS コマンドラインツール
  - AWS Command Line Interface (AWS CLI)
    - AWS サービスを管理するための統合ツール
    - **[aws/aws-cli - GitHub](https://github.com/aws/aws-cli)**
  - AWS Tools for Windows PowerShell
    - Windows PowerShell スクリプト環境でAWSサービスを管理できる
- AWS SDK
  - Java、Python、Ruby、.NET、iOS、Android などのライブラリとサンプルコードで構成された ソフトウェア開発キット(SDK)
- IAM HTTPS API
  - サービスに HTTPS リクエストを直接発行できる IAM HTTPS API
</pre>


<h2>IAMの ユースケース</h2>

<ul>
<li>AWS マネジメントコンソールを使用し、AWS アカウントの下でユーザーを作成して、そのアクセス許可

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/getting-started.html">使用を開始する - AWS Identity and Access Management</a></strong></li>
</ul>
</li>
<li>使用している認証システと AWS の間での ID フェデレーション。ユーザーに対して、アクセストークンを発行

<ul>
<li><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html</a></strong></li>
<li>AWS Security Token Service(STS) API の詳細 => <strong><a href="http://docs.aws.amazon.com/STS/latest/APIReference/">Welcome - AWS Security Token Service</a></strong></li>
</ul>
</li>
<li>IAM を使用して、他の AWS アカウントにアクセス許可を付与する方法</li>
</ul>


<h2>Security Token Service(STS)</h2>

<p>STSとは、AWS Security Token Serviceの略。AWSリソースへのアクセスを制御できる一時的な セキュリティ認証情報を持つ、信頼されたユーザーを作成・提供するための仕組みです。</p>

<p><strong><a href="http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html">一時的セキュリティ認証情報 - AWS Identity and Access Management</a></strong></p>

<p>IAMユーザーが使用できる長期的なアクセス情報と似ているが違いは次の点。</p>

<pre>
- 使用期限が短い (数分〜数時間で設定できる)
- 一時的セキュリティ認証情報はユーザーとともに保存されることはなく、ユーザーのリクエストに応じて動的に生成される
</pre>


<p>このSTSを使うメリットは次の通り。</p>

<pre>
- 一時的に使うアプリに対して、長期のセキュリティ情報を配布しなくていい
- AWS の ID を定義せずに AWS リソースへのアクセスを提供できる
</pre>


<h2>フェデレーションとは</h2>

<p>フェデレーションは「組織間の結合という意味」。フェデレーションとは、イントラネットを超えて
他社のシステムやアプリケーション、サービスとの間でシングルサインオン(SSO)やWebサービスの
処理結果をほかのサービスに受け渡す技術、もしくはそれを実現する考えのことである。</p>

<p><strong><a href="http://www.itmedia.co.jp/enterprise/articles/0708/31/news010_3.html">ID管理をスッキリさせるIAMのお役立ち度：“フェデレーション”が企業間連携の今後を変える</a></strong></p>

<h2>認証フェデレーション</h2>

<p>ウェブ ID フェデレーションとは、Facebook、Googleアカウントを利用して、ユーザーにサインインしてもらうことができる。
その認証情報をSTSによってAWSアカウントのリソースを使うための一時的なアクセス権に変換できる。</p>

<p>ウェブ ID フェデレーションを使用すると、アプリケーションで IAM ユーザーアクセスキーのような長期的なセキュリティ認証情報を配布する必要がないので、AWS アカウントの安全性の維持に役立ちます。</p>

<h2>あとがき</h2>

<p>ちなみに、興味をもったキッカケの記事。これは確かにすごい便利そう。</p>

<p><strong><a href="http://qiita.com/seratch@github/items/53b53f143d64f16486bb">Rails - AWS 管理コンソールを社内認証と SSO 化させる #m3dev - Qiita</a></strong></p>

<h2>次読む記事</h2>

<p><strong><a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL that Enables Federated Users to Access the AWS Management Console (Custom Federation Broker) - AWS Identity and Access Management</a></strong></p>

<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fog + carrierwaveでAWS S3に画像をアップロード]]></title>
    <link href="http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws/"/>
    <updated>2014-08-08T22:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774165166&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774165166&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/fog/fog">fog</a></strong>』はRubyのクラウドサービス向けのライブラリ(gem)です。
このfogと「<strong><a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a></strong>」を使うと、ユーザー向けの画像アップロードフォーム => S3への画像アップロードが、超簡単に実装できてしまいます！</p>

<p>「<strong><a href="http://morizyun.github.io/blog/short.works-parttimer-sidejob-iphone-app/">アルバイトを10秒で探せるiPhone/Androidアプリ Short.Works</a></strong>」でも画像アップロードの部分に活用しています！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>目次</h2>

<p>今回はcarriewave + Rails 4.1にfogを追加してS3にアップロードする部分を中心に説明します。</p>

<pre>
1) AWS でアクセスキーとシークレットキーを取得
2) S3 のブラケット作成
3) Carrierwave + Railsの基本実装
4) fogの導入(gem)
5) アップローダー(xxx_uploader.rb)の実装
6) carrierwave 設定ファイルの実装
</pre>


<h2>1) AWS でアクセスキーとシークレットキーを取得</h2>

<p>「<strong><a href="http://aws.amazon.com/jp/console/">AWSのコンソール</a></strong>」にログイン。</p>

<p>AWSにログインしたら右の自分のユーザー名 => <code>Security Credencial</code>を選択。</p>

<p><img src="https://farm6.staticflickr.com/5580/14851160675_37732ec8a3_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-07_21_04_19"></p>

<p>その中で、アクセスキーとシークレットキーを選択・作成。</p>

<p><img src="https://farm4.staticflickr.com/3859/14851143595_d2b31afcb8_z.jpg" width="640" height="351" alt="aws console"></p>

<p>このコードをあとでRails側で設定します。</p>

<h2>2) S3 のバケット作成</h2>

<p>S3のバケット(Bucket)を作成します。まずはS3を選択。</p>

<p><img src="https://farm4.staticflickr.com/3867/14875686133_c655bc19d8_z.jpg" width="640" height="349" alt="スクリーンショット_2014-08-08_9_58_41"></p>

<p>S3でバケットを作成。</p>

<p><img src="https://farm4.staticflickr.com/3897/14669129150_af82e98148_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-08_10_02_39"></p>

<h2>3) Carrierwave + Railsの基本実装</h2>

<p>Carrierwave + Rails 4.1での基本的な実装は拙著『<strong><a href="http://morizyun.github.io/blog/carrierwave-image-uploader-rails/">Carrierwave + Rails 4.1 画像アップローダー</a></strong>』をご参照頂ければ幸いです！</p>

<p>ここでは、上記の実装まで完了している前提で、<code>fog</code>を組み込む部分を中心に説明を書いていきます。</p>

<h2>4) fogの導入(gem)</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>{% codeblock lang:ruby %}
gem 'fog'
{% endcodeblock %}</p>

<h2>5) アップローダー(xxx_uploader.rb)の実装</h2>

<p><code>uploaders/xxx_uploader.rb</code>を以下のように変更。</p>

<p>{% codeblock lang:ruby %}
storage :file</p>

<h1>↓ 以下のように変更</h1>

<p>storage :fog
{% endcodeblock %}</p>

<h2>6) carrierwave 設定ファイルの実装</h2>

<p><code>config/initialize/carrierwave.rb</code>のファイルを作成して以下のように記述。</p>

<p>ACCESS_KEYとSECRET_KEYは「1) AWS でアクセスキーとシークレットキーを取得」で取得したものを貼り付け。</p>

<p>リージョンは『<strong><a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints - Amazon Web Services</a></strong>』を参照。ちなみに東京リージョンなら<code>ap-northeast-1</code>。</p>

<p><code>config.fog_directory</code>や<code>config.asset_host</code>には、S3のバケットの名前を入れる。</p>

<p>{% codeblock lang:ruby %}
CarrierWave.configure do |config|
  config.fog_credentials = {</p>

<pre><code>  :provider               =&gt; 'AWS',
  :aws_access_key_id      =&gt; 'ACCESS_KEY',
  :aws_secret_access_key  =&gt; 'SECRET_KEY',
  :region                 =&gt; 'REGION',
  :path_style             =&gt; true,
</code></pre>

<p>  }</p>

<p>  config.fog_public     = true
  config.fog_attributes = {'Cache-Control' => 'public, max-age=86400'}</p>

<p>  case Rails.env</p>

<pre><code>when 'production'
  config.fog_directory = 'example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/example.com'
when 'staging'
  config.fog_directory = 'stg.example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/stg.example.com'
when 'development'
  config.fog_directory = 'dev.example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/dev.example.com'
when 'test'
  config.fog_directory = 'test.example.com'
  config.asset_host = 'https://s3-ap-northeast-1.amazonaws.com/test.example.com'
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>これで画像がS3にアップロードされるようになるはずデス！</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://www.workabroad.jp/posts/1186">RailsとCarrierWaveでAmazon S3に画像を保存する | Workabroad.jp</a></p>

<p><a href="http://blog.cloudpack.jp/2014/08/04/allow-other-account-to-write-to-amazon-s3/">Amazon S3に別アカウントから書き込みを許可する場合の設定 | cloudpack技術情報サイト</a></p>
]]></content>
  </entry>
  
</feed>
