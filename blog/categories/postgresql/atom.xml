<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PostgreSQL | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T21:03:25+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webエンジニアにも勉強になる！データベースエンジニア養成読本[書評]]]></title>
    <link href="http://morizyun.github.io/blog/database-engineer-training-book-review/"/>
    <updated>2015-03-07T16:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/database-engineer-training-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774158062/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774158062&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774158062&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774158062" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
最近、仕事でRMSDBやNoSQL関係の設計などで苦労をしていたので、基礎知識の復習を兼ねて『<strong><a href="http://www.amazon.co.jp/gp/product/4774158062/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774158062&amp;linkCode=as2&amp;tag=morizyun00-22">データベースエンジニア養成読本</a></strong>』を読みました。全般的にRMSDBやNoSQLの主要な製品の概要やSQLなどの基礎知識を体系的に知ることができる本です。</p>

<p>今回はいつもどおり、自分の頭を整理するための俺得メモです。
(わかりにくい部分が多いと思いますが、ご容赦ください)</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>DBの需要な機能</h2>

<p>DBが一般的に持っているトランザクションのACID属性はアプリケーションの実装を楽にするために重要な機能である。</p>

<pre>
Atomicity   (原子性) => トランザクションに含まれるタスクが全て実行、or 全く実行されないことを保証する性質
Consistency (一貫性) => トランザクション開始と終了時にあらかじめ与えられた整合性を満たすことを保証する性質
Isolation   (独立性) => トランザクション中に行われる操作の過程が他の操作から隠蔽されること
Durability  (永続性) => トランザクション操作の完了通知をユーザが受けた時点で、その操作は永続的となり、結果が失われないこと
</pre>


<p>上記の説明は、<strong><a href="http://ja.wikipedia.org/wiki/ACID_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E7%A7%91%E5%AD%A6">ACID (コンピュータ科学) Wikipedia</a>)</strong></p>

<h2>InnoDB、MyISAMとは</h2>

<p>MySQLのデータベースエンジン「InnoDB と MyISAM」について。</p>

<pre>
InnoDB => ロック方式が行ロック
MyISAM => ロック方式がテーブルロック。テーブル自体にロックがかかるため、重い処理を実行すると処理待ちが発生しやすくなる。
</pre>


<h2>NoSQLの特徴</h2>

<p>Web系システムを中心として次の「3V」と呼ばれる課題が発生しやすくなった。</p>

<pre>
Volume   => データ量
Variety  => データの種類
Velocity => データ発生 / 処理頻度 / 速度
</pre>


<p>その課題に特化した解決策として、NoSQLが台頭し始めた。</p>

<p>しかしながら、NoSQLがRDBMSに置き換わるようなものではない。理由としては、</p>

<pre>
1) NoSQLは特定の問題を解決するためにRDBMSの持ついくつかの機能を犠牲にしている
2) NoSQLは歴史が浅く、技術として十分に使い古されておらず、ノウハウも不足している
</pre>


<h2>カラムファミリー型のデータベース: BigTableなど</h2>

<p>複数の列をまとめたカラムファミリーの単位でデータを取り出す。
実際のデータは、行、カラムファミリー、列をキーとしてそれらを辞書順にソートされたKVSのような形でデータを保持している。</p>

<p>カラムファミリー型DBの得意分野は、当単位での入力・検索を高速に行うようなOLTP(OnLine Transaction Processing)
である。一方で、RDBMSは格納データに複雑な集計を行う計算などに向いている。使い方が全く異なることに注意が必要。</p>

<h2>Redisについて</h2>

<p>すべてのデータをメモリ上に持つ「インメモリデータベース」として、高速に動作。メモリ上のデータをディスクに保存し、永続化する。</p>

<p>Redisは次のデータ型を持つ。</p>

<pre>
String:     文字列
List:       配列
Set:        集合
Hash:       連想配列
Sorted Set: スコア付き集合
</pre>


<p>Redisはシングルプロセス、シングルスレッドのイベント駆動アーキテクチャを採用しているので多くの処理をアトミックに行える。</p>

<p>Redisが有効な用途の一例。</p>

<pre>
リアルタイムランキング => Sorted Set型を使用すると高速にランキング処理を行うことができる
アクティブユーザーの集計 => Set型を利用して、集合操作関数を利用すればいろいろなデータを取得できる
</pre>


<h2>Riakについて</h2>

<p>Riakの特徴は次の通り。</p>

<pre>
高可用性) 多少のハードウェアやネットワークの故障でシステムが停止することなく、どんなときも書き込みと読み出しができる
高信頼性) 多少の負荷でもシステムは安定したレスポンスとスループットを提供する
拡張性) データ量や負荷に応じて、無停止でシステムをスケールアウトさせることができる
低遅延) どんなときでも、ユーザーを待たせず、すぐにレスポンスを得ることができる
予測可能性) 性能予測を裏切らない、安定したスケールアウト性
</pre>


<p>Riakを利用すべきシーン。</p>

<pre>
・データ量が数倍のレベルで増減する
・簡単にスケールアウトしたい
・複数行のトランザクションやJOINがない
・スパイク時でも安定したレイテンシが欲しい
・故障時の運用を簡単にしたい
・アインしんして夜に眠りたい
</pre>


<p>ちなみに、GitHub Pagesの静的ファイルはすべてRiak上に保存されている。</p>

<h2>SQLの基礎</h2>

<p>SQLの種類。</p>

<pre>
データ操作言語(DML: Data Manipulation Language) select/insert/update/deleteなど
データ定義言語(DDL: Data Definition Language) テーブル作成やフィールのデータ型の変更など
データ制御言語(DCL: Data Control Language) ユーザーの作成や権限の設定、排他制御の管理など
</pre>




<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuにRails 3.2.9/Bootstrapでデプロイ 最短・簡単ガイドだよ！]]></title>
    <link href="http://morizyun.github.io/blog/heroku-rails-postgresql/"/>
    <updated>2012-11-25T14:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/heroku-rails-postgresql</id>
    <content type="html"><![CDATA[<p>Heroku + Rails 3.2.9 + Bootstrap + Haml + PostgreSQL でデプロイするまでの最短ガイドを作りました！</p>

<p><a href="http://morizyun.github.io/blog/heroku-rails-postgresql" title="fpu_tmp_1353848330.5039_237fab by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8066/8216074991_1f11f3eda7_z.jpg" width="640" height="234" alt="fpu_tmp_1353848330.5039_237fab"></a></p>

<!-- more -->


<h2>Heroku ユーザー登録</h2>

<p><a href="http://heroku.com">Heroku</a>でユーザー登録をします。
アカウント作成時に使ったメールアドレスとパスワードは後で使うのでメモっておいてください。</p>

<p><a href="http://heroku.com/" title="fpu_tmp_1353828845.2153_57ac05 by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8482/8216564804_23e4f2f0e6.jpg" width="500" height="233" alt="fpu_tmp_1353828845.2153_57ac05"></a></p>

<p><a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>をインストールします。Heroku Toolbeltの機能は；</p>

<ul>
<li>Heroku client - Heroku appsを管理するためのCLI</li>
<li>Foreman - ローカルでHerokuアップを動かすためのオプション</li>
<li>Git - HerokuへのPush/ソースのバージョン管理</li>
</ul>


<p><a href="https://toolbelt.heroku.com/" title="fpu_tmp_1353829261.6919_09c68e by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8206/8216575530_03e6a52a70.jpg" width="500" height="291" alt="fpu_tmp_1353829261.6919_09c68e"></a></p>

<h2>ローカル環境設定</h2>

<p>任意でrailsのアップデートを実行します。</p>

<p>{% codeblock コンソール lang:bash %}
rvmsudo gem update rails
{% endcodeblock %}</p>

<p>gem herokuをインストールします。</p>

<p>{% codeblock コンソール lang:bash %}
gem install 'heroku'
{% endcodeblock %}</p>

<p>アカウント作成時に使ったメールアドレスとパスワードを事前に設定します。
これによってデプロイのたびに、パスワードを聞かれるのを防ぎます。</p>

<p>{% codeblock コンソール lang:ruby %}
heroku keys:add
Enter your Heroku credentials.
Email: email@example.com
Password: your-password
Uploading ssh public key /Users/joe/.ssh/id_rsa.pub
{% endcodeblock %}</p>

<h2>Rails プロジェクト作成 〜 index.html表示まで</h2>

<p>Railsの新規プロジェクトを作成します。</p>

<p>{% codeblock コンソール lang:bash %}
rails new test-app --skip-test-unit -d postgresql
{% endcodeblock %}</p>

<p>Gitリポジトリ作成を作成します。</p>

<p>{% codeblock コンソール lang:bash %}
git init
git add -A
git commit -m "create new project"
{% endcodeblock %}</p>

<p>herokuコマンドを使って、heroku上にアプリケーションを作成します。
(test-appだとすでに使われてて動かないので、使われてなさそうな名前がいいっすよ〜)</p>

<p>{% codeblock コンソール lang:bash %}
heroku create test-app --stack cedar</p>

<blockquote><p>Creating test-app... done, stack is cedar
http://test-app.herokuapp.com/ | git@heroku.com:test-app.git
Git remote heroku added # &lt;= こうなっていれば成功
{% endcodeblock %}</p></blockquote>

<p>http://test-app.herokuapp.com/ をブラウザで表示されることを確認。</p>

<h2>Rails Gem登録 〜 scaffold表示まで</h2>

<p>gemfileを編集して、プロジェクトに任意のGemを追加。
(gemは適宜カスタマイズしてください)</p>

<p>{% codeblock gemfile lang:bash %}
source 'https://rubygems.org'
ruby "1.9.3"</p>

<p>gem 'rails'</p>

<h1>Bootstrap</h1>

<p>gem 'less-rails'
gem 'less-rails-bootstrap'</p>

<h1>Form Builders</h1>

<p>gem 'simple_form'
gem 'country_select'</p>

<h1>Haml</h1>

<p>gem 'haml-rails'</p>

<h1>jQuery/json</h1>

<p>gem 'jquery-rails'
gem 'jquery-cookie-rails' # jquery-cookie
gem 'json'</p>

<h1>Presenter</h1>

<p>gem 'draper'</p>

<h1>Thin</h1>

<p>gem 'thin'</p>

<p>group :assets do
  gem 'coffee-rails'
  gem 'therubyracer'
  gem 'uglifier'
end</p>

<p>group :development do
  # 環境変数をロードして複数のプロセスを実行する作業を自動化
  gem 'foreman'</p>

<p>  # viewやcssの変更を監視してブラウザを自動的にリロードする
  gem 'guard-livereload'
  gem 'em-websocket'</p>

<p>  # デバッガー
  gem 'pry-rails'
end</p>

<p>group :development, :test do
  gem 'mysql2'</p>

<p>  # Rspec
  gem 'rspec-rails'</p>

<p>  # FactoryGirl
  gem 'factory_girl_rails'</p>

<p>  # 設定をロードしたサーバーによってテストを高速化
  gem 'spork'</p>

<p>  # ファイルの変更を検知する。OSX用
  gem 'rb-fsevent'</p>

<p>  # テスト結果をGrowlで通知する
  gem 'growl'</p>

<p>  # ファイルの変更を監視してテストを自動化
  gem 'guard-rspec'</p>

<p>  # 設定ファイルの変更を監視してテストサーバーを再起動
  gem 'guard-spork'</p>

<p>  gem 'rails3-generators', :git => 'https://github.com/neocoin/rails3-generators.git'
end</p>

<p>group :postgres do
  gem 'pg'
end
{% endcodeblock %}</p>

<p>Gemをインストール。</p>

<p>{% codeblock コンソール lang:bash %}
bundle install
{% endcodeblock %}</p>

<p>config/application.rbの設定です。<br/>(class Application &lt; Rails::Application内に追記してください)</p>

<p>{% codeblock config/application.rb lang:ruby %}</p>

<h1>LESS</h1>

<p>config.app_generators.stylesheet_engine :less
config.less.paths &lt;&lt; "#{Rails.root}/lib/less/protractor/stylesheets"
config.less.compress = true
config.assets.compress = true
config.assets.initialize_on_precompile=false # herokuでasset:precomileエラー対策</p>

<h1>Set timezone</h1>

<p>config.time_zone = 'Tokyo'
config.active_record.default_timezone = :local</p>

<h1>日本語化</h1>

<p>config.i18n.default_locale = :ja</p>

<h1>generatorの設定</h1>

<p>config.generators do |g|
  g.orm :active_record
  g.template_engine :haml
  g.test_framework  :rspec, :fixture => true
  g.fixture_replacement :factory_girl, :dir => "spec/factories"
end</p>

<h1>load original validator(オリジナルのバリデーターがある場合のみ)</h1>

<p>config.autoload_paths += %W(#{config.root}/lib/validators)
{% endcodeblock %}</p>

<p>Herokuのタイムゾーン設定。</p>

<p>{% codeblock コンソール lang:bash %}
heroku config:add TZ=Asia/Tokyo
{% endcodeblock %}</p>

<p>application.cssを削除して、lessファイルを生成</p>

<p>{% codeblock コンソール lang:css %}
rm -rf app/assets/stylesheets/application.css
rails generate less:assets application
{% endcodeblock %}</p>

<p>bootstrapのcssを読み込むように設定を追加する。
app/assets/stylesheets/application.css.lessに以下んコードを追加。</p>

<p>{% codeblock app/assets/stylesheets/application.css.less lang:ruby %}
// = require_tree .
@import "twitter/bootstrap";
{% endcodeblock %}</p>

<p>bootstrapのjavascriptを読み込むようにするために、app/assets/javascripts/application.jsに以下のコードを追加。</p>

<p>{% codeblock app/assets/javascripts/application.js lang:ruby %}
//= require twitter/bootstrap
//= require jquery.cookie</p>

<p>$(document).ready(function(){</p>

<p>});
{% endcodeblock %}</p>

<p>application.html.erbファイルをhamlにファイル名を変更。</p>

<p>{% codeblock コンソール lang:bash %}
mv app/views/layouts/application.html.erb app/views/layouts/application.html.haml
{% endcodeblock %}</p>

<p>application.html.hamlの中身もhaml形式にする。</p>

<p>{% codeblock application.html.haml lang:haml %}
!!! 5
%html
  %head</p>

<pre><code>%title TEST_APP
= stylesheet_link_tag "application", :media =&gt; "all"
= javascript_include_tag "application"
= csrf_meta_tags
</code></pre>

<p>  %body</p>

<pre><code>= yield
</code></pre>

<p>{% endcodeblock %}</p>

<p>Railsの日本語化ファイルを設定する。</p>

<p>{% codeblock コンソール lang:bash %}
wget https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/ja.yml
mv ja.yml config/locales/ja.yml
{% endcodeblock %}</p>

<p>simple formの初期設定(bootstrap対応)</p>

<p>{% codeblock コンソール lang:bash %}
rails generate simple_form:install --bootstrap
{% endcodeblock %}</p>

<p>railsへのrspecのインストールと雛形を作成</p>

<p>{% codeblock コンソール lang:bash %}
rails generate rspec:install
{% endcodeblock %}</p>

<p>rspecの設定ファイル"spec/spec_helper.rb"を修正(コメントアウトする)</p>

<p>{% codeblock spec/spec_helper.rb lang:ruby %}</p>

<h1>config.fixture_path = "#{::Rails.root}/spec/fixtures"</h1>

<h1>config.use_transactional_fixtures = true</h1>

<p>{% endcodeblock %}</p>

<p>scaffoldを追加の前にpublic/index.htmlをリネーム(無効化する)。</p>

<p>{% codeblock コンソール lang:bash %}
mv public/index.html public/_____index.html
{% endcodeblock %}</p>

<p>scaffoldの作成してビューを追加。</p>

<p>{% codeblock コンソール lang:ruby %}
rails g scaffold product name price:integer
{% endcodeblock %}</p>

<p>config/routes.rbにて、ルートアクセス設定を追加。</p>

<p>{% codeblock config/routes.rb lang:ruby %}
root :to => "products#index"
{% endcodeblock %}</p>

<p>Herokuでthinが動くようにする。
プロジェクト直下にProcfileを新規作成。</p>

<p>{% codeblock Procfile lang:bash %}
web: bundle exec rails server thin -p $PORT -e $RACK_ENV
{% endcodeblock %}</p>

<p>設定画反映されたかチェック。</p>

<p>{% codeblock コンソール lang:bash %}
foreman check</p>

<blockquote><p>valid procfile detected (web) ← 成功
{% endcodeblock %}</p></blockquote>

<p>$RACK_ENVをセットするファイルを作成
{% codeblock コンソール lang:bash %}
echo "RACK_ENV=development" >>.env
{% endcodeblock %}</p>

<p>gitに.envが記録されないようにする。
プロジェクト直下の.gitignoreに以下を追加。</p>

<p>{% codeblock .gitignore lang:bash %}
.env
{% endcodeblock %}</p>

<p>Herokuへのアプリのデプロイ => DBのマイグレーション。</p>

<p>{% codeblock コンソール lang:ruby %}
git add . -A
git commit -m "add scafford"
git push heroku master
heroku run rake db:migrate
{% endcodeblock %}</p>

<p>ブラウザでscaffordしたビューが見れることを確認。
デプロイまでの最短ガイドは以上っす。</p>

<p>Thank very much you for your kind attention.</p>

<h2>関連記事</h2>

<p><strong><a href="/blog/pow-guard-rails">開発サーバをThinからPowに切り替えて開発効率アップ！ (Mac限定)</a></strong> にてPowに関する記事を載せました。Guardが更に活用できると思います。よかったらぜひ見てください。</p>

<h2>補足 : ローカルでのテスト環境の構築</h2>

<p>config/database.ymlを以下の通り編集する。今回は</p>

<ul>
<li>"development", "test" => mysql</li>
<li>"production" => postgreSQL</li>
</ul>


<p>とした場合の設定です。環境に合わせて調整を。</p>

<p>{% codeblock config/database.yml lang:ruby %}
development:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: test-app_development
  pool: 5
  username: root
  password:
  socket: /var/lib/mysql/mysql.sock</p>

<p>test:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: test-app_test
  pool: 5
  username: root
  password:
  socket: /var/lib/mysql/mysql.sock</p>

<p>production:
  adapter: postgresql
  encoding: unicode
  database: test-app_production
  pool: 5
  username:
  password:
{% endcodeblock %}</p>

<p>DBの作成を実行。</p>

<p>{% codeblock コンソール lang:bash %}
rake db:create RAILES_ENV='development'
rake db:create RAILES_ENV='test'
{% endcodeblock %}</p>

<p>サーバプロセスを起動する。</p>

<p>{% codeblock コンソール lang:bash %}
foreman start
{% endcodeblock %}</p>

<p>http://0.0.0.0:5000/_____index.htmlを表示してDBに接続されていることを確認する。</p>

<h2>補足 : コマンド系</h2>

<p>Heroku コマンド一覧</p>

<p>{% codeblock コンソール lang:bash %}</p>

<h1>herokuへのログイン</h1>

<p>heroku login
Email: email@example.com
Password: your-password</p>

<h1>アプリの作成</h1>

<p>heroku create</p>

<h1>マイグレーション</h1>

<p>heroku run rake db:migrate</p>

<h1>アプリのデプロイ</h1>

<p>git add . -A
git commit -m "add function"
git push heroku master</p>

<h1>環境変数のセット</h1>

<p>heroku config:add USERNAME=admin PASSWORD=xxx</p>

<h1>ログ確認</h1>

<p>heroku logs -t</p>

<h1>heroku プロセス情報の表示</h1>

<p>heroku ps</p>

<h1>heroku 環境変数の表示</h1>

<p>heroku config
{% endcodeblock %}</p>

<p>既存モデルのRspec雛形を作成するコマンド。</p>

<p>{% codeblock コンソール lang:bash %}
rails generate rspec:model products
{% endcodeblock %}</p>

<p>テスト環境は以下の通りです。</p>

<pre>
OS : Mac Lion(OS X 10.7)
Rails : 3.2.9
haml : 3.1.7
coffee-script : 3.2.1
</pre>


<h2>Special Thanks</h2>

<ul>
<li><p><a href="http://nobyu.hatenadiary.jp/entry/20100207/1265531331">HerokuとRailsで手早くWebサイトを作る</a></p></li>
<li><p><a href="http://change-the-world.heroku.com/5">Railsアプリ作成 + Herokuデプロイ</a></p></li>
<li><p><a href="http://ovreneli.blogspot.jp/2012/06/railspostgresqlheroku.html">RailsアプリをPostgreSQLで開発してHerokuにデプロイするまでの簡単まとめ</a></p></li>
<li><p><a href="http://edywrite.blogspot.jp/2012/08/herokuwebthin.html">Herokuのwebサーバをthinに変更する</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
