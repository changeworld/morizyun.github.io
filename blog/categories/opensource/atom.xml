<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenSource | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/opensource/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-12-30T20:26:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[21世紀の掲示板プラットホーム DISCOURSEのインストール手順]]></title>
    <link href="http://morizyun.github.io/blog/discourse-discussion-board-rails/"/>
    <updated>2013-03-03T13:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/discourse-discussion-board-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00BBFOGEY/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00BBFOGEY&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00BBFOGEY&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00BBFOGEY" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />21世紀の掲示板プラットフォーム、今後10年の議論を担えると噂のDISCOURSEを導入する手順です。個人的にはとても読みやすいコードで書かれているのでコードを読んで勉強するのにも最適です！</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>DISOURSEとは？</h2>

<p><a href="http://www.discourse.org/" title="discourse"><img src="http://farm9.staticflickr.com/8519/8518659434_58d4f9798a_c.jpg" width="800" height="397" alt="discourse"></a></p>

<p>DISCOURSEとは<a href="http://jp.techcrunch.com/archives/20130205jeff-atwood-launches-discourse/">Stack Overflowなどの世界No1のテック系Q&amp;Aサイトを立ち上げたファウンダの方が新たに作っている近代的な掲示板ツール</a>です。旧来の文字だけではなく、画像や動画を簡単に投稿できたり、わかりやすいUIが特徴的なオープンソースです。開発も非常に活発なのも魅力です。</p>

<p>Railsで作られていて少し読んだ限りでは、非常に読みやすいコードばかりなので、Railsのコードを読んで勉強するのにオススメです！</p>

<h2>導入手順</h2>

<h3>(1) PostgreSQL ver9.1以上のインストール</h3>

<p>拙著、『<strong><a href="/blog/postgresql-mac-centos-rails">Mac MountainLion/CentOS 6.3へのPostgreSQL 9.2の導入手順</a></strong>』がオススメです。</p>

<h3>(2) Redis ver2以上のインストール</h3>

<p>拙著、『<strong><a href="/blog/redis-mac-centos-rails">CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB</a></strong>』がオススメです。</p>

<h3>(3) Ruby 1.9.3とBundlerのインストール</h3>

<p>Macなら『<strong><a href="/blog/mountain-lion-rails-setup-ruby-rvm-msyql">Mountain Lion Rails 最新環境 詳解 構築手順</a></strong>』、CentOSなら『<strong><a href="/blog/rvm-install-centos-ruby-rails">CentOS 6.3 Ruby 1.93/RVMのインストール手順</a></strong>』がオススメです。</p>

<h3>(4) DISCOURSEのclone</h3>

<p>以下のコマンドを実行して、<code>DISCOURSE</code>のコードをclone。</p>

<p>{% codeblock lang:bash %}
git clone git://github.com/discourse/discourse.git
{% endcodeblock %}</p>

<h3>(5) DISCOURSEの環境構築</h3>

<p>以下のコマンドを実行するとDISCOURSEの環境を構築します。</p>

<p>production環境、及びpostgreSQLのユーザーを作成する場合はこの記事の最後の方に補足を書いていますので、良かったら先に読んでみて下さい。</p>

<p>{% codeblock lang:bash %}</p>

<h1>database.ymlの準備</h1>

<p>mv config/database.yml.sample config/database.yml</p>

<h1>redis.ymlの準備</h1>

<p>mv config/redis.yml.sample config/redis.yml</p>

<h1>Gemのインストール</h1>

<p>bundle install</p>

<h1>DBの作成</h1>

<p>bundle exec rake db:create:all</p>

<h1>マイグレーション</h1>

<p>rake db:migrate</p>

<h1>DBのテスト環境の準備</h1>

<p>rake db:test:prepare</p>

<h1>seedファイル(初期データ)の読み込み</h1>

<p>rake db:seed_fu</p>

<h1>seedファイルの代わりにdev環境でサンプルデータを読み込む場合</h1>

<p>wget http://www.discourse.org/vms/dev-discourse-seed.sql
psql -d discourse_development &lt; dev-discourse-seed.sql</p>

<h1>RSpecでテストを実行して動作確認</h1>

<p>bundle exec rspec
{% endcodeblock %}</p>

<h3>(6) サーバの起動</h3>

<p>webrickをサーバにする場合は下のコマンドを実行して、<code>http://localhost:3000</code>をブラウザで開く。</p>

<p>{% codeblock lang:bash %}
bundle exec rails server
{% endcodeblock %}</p>

<p>もし、Powを使う場合は、Gemfileに<code>gem 'powder'</code>を追加して<code>bundle</code>を実行。そして、以下のコマンドを実行。</p>

<p>{% codeblock lang:bash %}
powder link
powder open
{% endcodeblock %}</p>

<p>これで、Discouseを起動出来ると思います！</p>

<h2>補足: postgreSQLのユーザー/DBを作成する場合</h2>

<p><code>config/database.yml</code>にPostgreSQLのユーザーとパスワードを追加する手順です。</p>

<p>{% codeblock lang:bash %}</p>

<h1>ユーザーの作成</h1>

<p>createuser -P [Railsの実行ユーザーと同名] -s</p>

<blockquote><p>[パスワードを設定]</p></blockquote>

<h1>データベースの作成</h1>

<p>createdb [データベース名] -O [Railsの実行ユーザーと同名]
{% endcodeblock %}</p>

<p>続いて、<code>config/database.yml</code>にユーザーの設定を追加する設定例です。</p>

<p>{% codeblock lang:ruby %}
  username: [Railsの実行ユーザーと同名]
  password: [パスワード]
host_names:
  - "[ホスト名]"
{% endcodeblock %}</p>

<h2>補足: production環境の場合</h2>

<p>production環境にDiscourseに設置する場合、<code>secret_token</code>を設定する必要があるようです。<br/></p>

<p>まず、以下のコマンドを実行して<code>secret_token</code>を生成。</p>

<p>{% codeblock lang:bash %}
rake secret</p>

<blockquote><p>"生成されたsecret-token"
{% endcodeblock %}</p></blockquote>

<p>続いて、<code>vim config/initializers/ecret_token.rb</code>で以下を変更。</p>

<p>{% codeblock lang:ruby %}</p>

<h1>変更前</h1>

<p>if Rails.env.test? || Rails.env.development?
  Discourse::Application.config.secret_token = "secret_token"</p>

<h1>変更後</h1>

<p>if Rails.env.test? || Rails.env.development? || Rails.env.prodcution?
  Discourse::Application.config.secret_token = "生成されたsecret_tokenをセット"
{% endcodeblock %}</p>

<p>さらに、assetのコンパイルも必要。</p>

<p>{% codeblock lang:bash %}
bundle exec rake assets:precompile RAILS_ENV=production
{% endcodeblock %}</p>

<h2>補足:ソースを最新状態にする</h2>

<p>DISCOURSEはコードがものすごい勢いで開発されています。そのため、独自の変更をしていない場合は、定期的にソースを最新状態にアップデートすることをオススメします。</p>

<p>{% codeblock lang:bash %}
git reset --hard HEAD
git pull
bundle
bundle exec rake db:migrate RAILS_ENV=production
bundle exec rake assets:precompile RAILS_ENV=production
{% endcodeblock %}</p>

<p>{% include custom/google_ads_yoko_naga.html %}</p>

<h2>Special Thanks</h2>

<p><a href="http://rogerdudler.github.com/git-guide/index.ja.html">git - 簡単ガイド</a></p>

<p><a href="http://d.hatena.ne.jp/mickey24/20081022/1224668137">gitでファイルの変更をすべて取り消し前回コミットした時の状態に戻す - ぬいぐるみライフ(仮)</a></p>

<h2>変更来歴</h2>

<p>03/15 08:55 『ソースを最新状態にする』を補足に追加<br/></p>
]]></content>
  </entry>
  
</feed>
