<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 文字列操作 | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/文字列操作/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-12T23:56:30+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: オリジナルの数値フォーマットの加算[AOJ 1137][Ruby/Python][文字列操作]]]></title>
    <link href="http://morizyun.github.io/blog/numeral-system-algorithm-aoj-1137/"/>
    <updated>2014-05-08T23:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/numeral-system-algorithm-aoj-1137</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048869574/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048869574&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048869574&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048869574" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />引き続きプログラミングの基礎体力づくりと、Pythonの勉強を兼ねてアルゴリズムを勉強中です。今回は『<strong>カッコが閉じているかのチェック</strong>』について勉強しました。AIZU Online Judgeで対応している問題は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1137&amp;lang=jp">Numeral System</a></strong>』です。ごくごく初歩的な問題ですが、いかに戦略を立てて素早く解くかを意識するとまた楽しくなってきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>サンプル問題(AOJ)</h2>

<p><strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1137&amp;lang=jp">Numeral System</a></strong><br/>
Aizu Online Judge。"m"，"c"，"x"，"i" の4個の文字と "2"，"3"，"4"，"5"，"6"，"7"，"8"，"9" の8個の数字を 使った整数値の新しいフォーマットの加算と結果表示をする。</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:bash %}
DICT = { 'm' => 1000, 'c' => 100, 'x' => 10, 'i' => 1 }.freeze</p>

<p>def mcxi_to_digit(s)
  sum = 0
  DICT.each do |k, v|</p>

<pre><code>if s.include?(k)
  if s[s.index(k)-1] &gt;= '2' and s[s.index(k)-1] &lt;= '9'
    sum += s[s.index(k)-1].to_i * v
  else
    sum += v
  end
end
</code></pre>

<p>  end
  return sum
end</p>

<p>def digit_to_mcxi(n)
  str = ''
  DICT.to_a.map do |k, v|</p>

<pre><code>val = n/v
n = n%v
if val &gt;= 2
  str += "#{val}#{k}"
elsif val == 1
  str += k
end
</code></pre>

<p>  end
  return str
end</p>

<p>n = gets.to_i
n.times do
  a, b = gets.chomp.split(' ')
  sum = mcxi_to_digit(a) + mcxi_to_digit(b)
  puts digit_to_mcxi(sum)
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:bash %}
def mxciToDegit(s):
  dict = {'m': 1000, 'c': 100, 'x': 10, 'i': 1}
  sum = 0
  for c in dict:</p>

<pre><code>if c in s:
  if "2" &lt;= s[s.index(c)-1] &lt;= "9":
    sum += int(s[s.index(c)-1])*dict[c]
  else:
    sum += dict[c]
</code></pre>

<p>  return sum</p>

<p>n = int(raw_input())
for i in range(n):
  a, b = raw_input().split()
  sum = mxciToDegit(a) + mxciToDegit(b)</p>

<p>  st = ""
  list =((1000, "m"), (100, "c"), (10, "x"), (1, "i"))
  for d, c in list:</p>

<pre><code>val = sum/d
if val &gt;= 2:
  st += str(val) + c
elif val == 1:
  st += c
sum = sum%d
</code></pre>

<p>  print st
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: カッコが閉じているかチェック[AOJ 1173][Ruby/Python][文字列操作]]]></title>
    <link href="http://morizyun.github.io/blog/the-balance-of-the-world-algorithm-aoj-1173/"/>
    <updated>2014-05-08T08:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/the-balance-of-the-world-algorithm-aoj-1173</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4121504895/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4121504895&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4121504895&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4121504895" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />引き続きプログラミングの基礎体力づくりと、Pythonの勉強を兼ねてアルゴリズムを勉強中です。今回は『<strong>カッコが閉じているかのチェック</strong>』について勉強しました。AIZU Online Judgeで対応している問題は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1173&amp;lang=jp">The Balance of the World</a></strong>』です。パズル問題ですが、空き時間が10分あれば十分に解けるお手軽問題なので、もしお時間があれば是非！</p>

<p>また、AOJは他の人の回答を気軽に読む事ができます。かなり小さなプログラムなので、可読性と処理の高速性の両立の勉強には持って来いです＾＾</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>サンプル問題(AOJ)</h2>

<p><strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1173&amp;lang=jp">The Balance of the World</a></strong><br/>
Aizu Online Judge。与えられる文字列は，丸括弧(“( )”)と角括弧(“[ ]”)の二種類の括弧を含むことがある。このカッコの対応関係が正しいかをチェックする問題。</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:bash %}
def check_block(str)
  q = []
  str.gsub(/[<sup>()[]]/,</sup> '').chars.each do |c|</p>

<pre><code>if c == '(' or c == '['
  q.push(c)
elsif c == ')'
  r = q.pop() rescue nil
  return 'no' if r != '('
elsif c == ']'
  r = q.pop() rescue nil
  return 'no' if r != '['
end
</code></pre>

<p>  end
  q.count == 0 ? 'yes' : 'no'
end</p>

<p>while gets
  break if $<em>.chomp == '.'
  puts check_block($</em>.chomp)
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:bash %}
while True:
  s = raw_input()
  if s == '.': break</p>

<p>  ns = ''
  for c in s:</p>

<pre><code>if c in ['(', ')', '[', ']']:
  ns += c
</code></pre>

<p>  while True:</p>

<pre><code>tmp = ns
ns = ns.replace('[]', '')
ns = ns.replace('()', '')
if (tmp == ns): break
</code></pre>

<p>  print 'no' if ns else 'yes'
{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アルゴリズムの勉強: 共通部分文字列をカウント[AOJ 528][Ruby/Python][文字列操作]]]></title>
    <link href="http://morizyun.github.io/blog/intersectional-string-counter-algorithm-aoj-528/"/>
    <updated>2014-05-07T23:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/intersectional-string-counter-algorithm-aoj-528</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4844332015/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4844332015&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4844332015&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4844332015" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />引き続きプログラミングの基礎体力づくりと、Pythonの勉強を兼ねてアルゴリズムを勉強中です。今回は『<strong>共通部分文字列をカウントする方法</strong>』について勉強しました。AIZU Online Judgeで対応している問題は、『<strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0528">Common Sub-String</a></strong>』です。アルゴリズムというよりは頭の体操的なパズル問題ですが、ある程度速度の早いプログラムを書くのには工夫が必要だなと痛感しています。</p>

<!-- more -->


<br style="clear:both;"/>


<p>{% include custom/google_ads_square.html %}</p>

<h2>サンプル問題(AOJ)</h2>

<p><strong><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0528">Common Sub-String</a></strong><br/>
Aizu Online Judge。2 個の文字列が与えられたとき, 両方の文字列に含まれる文字列のうち最も長いも のを探し, その長さを答えるプログラム。</p>

<h2>Rubyのサンプルソース</h2>

<p>{% codeblock lang:bash %}
loop do
  s, t = gets.chomp, gets.chomp rescue break
  s, t = t, s if s.length > t.length
  max_l = (s.chars &amp; t.chars).map do |a|</p>

<pre><code>[s.count(a), t.count(a)].min
</code></pre>

<p>  end.inject(:+).to_i</p>

<p>  answer = 0
  0.upto(t.length).each do |i|</p>

<pre><code>break if t.length - i &lt;= answer
max = [max_l+1, t.length - i + 1].min - 1
(answer + 1).upto(max) do |j|
  if s.include?(t[i...i+j])
    answer = j
  else
    break
  end
end
</code></pre>

<p>  end
  puts answer
end
{% endcodeblock %}</p>

<h2>Pythonのサンプルソース</h2>

<p>{% codeblock lang:bash %}
while True:
  try:</p>

<pre><code>s, t = raw_input(), raw_input()
if len(s) &lt; len(t): s, t = t, s
MAXL = sum(min(s.count(i), t.count(i)) for i in set(list(s)) &amp; set(list(t)))
ans = 0
for sp in range(len(t)):
  if len(t) - sp &lt;= ans:
    break
  for l in range(ans+1, min(MAXL+1, len(t)-sp+1)):
    if t[sp:sp+l] in s:
      ans = l
    else:
      break
print ans
</code></pre>

<p>  except:</p>

<pre><code>break
</code></pre>

<p>{% endcodeblock %}</p>

<h2>Aizu Online Judgeのサンプルソース</h2>

<p>当面はAOJを解きながら、アルゴリズムの再勉強をしていくつもりです。Ruby/PythonでのAOJの回答は下のリポジトリに保存しておきます。もしツッコミとかあれば是非＾＾</p>

<p><strong><a href="https://github.com/morizyun/aoj-ruby-python">morizyun/aoj-ruby-python - GitHub</a></strong></p>

<h2>最近解いたAOJの問題</h2>

<p><strong><a href="/blog/categories/AOJ/">AOJタグのついた最近解いた問題一覧</a></strong></p>

<p>{% include custom/google_ads_square.html %}</p>
]]></content>
  </entry>
  
</feed>
